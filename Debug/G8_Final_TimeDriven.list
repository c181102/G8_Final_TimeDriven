
G8_Final_TimeDriven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007fc  0800a6f0  0800a6f0  0001a6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aeec  0800aeec  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800aeec  0800aeec  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aeec  0800aeec  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aeec  0800aeec  0001aeec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aef0  0800aef0  0001aef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800aef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  200001f4  0800b0e8  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  0800b0e8  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126f9  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000279b  00000000  00000000  00032916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  000350b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  00036188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001938c  00000000  00000000  00037180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c81  00000000  00000000  0005050c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ead6  00000000  00000000  0006418d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2c63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dec  00000000  00000000  000f2cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a6d4 	.word	0x0800a6d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800a6d4 	.word	0x0800a6d4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	4605      	mov	r5, r0
 8000d9c:	460c      	mov	r4, r1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2300      	movs	r3, #0
 8000da2:	4628      	mov	r0, r5
 8000da4:	4621      	mov	r1, r4
 8000da6:	f7ff fe13 	bl	80009d0 <__aeabi_dcmplt>
 8000daa:	b928      	cbnz	r0, 8000db8 <__aeabi_d2lz+0x20>
 8000dac:	4628      	mov	r0, r5
 8000dae:	4621      	mov	r1, r4
 8000db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db4:	f000 b80a 	b.w	8000dcc <__aeabi_d2ulz>
 8000db8:	4628      	mov	r0, r5
 8000dba:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000dbe:	f000 f805 	bl	8000dcc <__aeabi_d2ulz>
 8000dc2:	4240      	negs	r0, r0
 8000dc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc8:	bd38      	pop	{r3, r4, r5, pc}
 8000dca:	bf00      	nop

08000dcc <__aeabi_d2ulz>:
 8000dcc:	b5d0      	push	{r4, r6, r7, lr}
 8000dce:	2200      	movs	r2, #0
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <__aeabi_d2ulz+0x34>)
 8000dd2:	4606      	mov	r6, r0
 8000dd4:	460f      	mov	r7, r1
 8000dd6:	f7ff fb89 	bl	80004ec <__aeabi_dmul>
 8000dda:	f7ff fe5f 	bl	8000a9c <__aeabi_d2uiz>
 8000dde:	4604      	mov	r4, r0
 8000de0:	f7ff fb0a 	bl	80003f8 <__aeabi_ui2d>
 8000de4:	2200      	movs	r2, #0
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <__aeabi_d2ulz+0x38>)
 8000de8:	f7ff fb80 	bl	80004ec <__aeabi_dmul>
 8000dec:	4602      	mov	r2, r0
 8000dee:	460b      	mov	r3, r1
 8000df0:	4630      	mov	r0, r6
 8000df2:	4639      	mov	r1, r7
 8000df4:	f7ff f9c2 	bl	800017c <__aeabi_dsub>
 8000df8:	f7ff fe50 	bl	8000a9c <__aeabi_d2uiz>
 8000dfc:	4621      	mov	r1, r4
 8000dfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000e00:	3df00000 	.word	0x3df00000
 8000e04:	41f00000 	.word	0x41f00000

08000e08 <DELAY_TIM_Init>:
- Su dung thu vien hal

*****************************************************************************************************/
#include "delay_timer.h"
void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f003 f963 	bl	80040dc <HAL_TIM_Base_Start>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <DELAY_TIM_Us>:

void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	460b      	mov	r3, r1
 8000e28:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 8000e32:	bf00      	nop
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d3f9      	bcc.n	8000e34 <DELAY_TIM_Us+0x16>
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <DHT11_SetPinIn>:
static DHT11_Status DHT11_Start(DHT11_Sensor* dht);
static uint8_t DHT11_ReadByte(DHT11_Sensor* dht);

/* Private user code ---------------------------------------------------------*/
static void DHT11_SetPinIn(DHT11_Sensor* dht)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = dht->Pin;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	889b      	ldrh	r3, [r3, #4]
 8000e66:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(dht->Port, &GPIO_InitStruct);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f107 0208 	add.w	r2, r7, #8
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 fe7e 	bl	8002b7c <HAL_GPIO_Init>
}
 8000e80:	bf00      	nop
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <DHT11_SetPinOut>:

static void DHT11_SetPinOut(DHT11_Sensor* dht)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = dht->Pin;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	889b      	ldrh	r3, [r3, #4]
 8000ea2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(dht->Port, &GPIO_InitStruct);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f107 0208 	add.w	r2, r7, #8
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 fe60 	bl	8002b7c <HAL_GPIO_Init>
}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <DHT11_WritePin>:

static void DHT11_WritePin(DHT11_Sensor* dht, uint8_t value)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(dht->Port, dht->Pin, value);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6818      	ldr	r0, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	889b      	ldrh	r3, [r3, #4]
 8000ed8:	78fa      	ldrb	r2, [r7, #3]
 8000eda:	4619      	mov	r1, r3
 8000edc:	f001 ffe9 	bl	8002eb2 <HAL_GPIO_WritePin>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <DHT11_ReadPin>:

static uint8_t DHT11_ReadPin(DHT11_Sensor* dht)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    uint8_t value = HAL_GPIO_ReadPin(dht->Port, dht->Pin);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	889b      	ldrh	r3, [r3, #4]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4610      	mov	r0, r2
 8000efc:	f001 ffc2 	bl	8002e84 <HAL_GPIO_ReadPin>
 8000f00:	4603      	mov	r3, r0
 8000f02:	73fb      	strb	r3, [r7, #15]
    return value;
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <DHT11_DelayInit>:

static void DHT11_DelayInit(DHT11_Sensor* dht)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(dht->Timer);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff74 	bl	8000e08 <DELAY_TIM_Init>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <DHT11_DelayUs>:

static void DHT11_DelayUs(DHT11_Sensor* dht, uint16_t time)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(dht->Timer, time);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	887a      	ldrh	r2, [r7, #2]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff6e 	bl	8000e1e <DELAY_TIM_Us>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <DHT11_Start>:

static DHT11_Status DHT11_Start(DHT11_Sensor* dht)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b084      	sub	sp, #16
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
    DHT11_Status status = DHT11_ERR_RESPONSE;
 8000f52:	2301      	movs	r3, #1
 8000f54:	73fb      	strb	r3, [r7, #15]

    DHT11_SetPinOut(dht);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ff96 	bl	8000e88 <DHT11_SetPinOut>

    /* MCU sends out start signal and pulls down  voltage for at least 18 ms */
    DHT11_WritePin(dht, 0);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ffb0 	bl	8000ec4 <DHT11_WritePin>
    DHT11_DelayUs(dht, 18000);
 8000f64:	f244 6150 	movw	r1, #18000	; 0x4650
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ffdd 	bl	8000f28 <DHT11_DelayUs>

    /* MCU waits for DHT response (20-40us) */
    DHT11_SetPinIn(dht);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ff6c 	bl	8000e4c <DHT11_SetPinIn>
    DHT11_DelayUs(dht, 50);
 8000f74:	2132      	movs	r1, #50	; 0x32
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ffd6 	bl	8000f28 <DHT11_DelayUs>

    /* DHT sends out response signal and keeps it for 80 us */
    if (DHT11_ReadPin(dht) == 0)
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ffb3 	bl	8000ee8 <DHT11_ReadPin>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d112      	bne.n	8000fae <DHT11_Start+0x64>
    {
        DHT11_DelayUs(dht, 80);
 8000f88:	2150      	movs	r1, #80	; 0x50
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ffcc 	bl	8000f28 <DHT11_DelayUs>
        if (DHT11_ReadPin(dht) == 1)
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ffa9 	bl	8000ee8 <DHT11_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d108      	bne.n	8000fae <DHT11_Start+0x64>
        {
            status = DHT11_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]
            /* Wait for data transmission */
            while(DHT11_ReadPin(dht) == 1);
 8000fa0:	bf00      	nop
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ffa0 	bl	8000ee8 <DHT11_ReadPin>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d0f9      	beq.n	8000fa2 <DHT11_Start+0x58>
        }
    }

    return status;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <DHT11_ReadByte>:

static uint8_t DHT11_ReadByte(DHT11_Sensor* dht)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    uint8_t value = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]
    uint8_t idx;

    DHT11_SetPinIn(dht);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff41 	bl	8000e4c <DHT11_SetPinIn>

    for (idx = 0; idx < 8; idx++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73bb      	strb	r3, [r7, #14]
 8000fce:	e035      	b.n	800103c <DHT11_ReadByte+0x84>
    {
        /* Wait for old signal to end */
        while(DHT11_ReadPin(dht) == 0);
 8000fd0:	bf00      	nop
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ff88 	bl	8000ee8 <DHT11_ReadPin>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f9      	beq.n	8000fd2 <DHT11_ReadByte+0x1a>

        DHT11_DelayUs(dht, 40);
 8000fde:	2128      	movs	r1, #40	; 0x28
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ffa1 	bl	8000f28 <DHT11_DelayUs>

        /* Bit 1 */
        if (DHT11_ReadPin(dht) == 1)
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ff7e 	bl	8000ee8 <DHT11_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d10c      	bne.n	800100c <DHT11_ReadByte+0x54>
        {
            /* Set bit at (7-idx) position */
            value |= (0x01 << (7 - idx));
 8000ff2:	7bbb      	ldrb	r3, [r7, #14]
 8000ff4:	f1c3 0307 	rsb	r3, r3, #7
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	b25a      	sxtb	r2, r3
 8001000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001004:	4313      	orrs	r3, r2
 8001006:	b25b      	sxtb	r3, r3
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e00d      	b.n	8001028 <DHT11_ReadByte+0x70>

        /* Bit 0 */
        else
        {
            /* Clear bit at (7-idx) position */
            value &= ~(0x01 << (7-idx));
 800100c:	7bbb      	ldrb	r3, [r7, #14]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2201      	movs	r2, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	b25b      	sxtb	r3, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	b25a      	sxtb	r2, r3
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4013      	ands	r3, r2
 8001024:	b25b      	sxtb	r3, r3
 8001026:	73fb      	strb	r3, [r7, #15]
        }

        while(DHT11_ReadPin(dht) == 1);
 8001028:	bf00      	nop
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ff5c 	bl	8000ee8 <DHT11_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b01      	cmp	r3, #1
 8001034:	d0f9      	beq.n	800102a <DHT11_ReadByte+0x72>
    for (idx = 0; idx < 8; idx++)
 8001036:	7bbb      	ldrb	r3, [r7, #14]
 8001038:	3301      	adds	r3, #1
 800103a:	73bb      	strb	r3, [r7, #14]
 800103c:	7bbb      	ldrb	r3, [r7, #14]
 800103e:	2b07      	cmp	r3, #7
 8001040:	d9c6      	bls.n	8000fd0 <DHT11_ReadByte+0x18>
    }

    return value;
 8001042:	7bfb      	ldrb	r3, [r7, #15]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <DHT11_Init>:

void DHT11_Init(DHT11_Sensor* dht, GPIO_TypeDef* port, uint16_t pin, TIM_HandleTypeDef* timer)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	4613      	mov	r3, r2
 800105a:	80fb      	strh	r3, [r7, #6]
    dht->Port   = port;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	601a      	str	r2, [r3, #0]
    dht->Pin    = pin;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	88fa      	ldrh	r2, [r7, #6]
 8001066:	809a      	strh	r2, [r3, #4]
    dht->Timer  = timer;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	609a      	str	r2, [r3, #8]
    dht->Temp   = INIT_TEMP_VALUE;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4a05      	ldr	r2, [pc, #20]	; (8001088 <DHT11_Init+0x3c>)
 8001072:	60da      	str	r2, [r3, #12]
    dht->Humi   = INIT_HUMI_VALUE;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <DHT11_Init+0x3c>)
 8001078:	611a      	str	r2, [r3, #16]

    DHT11_DelayInit(dht);
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f7ff ff47 	bl	8000f0e <DHT11_DelayInit>
}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	bf800000 	.word	0xbf800000

0800108c <DHT11_GetData>:

DHT11_Status DHT11_GetData(DHT11_Sensor* dht)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    DHT11_Status status = DHT11_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]

    uint8_t rh_integral, rh_decimal, temp_integral, temp_decimal, sum;

	status = DHT11_Start(dht);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff56 	bl	8000f4a <DHT11_Start>
 800109e:	4603      	mov	r3, r0
 80010a0:	73fb      	strb	r3, [r7, #15]

    if (status == DHT11_OK)
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d15f      	bne.n	8001168 <DHT11_GetData+0xdc>
    {
        /* Read 5 byte from DHT */
        rh_integral     = DHT11_ReadByte(dht);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff85 	bl	8000fb8 <DHT11_ReadByte>
 80010ae:	4603      	mov	r3, r0
 80010b0:	73bb      	strb	r3, [r7, #14]
        rh_decimal      = DHT11_ReadByte(dht);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff80 	bl	8000fb8 <DHT11_ReadByte>
 80010b8:	4603      	mov	r3, r0
 80010ba:	737b      	strb	r3, [r7, #13]
        temp_integral   = DHT11_ReadByte(dht);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff7b 	bl	8000fb8 <DHT11_ReadByte>
 80010c2:	4603      	mov	r3, r0
 80010c4:	733b      	strb	r3, [r7, #12]
        temp_decimal    = DHT11_ReadByte(dht);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ff76 	bl	8000fb8 <DHT11_ReadByte>
 80010cc:	4603      	mov	r3, r0
 80010ce:	72fb      	strb	r3, [r7, #11]
        sum             = DHT11_ReadByte(dht);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff71 	bl	8000fb8 <DHT11_ReadByte>
 80010d6:	4603      	mov	r3, r0
 80010d8:	72bb      	strb	r3, [r7, #10]

        if (sum == rh_integral + rh_decimal + temp_integral + temp_decimal)
 80010da:	7aba      	ldrb	r2, [r7, #10]
 80010dc:	7bb9      	ldrb	r1, [r7, #14]
 80010de:	7b7b      	ldrb	r3, [r7, #13]
 80010e0:	4419      	add	r1, r3
 80010e2:	7b3b      	ldrb	r3, [r7, #12]
 80010e4:	4419      	add	r1, r3
 80010e6:	7afb      	ldrb	r3, [r7, #11]
 80010e8:	440b      	add	r3, r1
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d13a      	bne.n	8001164 <DHT11_GetData+0xd8>
        {
            dht->Humi = rh_integral + (float)(rh_decimal/10.0);
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fdfd 	bl	8000cf0 <__aeabi_i2f>
 80010f6:	4604      	mov	r4, r0
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f98c 	bl	8000418 <__aeabi_i2d>
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <DHT11_GetData+0xe8>)
 8001106:	f7ff fb1b 	bl	8000740 <__aeabi_ddiv>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fce3 	bl	8000adc <__aeabi_d2f>
 8001116:	4603      	mov	r3, r0
 8001118:	4619      	mov	r1, r3
 800111a:	4620      	mov	r0, r4
 800111c:	f7ff fd34 	bl	8000b88 <__addsf3>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	611a      	str	r2, [r3, #16]
            dht->Temp = temp_integral + (float)(temp_decimal/10.0);
 8001128:	7b3b      	ldrb	r3, [r7, #12]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fde0 	bl	8000cf0 <__aeabi_i2f>
 8001130:	4604      	mov	r4, r0
 8001132:	7afb      	ldrb	r3, [r7, #11]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f96f 	bl	8000418 <__aeabi_i2d>
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <DHT11_GetData+0xe8>)
 8001140:	f7ff fafe 	bl	8000740 <__aeabi_ddiv>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	f7ff fcc6 	bl	8000adc <__aeabi_d2f>
 8001150:	4603      	mov	r3, r0
 8001152:	4619      	mov	r1, r3
 8001154:	4620      	mov	r0, r4
 8001156:	f7ff fd17 	bl	8000b88 <__addsf3>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	e001      	b.n	8001168 <DHT11_GetData+0xdc>
        }

        else
        {
            status = DHT11_ERR_CHECKSUM;
 8001164:	2302      	movs	r3, #2
 8001166:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	bd90      	pop	{r4, r7, pc}
 8001172:	bf00      	nop
 8001174:	40240000 	.word	0x40240000

08001178 <LCD_Write>:
static void LCD_WriteChar(LCD_I2C_Name* lcd, char character);

/* Private user code ---------------------------------------------------------*/

static void LCD_Write(LCD_I2C_Name* lcd, uint8_t data, uint8_t mode)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
 8001184:	4613      	mov	r3, r2
 8001186:	70bb      	strb	r3, [r7, #2]
    uint8_t Data_H, Data_L;
	uint8_t Data_I2C[4];

	Data_H = data & 0xF0;
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	f023 030f 	bic.w	r3, r3, #15
 800118e:	73fb      	strb	r3, [r7, #15]
	Data_L = (data << 4) & 0xF0;
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	73bb      	strb	r3, [r7, #14]

	if(lcd->BackLight)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7adb      	ldrb	r3, [r3, #11]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d007      	beq.n	80011ae <LCD_Write+0x36>
	{
        /* Set bit */
		Data_H |= LCD_BACKLIGHT; 
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	f043 0308 	orr.w	r3, r3, #8
 80011ac:	73bb      	strb	r3, [r7, #14]
	}

	if(mode == LCD_DATA)
 80011ae:	78bb      	ldrb	r3, [r7, #2]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d108      	bne.n	80011c6 <LCD_Write+0x4e>
	{
        /* Set bit */
		Data_H |= LCD_RS;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80011bc:	7bbb      	ldrb	r3, [r7, #14]
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	73bb      	strb	r3, [r7, #14]
 80011c4:	e00a      	b.n	80011dc <LCD_Write+0x64>
	}
	else if(mode == LCD_COMMAND)
 80011c6:	78bb      	ldrb	r3, [r7, #2]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d107      	bne.n	80011dc <LCD_Write+0x64>
	{
        /* Clear bit */
		Data_H &= ~LCD_RS;
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	f023 0301 	bic.w	r3, r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80011d4:	7bbb      	ldrb	r3, [r7, #14]
 80011d6:	f023 0301 	bic.w	r3, r3, #1
 80011da:	73bb      	strb	r3, [r7, #14]
	}

    /* Assign data to higher bits */
	Data_I2C[0] = Data_H|LCD_EN;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	723b      	strb	r3, [r7, #8]
	LCD_DelayMs(1);
 80011e6:	2001      	movs	r0, #1
 80011e8:	f001 fae4 	bl	80027b4 <HAL_Delay>
	Data_I2C[1] = Data_H;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	727b      	strb	r3, [r7, #9]

    /* Assign data to lower bits */
	Data_I2C[2] = Data_L|LCD_EN;
 80011f0:	7bbb      	ldrb	r3, [r7, #14]
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	72bb      	strb	r3, [r7, #10]
	LCD_DelayMs(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f001 fada 	bl	80027b4 <HAL_Delay>
	Data_I2C[3] = Data_L;
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd->I2c, lcd->Address, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);   
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6818      	ldr	r0, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	791b      	ldrb	r3, [r3, #4]
 800120c:	b299      	uxth	r1, r3
 800120e:	f107 0208 	add.w	r2, r7, #8
 8001212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2304      	movs	r3, #4
 800121a:	f001 ffa7 	bl	800316c <HAL_I2C_Master_Transmit>
}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <LCD_Init>:

void LCD_Init(LCD_I2C_Name* lcd, I2C_HandleTypeDef* i2c, uint8_t address, uint8_t columns, uint8_t rows)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	4611      	mov	r1, r2
 8001232:	461a      	mov	r2, r3
 8001234:	460b      	mov	r3, r1
 8001236:	71fb      	strb	r3, [r7, #7]
 8001238:	4613      	mov	r3, r2
 800123a:	71bb      	strb	r3, [r7, #6]
    lcd->I2c        = i2c;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	601a      	str	r2, [r3, #0]
    lcd->Address    = address;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	79fa      	ldrb	r2, [r7, #7]
 8001246:	711a      	strb	r2, [r3, #4]
    lcd->Columns    = columns;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	79ba      	ldrb	r2, [r7, #6]
 800124c:	715a      	strb	r2, [r3, #5]
    lcd->Rows       = rows;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	7e3a      	ldrb	r2, [r7, #24]
 8001252:	719a      	strb	r2, [r3, #6]

    lcd->FunctionSet    = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2228      	movs	r2, #40	; 0x28
 8001258:	729a      	strb	r2, [r3, #10]
    lcd->EntryMode      = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2206      	movs	r2, #6
 800125e:	71da      	strb	r2, [r3, #7]
    lcd->DisplayControl = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	220c      	movs	r2, #12
 8001264:	721a      	strb	r2, [r3, #8]
    lcd->CursorShift    = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2214      	movs	r2, #20
 800126a:	725a      	strb	r2, [r3, #9]
    lcd->BackLight      = LCD_BACKLIGHT;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2208      	movs	r2, #8
 8001270:	72da      	strb	r2, [r3, #11]

    LCD_DelayMs(50);
 8001272:	2032      	movs	r0, #50	; 0x32
 8001274:	f001 fa9e 	bl	80027b4 <HAL_Delay>
	LCD_Write(lcd, 0x33, LCD_COMMAND);
 8001278:	2200      	movs	r2, #0
 800127a:	2133      	movs	r1, #51	; 0x33
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f7ff ff7b 	bl	8001178 <LCD_Write>

	LCD_Write(lcd, 0x33, LCD_COMMAND);
 8001282:	2200      	movs	r2, #0
 8001284:	2133      	movs	r1, #51	; 0x33
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f7ff ff76 	bl	8001178 <LCD_Write>
	LCD_DelayMs(5);
 800128c:	2005      	movs	r0, #5
 800128e:	f001 fa91 	bl	80027b4 <HAL_Delay>
	LCD_Write(lcd, 0x32, LCD_COMMAND);
 8001292:	2200      	movs	r2, #0
 8001294:	2132      	movs	r1, #50	; 0x32
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f7ff ff6e 	bl	8001178 <LCD_Write>
	LCD_DelayMs(5);
 800129c:	2005      	movs	r0, #5
 800129e:	f001 fa89 	bl	80027b4 <HAL_Delay>
	LCD_Write(lcd, 0x20, LCD_COMMAND);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2120      	movs	r1, #32
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f7ff ff66 	bl	8001178 <LCD_Write>
	LCD_DelayMs(5);
 80012ac:	2005      	movs	r0, #5
 80012ae:	f001 fa81 	bl	80027b4 <HAL_Delay>
	
	LCD_Write(lcd, lcd->EntryMode, LCD_COMMAND);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	79db      	ldrb	r3, [r3, #7]
 80012b6:	2200      	movs	r2, #0
 80012b8:	4619      	mov	r1, r3
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f7ff ff5c 	bl	8001178 <LCD_Write>
	LCD_Write(lcd, lcd->DisplayControl, LCD_COMMAND);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	7a1b      	ldrb	r3, [r3, #8]
 80012c4:	2200      	movs	r2, #0
 80012c6:	4619      	mov	r1, r3
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f7ff ff55 	bl	8001178 <LCD_Write>
	LCD_Write(lcd, lcd->CursorShift, LCD_COMMAND);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	7a5b      	ldrb	r3, [r3, #9]
 80012d2:	2200      	movs	r2, #0
 80012d4:	4619      	mov	r1, r3
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff ff4e 	bl	8001178 <LCD_Write>
	LCD_Write(lcd, lcd->FunctionSet, LCD_COMMAND);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	7a9b      	ldrb	r3, [r3, #10]
 80012e0:	2200      	movs	r2, #0
 80012e2:	4619      	mov	r1, r3
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f7ff ff47 	bl	8001178 <LCD_Write>
	
	LCD_Write(lcd, LCD_CLEARDISPLAY, LCD_COMMAND);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2101      	movs	r1, #1
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f7ff ff42 	bl	8001178 <LCD_Write>
	LCD_Write(lcd, LCD_RETURNHOME, LCD_COMMAND);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2102      	movs	r1, #2
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f7ff ff3d 	bl	8001178 <LCD_Write>
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <LCD_WriteChar>:

static void LCD_WriteChar(LCD_I2C_Name* lcd, char character)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	460b      	mov	r3, r1
 8001310:	70fb      	strb	r3, [r7, #3]
	LCD_Write(lcd, character, LCD_DATA);
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	2201      	movs	r2, #1
 8001316:	4619      	mov	r1, r3
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff2d 	bl	8001178 <LCD_Write>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <LCD_WriteString>:

void LCD_WriteString(LCD_I2C_Name* lcd, char *string)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
	while(*string)
 8001330:	e007      	b.n	8001342 <LCD_WriteString+0x1c>
	{
		LCD_WriteChar(lcd, *string++);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	603a      	str	r2, [r7, #0]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	4619      	mov	r1, r3
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ffe2 	bl	8001306 <LCD_WriteChar>
	while(*string)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f3      	bne.n	8001332 <LCD_WriteString+0xc>
	}
}
 800134a:	bf00      	nop
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <LCD_Clear>:

void LCD_Clear(LCD_I2C_Name* lcd)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	LCD_Write(lcd, LCD_CLEARDISPLAY, LCD_COMMAND);
 800135c:	2200      	movs	r2, #0
 800135e:	2101      	movs	r1, #1
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff09 	bl	8001178 <LCD_Write>
	LCD_DelayMs(5);
 8001366:	2005      	movs	r0, #5
 8001368:	f001 fa24 	bl	80027b4 <HAL_Delay>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <LCD_SetCursor>:

void LCD_SetCursor(LCD_I2C_Name* lcd, uint8_t x_pos, uint8_t y_pos)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	70fb      	strb	r3, [r7, #3]
 8001380:	4613      	mov	r3, r2
 8001382:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8001384:	2300      	movs	r3, #0
 8001386:	73fb      	strb	r3, [r7, #15]

	if(x_pos >= lcd->Columns)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	795b      	ldrb	r3, [r3, #5]
 800138c:	78fa      	ldrb	r2, [r7, #3]
 800138e:	429a      	cmp	r2, r3
 8001390:	d303      	bcc.n	800139a <LCD_SetCursor+0x26>
	{
		x_pos = lcd->Columns - 1;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	795b      	ldrb	r3, [r3, #5]
 8001396:	3b01      	subs	r3, #1
 8001398:	70fb      	strb	r3, [r7, #3]
	}

	if(y_pos >= lcd->Rows)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	799b      	ldrb	r3, [r3, #6]
 800139e:	78ba      	ldrb	r2, [r7, #2]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d303      	bcc.n	80013ac <LCD_SetCursor+0x38>
	{
		y_pos = lcd->Rows -1;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	799b      	ldrb	r3, [r3, #6]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	70bb      	strb	r3, [r7, #2]
	}

	switch (y_pos)
 80013ac:	78bb      	ldrb	r3, [r7, #2]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d819      	bhi.n	80013e6 <LCD_SetCursor+0x72>
 80013b2:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <LCD_SetCursor+0x44>)
 80013b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b8:	080013c9 	.word	0x080013c9
 80013bc:	080013cf 	.word	0x080013cf
 80013c0:	080013d7 	.word	0x080013d7
 80013c4:	080013df 	.word	0x080013df
	{
		case 0:
			DRAM_ADDRESS = 0x00 + x_pos;
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	73fb      	strb	r3, [r7, #15]
			break;
 80013cc:	e00b      	b.n	80013e6 <LCD_SetCursor+0x72>
		case 1:
			DRAM_ADDRESS = 0x40 + x_pos;
 80013ce:	78fb      	ldrb	r3, [r7, #3]
 80013d0:	3340      	adds	r3, #64	; 0x40
 80013d2:	73fb      	strb	r3, [r7, #15]
			break;
 80013d4:	e007      	b.n	80013e6 <LCD_SetCursor+0x72>
		case 2:
			DRAM_ADDRESS = 0x14 + x_pos;
 80013d6:	78fb      	ldrb	r3, [r7, #3]
 80013d8:	3314      	adds	r3, #20
 80013da:	73fb      	strb	r3, [r7, #15]
			break;
 80013dc:	e003      	b.n	80013e6 <LCD_SetCursor+0x72>
		case 3:
			DRAM_ADDRESS = 0x54 + x_pos;
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	3354      	adds	r3, #84	; 0x54
 80013e2:	73fb      	strb	r3, [r7, #15]
			break;
 80013e4:	bf00      	nop
	}

	LCD_Write(lcd, LCD_SETDDRAMADDR|DRAM_ADDRESS, LCD_COMMAND);
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2200      	movs	r2, #0
 80013f0:	4619      	mov	r1, r3
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff fec0 	bl	8001178 <LCD_Write>
}
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db0b      	blt.n	800142a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	f003 021f 	and.w	r2, r3, #31
 8001418:	4906      	ldr	r1, [pc, #24]	; (8001434 <__NVIC_EnableIRQ+0x34>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	2001      	movs	r0, #1
 8001422:	fa00 f202 	lsl.w	r2, r0, r2
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	e000e100 	.word	0xe000e100

08001438 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db12      	blt.n	8001470 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	490a      	ldr	r1, [pc, #40]	; (800147c <__NVIC_DisableIRQ+0x44>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	3320      	adds	r3, #32
 8001460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001464:	f3bf 8f4f 	dsb	sy
}
 8001468:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800146a:	f3bf 8f6f 	isb	sy
}
 800146e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000e100 	.word	0xe000e100

08001480 <__io_putchar>:
/* USER CODE BEGIN 0 */

pTaskFunction TaskArray[] = {vTask_ReadData, vTask_Display, vTask_SendToCom, vTask_ControlRgb, vTask_HandleInterrupt};

int __io_putchar(int ch)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001488:	1d39      	adds	r1, r7, #4
 800148a:	f04f 33ff 	mov.w	r3, #4294967295
 800148e:	2201      	movs	r2, #1
 8001490:	4803      	ldr	r0, [pc, #12]	; (80014a0 <__io_putchar+0x20>)
 8001492:	f003 fd89 	bl	8004fa8 <HAL_UART_Transmit>

	return ch;
 8001496:	687b      	ldr	r3, [r7, #4]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2000033c 	.word	0x2000033c

080014a4 <vTask_HandleInterrupt>:

void vTask_HandleInterrupt()
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(USART1_IRQn);
 80014aa:	2025      	movs	r0, #37	; 0x25
 80014ac:	f7ff ffc4 	bl	8001438 <__NVIC_DisableIRQ>

	printf("vTask_HandleInterrupt IN: %ld\r\n", uwTick);
 80014b0:	4b80      	ldr	r3, [pc, #512]	; (80016b4 <vTask_HandleInterrupt+0x210>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	4880      	ldr	r0, [pc, #512]	; (80016b8 <vTask_HandleInterrupt+0x214>)
 80014b8:	f005 fa42 	bl	8006940 <iprintf>

	const uint8_t* numPart;
	uint8_t buffer[5];
	printf("\n");
 80014bc:	200a      	movs	r0, #10
 80014be:	f005 fa57 	bl	8006970 <putchar>
	switch (strlen((const char*)rxData))
 80014c2:	487e      	ldr	r0, [pc, #504]	; (80016bc <vTask_HandleInterrupt+0x218>)
 80014c4:	f7fe fe4e 	bl	8000164 <strlen>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b0c      	cmp	r3, #12
 80014cc:	d008      	beq.n	80014e0 <vTask_HandleInterrupt+0x3c>
 80014ce:	2b0c      	cmp	r3, #12
 80014d0:	f200 80da 	bhi.w	8001688 <vTask_HandleInterrupt+0x1e4>
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	f000 8091 	beq.w	80015fc <vTask_HandleInterrupt+0x158>
 80014da:	2b0b      	cmp	r3, #11
 80014dc:	d060      	beq.n	80015a0 <vTask_HandleInterrupt+0xfc>
 80014de:	e0d3      	b.n	8001688 <vTask_HandleInterrupt+0x1e4>
	{
		case RGB_COMMAND_LEN:
			if (rxData[0] == 'r' && rxData[1] == 'g' && rxData[2] == 'b')
 80014e0:	4b76      	ldr	r3, [pc, #472]	; (80016bc <vTask_HandleInterrupt+0x218>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b72      	cmp	r3, #114	; 0x72
 80014e6:	d157      	bne.n	8001598 <vTask_HandleInterrupt+0xf4>
 80014e8:	4b74      	ldr	r3, [pc, #464]	; (80016bc <vTask_HandleInterrupt+0x218>)
 80014ea:	785b      	ldrb	r3, [r3, #1]
 80014ec:	2b67      	cmp	r3, #103	; 0x67
 80014ee:	d153      	bne.n	8001598 <vTask_HandleInterrupt+0xf4>
 80014f0:	4b72      	ldr	r3, [pc, #456]	; (80016bc <vTask_HandleInterrupt+0x218>)
 80014f2:	789b      	ldrb	r3, [r3, #2]
 80014f4:	2b62      	cmp	r3, #98	; 0x62
 80014f6:	d14f      	bne.n	8001598 <vTask_HandleInterrupt+0xf4>
			{
				numPart = rxData + 3;
 80014f8:	4b71      	ldr	r3, [pc, #452]	; (80016c0 <vTask_HandleInterrupt+0x21c>)
 80014fa:	613b      	str	r3, [r7, #16]
				for (int i = 0; i < 3; i++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e038      	b.n	8001574 <vTask_HandleInterrupt+0xd0>
				{
					strncpy(buffer, (const char*)(numPart + i * 3), 3);
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4613      	mov	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	461a      	mov	r2, r3
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1899      	adds	r1, r3, r2
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2203      	movs	r2, #3
 8001514:	4618      	mov	r0, r3
 8001516:	f005 fad9 	bl	8006acc <strncpy>
					buffer[3] = '\0'; // Null-terminate the buffer
 800151a:	2300      	movs	r3, #0
 800151c:	71fb      	strb	r3, [r7, #7]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d01b      	beq.n	800155c <vTask_HandleInterrupt+0xb8>
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	2b02      	cmp	r3, #2
 8001528:	dc21      	bgt.n	800156e <vTask_HandleInterrupt+0xca>
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <vTask_HandleInterrupt+0x94>
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d009      	beq.n	800154a <vTask_HandleInterrupt+0xa6>
 8001536:	e01a      	b.n	800156e <vTask_HandleInterrupt+0xca>

					switch (i)
					{
						case 0: red = (uint8_t)atoi((const char*)buffer); break;
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	4618      	mov	r0, r3
 800153c:	f004 fb5c 	bl	8005bf8 <atoi>
 8001540:	4603      	mov	r3, r0
 8001542:	b2da      	uxtb	r2, r3
 8001544:	4b5f      	ldr	r3, [pc, #380]	; (80016c4 <vTask_HandleInterrupt+0x220>)
 8001546:	701a      	strb	r2, [r3, #0]
 8001548:	e011      	b.n	800156e <vTask_HandleInterrupt+0xca>
						case 1: green = (uint8_t)atoi((const char*)buffer); break;
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4618      	mov	r0, r3
 800154e:	f004 fb53 	bl	8005bf8 <atoi>
 8001552:	4603      	mov	r3, r0
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4b5c      	ldr	r3, [pc, #368]	; (80016c8 <vTask_HandleInterrupt+0x224>)
 8001558:	701a      	strb	r2, [r3, #0]
 800155a:	e008      	b.n	800156e <vTask_HandleInterrupt+0xca>
						case 2: blue = (uint8_t)atoi((const char*)buffer); break;
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4618      	mov	r0, r3
 8001560:	f004 fb4a 	bl	8005bf8 <atoi>
 8001564:	4603      	mov	r3, r0
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b58      	ldr	r3, [pc, #352]	; (80016cc <vTask_HandleInterrupt+0x228>)
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	bf00      	nop
				for (int i = 0; i < 3; i++)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	3301      	adds	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	2b02      	cmp	r3, #2
 8001578:	ddc3      	ble.n	8001502 <vTask_HandleInterrupt+0x5e>
					}
				}
				printf("Change RGB color:\r\n");
 800157a:	4855      	ldr	r0, [pc, #340]	; (80016d0 <vTask_HandleInterrupt+0x22c>)
 800157c:	f005 fa7a 	bl	8006a74 <puts>
				printf("RED = %d\r\nGREEN = %d\r\nBLUE = %d\r\n\n", red, green, blue);
 8001580:	4b50      	ldr	r3, [pc, #320]	; (80016c4 <vTask_HandleInterrupt+0x220>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	4b50      	ldr	r3, [pc, #320]	; (80016c8 <vTask_HandleInterrupt+0x224>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	4b4f      	ldr	r3, [pc, #316]	; (80016cc <vTask_HandleInterrupt+0x228>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4850      	ldr	r0, [pc, #320]	; (80016d4 <vTask_HandleInterrupt+0x230>)
 8001592:	f005 f9d5 	bl	8006940 <iprintf>
			}
			else
			{
				printf("Error Command Syntax\r\n\n");
			}
			break;
 8001596:	e07b      	b.n	8001690 <vTask_HandleInterrupt+0x1ec>
				printf("Error Command Syntax\r\n\n");
 8001598:	484f      	ldr	r0, [pc, #316]	; (80016d8 <vTask_HandleInterrupt+0x234>)
 800159a:	f005 fa6b 	bl	8006a74 <puts>
			break;
 800159e:	e077      	b.n	8001690 <vTask_HandleInterrupt+0x1ec>
		case DISPLAY_COMMAND_LEN:
			if (strcmp((const char*)rxData, "displaytemp") == 0)
 80015a0:	494e      	ldr	r1, [pc, #312]	; (80016dc <vTask_HandleInterrupt+0x238>)
 80015a2:	4846      	ldr	r0, [pc, #280]	; (80016bc <vTask_HandleInterrupt+0x218>)
 80015a4:	f7fe fdd4 	bl	8000150 <strcmp>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d106      	bne.n	80015bc <vTask_HandleInterrupt+0x118>
			{
				DisplayMode = DISPLAY_TEMP;
 80015ae:	4b4c      	ldr	r3, [pc, #304]	; (80016e0 <vTask_HandleInterrupt+0x23c>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]
				printf("Change Display Mode to DISPLAY_TEMP\r\n\n");
 80015b4:	484b      	ldr	r0, [pc, #300]	; (80016e4 <vTask_HandleInterrupt+0x240>)
 80015b6:	f005 fa5d 	bl	8006a74 <puts>
			}
			else
			{
				printf("Error Command Syntax\r\n\n");
			}
			break;
 80015ba:	e069      	b.n	8001690 <vTask_HandleInterrupt+0x1ec>
			else if (strcmp((const char*)rxData, "displayhumi") == 0)
 80015bc:	494a      	ldr	r1, [pc, #296]	; (80016e8 <vTask_HandleInterrupt+0x244>)
 80015be:	483f      	ldr	r0, [pc, #252]	; (80016bc <vTask_HandleInterrupt+0x218>)
 80015c0:	f7fe fdc6 	bl	8000150 <strcmp>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d106      	bne.n	80015d8 <vTask_HandleInterrupt+0x134>
				DisplayMode = DISPLAY_HUMI;
 80015ca:	4b45      	ldr	r3, [pc, #276]	; (80016e0 <vTask_HandleInterrupt+0x23c>)
 80015cc:	2202      	movs	r2, #2
 80015ce:	701a      	strb	r2, [r3, #0]
				printf("Change Display Mode to DISPLAY_HUMI\r\n\n");
 80015d0:	4846      	ldr	r0, [pc, #280]	; (80016ec <vTask_HandleInterrupt+0x248>)
 80015d2:	f005 fa4f 	bl	8006a74 <puts>
			break;
 80015d6:	e05b      	b.n	8001690 <vTask_HandleInterrupt+0x1ec>
			else if (strcmp((const char*)rxData, "displayboth") == 0)
 80015d8:	4945      	ldr	r1, [pc, #276]	; (80016f0 <vTask_HandleInterrupt+0x24c>)
 80015da:	4838      	ldr	r0, [pc, #224]	; (80016bc <vTask_HandleInterrupt+0x218>)
 80015dc:	f7fe fdb8 	bl	8000150 <strcmp>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d106      	bne.n	80015f4 <vTask_HandleInterrupt+0x150>
				DisplayMode = DISPLAY_TEMP_HUMI;
 80015e6:	4b3e      	ldr	r3, [pc, #248]	; (80016e0 <vTask_HandleInterrupt+0x23c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
				printf("Change Display Mode to DISPLAY_TEMP_HUMI\r\n\n");
 80015ec:	4841      	ldr	r0, [pc, #260]	; (80016f4 <vTask_HandleInterrupt+0x250>)
 80015ee:	f005 fa41 	bl	8006a74 <puts>
			break;
 80015f2:	e04d      	b.n	8001690 <vTask_HandleInterrupt+0x1ec>
				printf("Error Command Syntax\r\n\n");
 80015f4:	4838      	ldr	r0, [pc, #224]	; (80016d8 <vTask_HandleInterrupt+0x234>)
 80015f6:	f005 fa3d 	bl	8006a74 <puts>
			break;
 80015fa:	e049      	b.n	8001690 <vTask_HandleInterrupt+0x1ec>
		case TIME_COMMAND_LEN:
			if(rxData[0] == 't' && rxData[1] == 'i' && rxData[2] == 'm' && rxData[3] == 'e')
 80015fc:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <vTask_HandleInterrupt+0x218>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b74      	cmp	r3, #116	; 0x74
 8001602:	d13c      	bne.n	800167e <vTask_HandleInterrupt+0x1da>
 8001604:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <vTask_HandleInterrupt+0x218>)
 8001606:	785b      	ldrb	r3, [r3, #1]
 8001608:	2b69      	cmp	r3, #105	; 0x69
 800160a:	d138      	bne.n	800167e <vTask_HandleInterrupt+0x1da>
 800160c:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <vTask_HandleInterrupt+0x218>)
 800160e:	789b      	ldrb	r3, [r3, #2]
 8001610:	2b6d      	cmp	r3, #109	; 0x6d
 8001612:	d134      	bne.n	800167e <vTask_HandleInterrupt+0x1da>
 8001614:	4b29      	ldr	r3, [pc, #164]	; (80016bc <vTask_HandleInterrupt+0x218>)
 8001616:	78db      	ldrb	r3, [r3, #3]
 8001618:	2b65      	cmp	r3, #101	; 0x65
 800161a:	d130      	bne.n	800167e <vTask_HandleInterrupt+0x1da>
			{
				numPart = rxData + 4;
 800161c:	4b36      	ldr	r3, [pc, #216]	; (80016f8 <vTask_HandleInterrupt+0x254>)
 800161e:	613b      	str	r3, [r7, #16]
				strncpy(buffer, (const char*)numPart, 4);
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2204      	movs	r2, #4
 8001624:	6939      	ldr	r1, [r7, #16]
 8001626:	4618      	mov	r0, r3
 8001628:	f005 fa50 	bl	8006acc <strncpy>
				buffer[4] = '\0'; // Null-terminate the buffer
 800162c:	2300      	movs	r3, #0
 800162e:	723b      	strb	r3, [r7, #8]
				uint32_t old_P = P;
 8001630:	4b32      	ldr	r3, [pc, #200]	; (80016fc <vTask_HandleInterrupt+0x258>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60fb      	str	r3, [r7, #12]
				P = (uint32_t)atoi((const char*)buffer);
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	4618      	mov	r0, r3
 800163a:	f004 fadd 	bl	8005bf8 <atoi>
 800163e:	4603      	mov	r3, r0
 8001640:	461a      	mov	r2, r3
 8001642:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <vTask_HandleInterrupt+0x258>)
 8001644:	601a      	str	r2, [r3, #0]
				if (P >= 1500 && P < 10000)
 8001646:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <vTask_HandleInterrupt+0x258>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f240 52db 	movw	r2, #1499	; 0x5db
 800164e:	4293      	cmp	r3, r2
 8001650:	d90d      	bls.n	800166e <vTask_HandleInterrupt+0x1ca>
 8001652:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <vTask_HandleInterrupt+0x258>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f242 720f 	movw	r2, #9999	; 0x270f
 800165a:	4293      	cmp	r3, r2
 800165c:	d807      	bhi.n	800166e <vTask_HandleInterrupt+0x1ca>
				{
					printf("Change DHT11 Period from %d to %d\r\n\n", old_P, P);
 800165e:	4b27      	ldr	r3, [pc, #156]	; (80016fc <vTask_HandleInterrupt+0x258>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	68f9      	ldr	r1, [r7, #12]
 8001666:	4826      	ldr	r0, [pc, #152]	; (8001700 <vTask_HandleInterrupt+0x25c>)
 8001668:	f005 f96a 	bl	8006940 <iprintf>
			{
 800166c:	e00b      	b.n	8001686 <vTask_HandleInterrupt+0x1e2>
				}
				else
				{
					printf("The new Period is invalid! DHT11 Period stays the same: %d\r\n\n", old_P);
 800166e:	68f9      	ldr	r1, [r7, #12]
 8001670:	4824      	ldr	r0, [pc, #144]	; (8001704 <vTask_HandleInterrupt+0x260>)
 8001672:	f005 f965 	bl	8006940 <iprintf>
					P = old_P;
 8001676:	4a21      	ldr	r2, [pc, #132]	; (80016fc <vTask_HandleInterrupt+0x258>)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6013      	str	r3, [r2, #0]
			{
 800167c:	e003      	b.n	8001686 <vTask_HandleInterrupt+0x1e2>
				}
			}
			else
			{
				printf("Error Command Syntax\r\n\n");
 800167e:	4816      	ldr	r0, [pc, #88]	; (80016d8 <vTask_HandleInterrupt+0x234>)
 8001680:	f005 f9f8 	bl	8006a74 <puts>
			}
			break;
 8001684:	e004      	b.n	8001690 <vTask_HandleInterrupt+0x1ec>
 8001686:	e003      	b.n	8001690 <vTask_HandleInterrupt+0x1ec>
		default:
			printf("Error Command Syntax\r\n\n");
 8001688:	4813      	ldr	r0, [pc, #76]	; (80016d8 <vTask_HandleInterrupt+0x234>)
 800168a:	f005 f9f3 	bl	8006a74 <puts>
			break;
 800168e:	bf00      	nop
	}

	t0 = uwTick;
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <vTask_HandleInterrupt+0x210>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <vTask_HandleInterrupt+0x264>)
 8001696:	6013      	str	r3, [r2, #0]
	printf("vTask_HandleInterrupt OUT: %ld\r\n\n", uwTick);
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <vTask_HandleInterrupt+0x210>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	481b      	ldr	r0, [pc, #108]	; (800170c <vTask_HandleInterrupt+0x268>)
 80016a0:	f005 f94e 	bl	8006940 <iprintf>

	NVIC_EnableIRQ(USART1_IRQn);
 80016a4:	2025      	movs	r0, #37	; 0x25
 80016a6:	f7ff feab 	bl	8001400 <__NVIC_EnableIRQ>

}
 80016aa:	bf00      	nop
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200003dc 	.word	0x200003dc
 80016b8:	0800a6f0 	.word	0x0800a6f0
 80016bc:	200003c8 	.word	0x200003c8
 80016c0:	200003cb 	.word	0x200003cb
 80016c4:	200003bc 	.word	0x200003bc
 80016c8:	200003bd 	.word	0x200003bd
 80016cc:	200003be 	.word	0x200003be
 80016d0:	0800a710 	.word	0x0800a710
 80016d4:	0800a724 	.word	0x0800a724
 80016d8:	0800a748 	.word	0x0800a748
 80016dc:	0800a760 	.word	0x0800a760
 80016e0:	200003d6 	.word	0x200003d6
 80016e4:	0800a76c 	.word	0x0800a76c
 80016e8:	0800a794 	.word	0x0800a794
 80016ec:	0800a7a0 	.word	0x0800a7a0
 80016f0:	0800a7c8 	.word	0x0800a7c8
 80016f4:	0800a7d4 	.word	0x0800a7d4
 80016f8:	200003cc 	.word	0x200003cc
 80016fc:	200003c0 	.word	0x200003c0
 8001700:	0800a800 	.word	0x0800a800
 8001704:	0800a828 	.word	0x0800a828
 8001708:	200003c4 	.word	0x200003c4
 800170c:	0800a868 	.word	0x0800a868

08001710 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <HAL_UART_RxCpltCallback+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d119      	bne.n	8001758 <HAL_UART_RxCpltCallback+0x48>
	{
		if (rxData[rxDataIndex] == '@')
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_UART_RxCpltCallback+0x68>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <HAL_UART_RxCpltCallback+0x6c>)
 800172c:	5c9b      	ldrb	r3, [r3, r2]
 800172e:	2b40      	cmp	r3, #64	; 0x40
 8001730:	d10c      	bne.n	800174c <HAL_UART_RxCpltCallback+0x3c>
		{
			rxData[rxDataIndex] = '\0';
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_UART_RxCpltCallback+0x68>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	4b10      	ldr	r3, [pc, #64]	; (800177c <HAL_UART_RxCpltCallback+0x6c>)
 800173a:	2100      	movs	r1, #0
 800173c:	5499      	strb	r1, [r3, r2]
			isInterrupt = 1;
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_UART_RxCpltCallback+0x70>)
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
			rxDataIndex = 0;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <HAL_UART_RxCpltCallback+0x68>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
 800174a:	e005      	b.n	8001758 <HAL_UART_RxCpltCallback+0x48>
		}
		else
		{
			rxDataIndex ++;
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_UART_RxCpltCallback+0x68>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	3301      	adds	r3, #1
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_UART_RxCpltCallback+0x68>)
 8001756:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxData[rxDataIndex], 1);
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <HAL_UART_RxCpltCallback+0x68>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <HAL_UART_RxCpltCallback+0x6c>)
 8001760:	4413      	add	r3, r2
 8001762:	2201      	movs	r2, #1
 8001764:	4619      	mov	r1, r3
 8001766:	4803      	ldr	r0, [pc, #12]	; (8001774 <HAL_UART_RxCpltCallback+0x64>)
 8001768:	f003 fca1 	bl	80050ae <HAL_UART_Receive_IT>
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000033c 	.word	0x2000033c
 8001778:	200003d5 	.word	0x200003d5
 800177c:	200003c8 	.word	0x200003c8
 8001780:	200003d7 	.word	0x200003d7

08001784 <vTask_ReadData>:

void vTask_ReadData()
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	printf("vTask_ReadData IN: %ld\r\n", uwTick);
 8001788:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <vTask_ReadData+0x60>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	4816      	ldr	r0, [pc, #88]	; (80017e8 <vTask_ReadData+0x64>)
 8001790:	f005 f8d6 	bl	8006940 <iprintf>

	NVIC_DisableIRQ(USART1_IRQn);
 8001794:	2025      	movs	r0, #37	; 0x25
 8001796:	f7ff fe4f 	bl	8001438 <__NVIC_DisableIRQ>
	dhtStatus = DHT11_GetData(&dht);
 800179a:	4814      	ldr	r0, [pc, #80]	; (80017ec <vTask_ReadData+0x68>)
 800179c:	f7ff fc76 	bl	800108c <DHT11_GetData>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <vTask_ReadData+0x6c>)
 80017a6:	701a      	strb	r2, [r3, #0]
	NVIC_EnableIRQ(USART1_IRQn);
 80017a8:	2025      	movs	r0, #37	; 0x25
 80017aa:	f7ff fe29 	bl	8001400 <__NVIC_EnableIRQ>

	switch(dhtStatus)
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <vTask_ReadData+0x6c>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d005      	beq.n	80017c2 <vTask_ReadData+0x3e>
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d107      	bne.n	80017ca <vTask_ReadData+0x46>
	{
		case DHT11_ERR_CHECKSUM:
			printf("DHT11 ERROR CHECKSUM\r\n");
 80017ba:	480e      	ldr	r0, [pc, #56]	; (80017f4 <vTask_ReadData+0x70>)
 80017bc:	f005 f95a 	bl	8006a74 <puts>
			break;
 80017c0:	e007      	b.n	80017d2 <vTask_ReadData+0x4e>
		case DHT11_ERR_RESPONSE:
			printf("DHT11 ERROR RESPONSE\r\n");
 80017c2:	480d      	ldr	r0, [pc, #52]	; (80017f8 <vTask_ReadData+0x74>)
 80017c4:	f005 f956 	bl	8006a74 <puts>
			break;
 80017c8:	e003      	b.n	80017d2 <vTask_ReadData+0x4e>
		default:
			printf("Get Data from DHT11 successfully\r\n");
 80017ca:	480c      	ldr	r0, [pc, #48]	; (80017fc <vTask_ReadData+0x78>)
 80017cc:	f005 f952 	bl	8006a74 <puts>
			break;
 80017d0:	bf00      	nop
	}

	printf("vTask_ReadData OUT: %ld\r\n\n", uwTick);
 80017d2:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <vTask_ReadData+0x60>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4619      	mov	r1, r3
 80017d8:	4809      	ldr	r0, [pc, #36]	; (8001800 <vTask_ReadData+0x7c>)
 80017da:	f005 f8b1 	bl	8006940 <iprintf>
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200003dc 	.word	0x200003dc
 80017e8:	0800a88c 	.word	0x0800a88c
 80017ec:	20000398 	.word	0x20000398
 80017f0:	200003ac 	.word	0x200003ac
 80017f4:	0800a8a8 	.word	0x0800a8a8
 80017f8:	0800a8c0 	.word	0x0800a8c0
 80017fc:	0800a8d8 	.word	0x0800a8d8
 8001800:	0800a8fc 	.word	0x0800a8fc

08001804 <vTask_Display>:

void vTask_Display()
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
	char temp[18], humi[15];

	printf("vTask_Display IN: %ld\r\n", uwTick);
 800180a:	4b31      	ldr	r3, [pc, #196]	; (80018d0 <vTask_Display+0xcc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4619      	mov	r1, r3
 8001810:	4830      	ldr	r0, [pc, #192]	; (80018d4 <vTask_Display+0xd0>)
 8001812:	f005 f895 	bl	8006940 <iprintf>

  	if (dhtStatus == DHT11_OK)
 8001816:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <vTask_Display+0xd4>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d14d      	bne.n	80018ba <vTask_Display+0xb6>
  	{
  	  	sprintf(temp, "Temp: %.2f", dht.Temp);
 800181e:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <vTask_Display+0xd8>)
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fe0a 	bl	800043c <__aeabi_f2d>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	f107 0014 	add.w	r0, r7, #20
 8001830:	492b      	ldr	r1, [pc, #172]	; (80018e0 <vTask_Display+0xdc>)
 8001832:	f005 f92b 	bl	8006a8c <siprintf>
  	  	sprintf(humi, "Humi: %.2f", dht.Humi);
 8001836:	4b29      	ldr	r3, [pc, #164]	; (80018dc <vTask_Display+0xd8>)
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fdfe 	bl	800043c <__aeabi_f2d>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	1d38      	adds	r0, r7, #4
 8001846:	4927      	ldr	r1, [pc, #156]	; (80018e4 <vTask_Display+0xe0>)
 8001848:	f005 f920 	bl	8006a8c <siprintf>

  	  	LCD_Clear(&lcd);
 800184c:	4826      	ldr	r0, [pc, #152]	; (80018e8 <vTask_Display+0xe4>)
 800184e:	f7ff fd81 	bl	8001354 <LCD_Clear>

  	  	switch (DisplayMode)
 8001852:	4b26      	ldr	r3, [pc, #152]	; (80018ec <vTask_Display+0xe8>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d002      	beq.n	8001860 <vTask_Display+0x5c>
 800185a:	2b02      	cmp	r3, #2
 800185c:	d00c      	beq.n	8001878 <vTask_Display+0x74>
 800185e:	e016      	b.n	800188e <vTask_Display+0x8a>
  	  	{
  	  		case DISPLAY_TEMP:
  	  			LCD_SetCursor(&lcd, 0, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2100      	movs	r1, #0
 8001864:	4820      	ldr	r0, [pc, #128]	; (80018e8 <vTask_Display+0xe4>)
 8001866:	f7ff fd85 	bl	8001374 <LCD_SetCursor>
  	  			LCD_WriteString(&lcd, temp);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4619      	mov	r1, r3
 8001870:	481d      	ldr	r0, [pc, #116]	; (80018e8 <vTask_Display+0xe4>)
 8001872:	f7ff fd58 	bl	8001326 <LCD_WriteString>
  	  			break;
 8001876:	e021      	b.n	80018bc <vTask_Display+0xb8>
  	  		case DISPLAY_HUMI:
  	  			LCD_SetCursor(&lcd, 0, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	481a      	ldr	r0, [pc, #104]	; (80018e8 <vTask_Display+0xe4>)
 800187e:	f7ff fd79 	bl	8001374 <LCD_SetCursor>
  	  			LCD_WriteString(&lcd, humi);
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	4619      	mov	r1, r3
 8001886:	4818      	ldr	r0, [pc, #96]	; (80018e8 <vTask_Display+0xe4>)
 8001888:	f7ff fd4d 	bl	8001326 <LCD_WriteString>
  	  			break;
 800188c:	e016      	b.n	80018bc <vTask_Display+0xb8>
  	  		default:
  	  			LCD_SetCursor(&lcd, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	4815      	ldr	r0, [pc, #84]	; (80018e8 <vTask_Display+0xe4>)
 8001894:	f7ff fd6e 	bl	8001374 <LCD_SetCursor>
  	  			LCD_WriteString(&lcd, temp);
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4619      	mov	r1, r3
 800189e:	4812      	ldr	r0, [pc, #72]	; (80018e8 <vTask_Display+0xe4>)
 80018a0:	f7ff fd41 	bl	8001326 <LCD_WriteString>
  	  			LCD_SetCursor(&lcd, 0, 1);
 80018a4:	2201      	movs	r2, #1
 80018a6:	2100      	movs	r1, #0
 80018a8:	480f      	ldr	r0, [pc, #60]	; (80018e8 <vTask_Display+0xe4>)
 80018aa:	f7ff fd63 	bl	8001374 <LCD_SetCursor>
  	  			LCD_WriteString(&lcd, humi);
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	4619      	mov	r1, r3
 80018b2:	480d      	ldr	r0, [pc, #52]	; (80018e8 <vTask_Display+0xe4>)
 80018b4:	f7ff fd37 	bl	8001326 <LCD_WriteString>
  	  			break;
 80018b8:	e000      	b.n	80018bc <vTask_Display+0xb8>
  	  	}
  	}
 80018ba:	bf00      	nop

  	printf("vTask_Display OUT: %ld\r\n\n", uwTick);
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <vTask_Display+0xcc>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	480b      	ldr	r0, [pc, #44]	; (80018f0 <vTask_Display+0xec>)
 80018c4:	f005 f83c 	bl	8006940 <iprintf>
}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	; 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200003dc 	.word	0x200003dc
 80018d4:	0800a918 	.word	0x0800a918
 80018d8:	200003ac 	.word	0x200003ac
 80018dc:	20000398 	.word	0x20000398
 80018e0:	0800a930 	.word	0x0800a930
 80018e4:	0800a93c 	.word	0x0800a93c
 80018e8:	200003b0 	.word	0x200003b0
 80018ec:	200003d6 	.word	0x200003d6
 80018f0:	0800a948 	.word	0x0800a948

080018f4 <vTask_ControlRgb>:

void vTask_ControlRgb()
{
 80018f4:	b598      	push	{r3, r4, r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	printf("vTask_ControlRgb IN: %ld\r\n", uwTick);
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <vTask_ControlRgb+0x4c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	4811      	ldr	r0, [pc, #68]	; (8001944 <vTask_ControlRgb+0x50>)
 8001900:	f005 f81e 	bl	8006940 <iprintf>

	RGB_SetValue(&rgb, red++, green++, blue++);
 8001904:	4b10      	ldr	r3, [pc, #64]	; (8001948 <vTask_ControlRgb+0x54>)
 8001906:	7819      	ldrb	r1, [r3, #0]
 8001908:	1c4b      	adds	r3, r1, #1
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <vTask_ControlRgb+0x54>)
 800190e:	701a      	strb	r2, [r3, #0]
 8001910:	4b0e      	ldr	r3, [pc, #56]	; (800194c <vTask_ControlRgb+0x58>)
 8001912:	781a      	ldrb	r2, [r3, #0]
 8001914:	1c53      	adds	r3, r2, #1
 8001916:	b2d8      	uxtb	r0, r3
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <vTask_ControlRgb+0x58>)
 800191a:	7018      	strb	r0, [r3, #0]
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <vTask_ControlRgb+0x5c>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	1c58      	adds	r0, r3, #1
 8001922:	b2c4      	uxtb	r4, r0
 8001924:	480a      	ldr	r0, [pc, #40]	; (8001950 <vTask_ControlRgb+0x5c>)
 8001926:	7004      	strb	r4, [r0, #0]
 8001928:	480a      	ldr	r0, [pc, #40]	; (8001954 <vTask_ControlRgb+0x60>)
 800192a:	f000 fc58 	bl	80021de <RGB_SetValue>

	printf("vTask_ControlRgb OUT: %ld\r\n\n", uwTick);
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <vTask_ControlRgb+0x4c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4619      	mov	r1, r3
 8001934:	4808      	ldr	r0, [pc, #32]	; (8001958 <vTask_ControlRgb+0x64>)
 8001936:	f005 f803 	bl	8006940 <iprintf>
}
 800193a:	bf00      	nop
 800193c:	bd98      	pop	{r3, r4, r7, pc}
 800193e:	bf00      	nop
 8001940:	200003dc 	.word	0x200003dc
 8001944:	0800a964 	.word	0x0800a964
 8001948:	200003bc 	.word	0x200003bc
 800194c:	200003bd 	.word	0x200003bd
 8001950:	200003be 	.word	0x200003be
 8001954:	20000384 	.word	0x20000384
 8001958:	0800a980 	.word	0x0800a980

0800195c <vTask_SendToCom>:

void vTask_SendToCom()
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	printf("vTask_SendToCom IN: %ld\r\n", uwTick);
 8001960:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <vTask_SendToCom+0x98>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	4824      	ldr	r0, [pc, #144]	; (80019f8 <vTask_SendToCom+0x9c>)
 8001968:	f004 ffea 	bl	8006940 <iprintf>

	if (dhtStatus == DHT11_OK)
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <vTask_SendToCom+0xa0>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d135      	bne.n	80019e0 <vTask_SendToCom+0x84>
	{
		switch (DisplayMode)
 8001974:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <vTask_SendToCom+0xa4>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d006      	beq.n	800198a <vTask_SendToCom+0x2e>
 800197c:	2b02      	cmp	r3, #2
 800197e:	dc30      	bgt.n	80019e2 <vTask_SendToCom+0x86>
 8001980:	2b00      	cmp	r3, #0
 8001982:	d018      	beq.n	80019b6 <vTask_SendToCom+0x5a>
 8001984:	2b01      	cmp	r3, #1
 8001986:	d00b      	beq.n	80019a0 <vTask_SendToCom+0x44>
 8001988:	e02b      	b.n	80019e2 <vTask_SendToCom+0x86>
		{
			case DISPLAY_HUMI:
				printf("Humidity: %.2f\r\n", dht.Humi);
 800198a:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <vTask_SendToCom+0xa8>)
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fd54 	bl	800043c <__aeabi_f2d>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	481b      	ldr	r0, [pc, #108]	; (8001a08 <vTask_SendToCom+0xac>)
 800199a:	f004 ffd1 	bl	8006940 <iprintf>
				break;
 800199e:	e020      	b.n	80019e2 <vTask_SendToCom+0x86>
			case DISPLAY_TEMP:
				printf("Temperature: %.2f\r\n", dht.Temp);
 80019a0:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <vTask_SendToCom+0xa8>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fd49 	bl	800043c <__aeabi_f2d>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4817      	ldr	r0, [pc, #92]	; (8001a0c <vTask_SendToCom+0xb0>)
 80019b0:	f004 ffc6 	bl	8006940 <iprintf>
				break;
 80019b4:	e015      	b.n	80019e2 <vTask_SendToCom+0x86>
			case DISPLAY_TEMP_HUMI:
				printf("Temperature: %.2f\r\n", dht.Temp);
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <vTask_SendToCom+0xa8>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fd3e 	bl	800043c <__aeabi_f2d>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4811      	ldr	r0, [pc, #68]	; (8001a0c <vTask_SendToCom+0xb0>)
 80019c6:	f004 ffbb 	bl	8006940 <iprintf>
				printf("Humidity: %.2f\r\n", dht.Humi);
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <vTask_SendToCom+0xa8>)
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fd34 	bl	800043c <__aeabi_f2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	480b      	ldr	r0, [pc, #44]	; (8001a08 <vTask_SendToCom+0xac>)
 80019da:	f004 ffb1 	bl	8006940 <iprintf>
				break;
 80019de:	e000      	b.n	80019e2 <vTask_SendToCom+0x86>
		}
	}
 80019e0:	bf00      	nop

	printf("vTask_SendToCom OUT: %ld\r\n\n", uwTick);
 80019e2:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <vTask_SendToCom+0x98>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4619      	mov	r1, r3
 80019e8:	4809      	ldr	r0, [pc, #36]	; (8001a10 <vTask_SendToCom+0xb4>)
 80019ea:	f004 ffa9 	bl	8006940 <iprintf>
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200003dc 	.word	0x200003dc
 80019f8:	0800a9a0 	.word	0x0800a9a0
 80019fc:	200003ac 	.word	0x200003ac
 8001a00:	200003d6 	.word	0x200003d6
 8001a04:	20000398 	.word	0x20000398
 8001a08:	0800a9bc 	.word	0x0800a9bc
 8001a0c:	0800a9d0 	.word	0x0800a9d0
 8001a10:	0800a9e4 	.word	0x0800a9e4

08001a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a1a:	f000 fe69 	bl	80026f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a1e:	f000 f8ab 	bl	8001b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a22:	f000 fa71 	bl	8001f08 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001a26:	f000 f96b 	bl	8001d00 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001a2a:	f000 f9f5 	bl	8001e18 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001a2e:	f000 fa41 	bl	8001eb4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001a32:	f000 f8e7 	bl	8001c04 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001a36:	f000 f913 	bl	8001c60 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  P = 2000;
 8001a3a:	4b3e      	ldr	r3, [pc, #248]	; (8001b34 <main+0x120>)
 8001a3c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a40:	601a      	str	r2, [r3, #0]
  t0 = uwTick;
 8001a42:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <main+0x124>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a3d      	ldr	r2, [pc, #244]	; (8001b3c <main+0x128>)
 8001a48:	6013      	str	r3, [r2, #0]
  uint8_t idx;

  printf("Start\r\n\n");
 8001a4a:	483d      	ldr	r0, [pc, #244]	; (8001b40 <main+0x12c>)
 8001a4c:	f005 f812 	bl	8006a74 <puts>

  DHT11_Init(&dht, DHT_GPIO_Port, DHT_Pin, &htim4);
 8001a50:	4b3c      	ldr	r3, [pc, #240]	; (8001b44 <main+0x130>)
 8001a52:	2202      	movs	r2, #2
 8001a54:	493c      	ldr	r1, [pc, #240]	; (8001b48 <main+0x134>)
 8001a56:	483d      	ldr	r0, [pc, #244]	; (8001b4c <main+0x138>)
 8001a58:	f7ff faf8 	bl	800104c <DHT11_Init>
  RGB_Init(&rgb, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3);
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2304      	movs	r3, #4
 8001a62:	2200      	movs	r2, #0
 8001a64:	493a      	ldr	r1, [pc, #232]	; (8001b50 <main+0x13c>)
 8001a66:	483b      	ldr	r0, [pc, #236]	; (8001b54 <main+0x140>)
 8001a68:	f000 fb84 	bl	8002174 <RGB_Init>
  LCD_Init(&lcd, &hi2c2, LDC_DEFAULT_ADDRESS, 20, 4);
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2314      	movs	r3, #20
 8001a72:	224e      	movs	r2, #78	; 0x4e
 8001a74:	4938      	ldr	r1, [pc, #224]	; (8001b58 <main+0x144>)
 8001a76:	4839      	ldr	r0, [pc, #228]	; (8001b5c <main+0x148>)
 8001a78:	f7ff fbd5 	bl	8001226 <LCD_Init>

  LCD_SetCursor(&lcd, 0, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4836      	ldr	r0, [pc, #216]	; (8001b5c <main+0x148>)
 8001a82:	f7ff fc77 	bl	8001374 <LCD_SetCursor>
  LCD_WriteString(&lcd, "Hello");
 8001a86:	4936      	ldr	r1, [pc, #216]	; (8001b60 <main+0x14c>)
 8001a88:	4834      	ldr	r0, [pc, #208]	; (8001b5c <main+0x148>)
 8001a8a:	f7ff fc4c 	bl	8001326 <LCD_WriteString>

  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxData[rxDataIndex],  1);
 8001a8e:	4b35      	ldr	r3, [pc, #212]	; (8001b64 <main+0x150>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <main+0x154>)
 8001a96:	4413      	add	r3, r2
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4833      	ldr	r0, [pc, #204]	; (8001b6c <main+0x158>)
 8001a9e:	f003 fb06 	bl	80050ae <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (isInterrupt)
 8001aa2:	4b33      	ldr	r3, [pc, #204]	; (8001b70 <main+0x15c>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <main+0xa6>
	  {
		  TaskArray[TASK_HANDLE_INTERRUPT]();
 8001aac:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <main+0x160>)
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	4798      	blx	r3
		  isInterrupt = 0;
 8001ab2:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <main+0x15c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	e7f3      	b.n	8001aa2 <main+0x8e>
	  }
	  else
	  {
		  if ((uwTick - t0) % P == 0)
 8001aba:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <main+0x124>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <main+0x128>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	4a1b      	ldr	r2, [pc, #108]	; (8001b34 <main+0x120>)
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001acc:	fb01 f202 	mul.w	r2, r1, r2
 8001ad0:	1a9b      	subs	r3, r3, r2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10e      	bne.n	8001af4 <main+0xe0>
		  {
			  for (idx = 0; idx < 4; idx++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	71fb      	strb	r3, [r7, #7]
 8001ada:	e007      	b.n	8001aec <main+0xd8>
			  {
				  TaskArray[idx]();
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	4a25      	ldr	r2, [pc, #148]	; (8001b74 <main+0x160>)
 8001ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae4:	4798      	blx	r3
			  for (idx = 0; idx < 4; idx++)
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	71fb      	strb	r3, [r7, #7]
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d9f4      	bls.n	8001adc <main+0xc8>
 8001af2:	e7d6      	b.n	8001aa2 <main+0x8e>
			  }
		  }
		  else if ( ((uwTick - t0) % rgbPeriod == 0) && ((uwTick - t0) % P != 0))
 8001af4:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <main+0x124>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <main+0x128>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b02:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b06:	fb01 f202 	mul.w	r2, r1, r2
 8001b0a:	1a9b      	subs	r3, r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1c8      	bne.n	8001aa2 <main+0x8e>
 8001b10:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <main+0x124>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <main+0x128>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <main+0x120>)
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b22:	fb01 f202 	mul.w	r2, r1, r2
 8001b26:	1a9b      	subs	r3, r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0ba      	beq.n	8001aa2 <main+0x8e>
		  {
			  TaskArray[TASK_CONTROL_RGB]();
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <main+0x160>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4798      	blx	r3
	  if (isInterrupt)
 8001b32:	e7b6      	b.n	8001aa2 <main+0x8e>
 8001b34:	200003c0 	.word	0x200003c0
 8001b38:	200003dc 	.word	0x200003dc
 8001b3c:	200003c4 	.word	0x200003c4
 8001b40:	0800aa00 	.word	0x0800aa00
 8001b44:	200002f4 	.word	0x200002f4
 8001b48:	40010c00 	.word	0x40010c00
 8001b4c:	20000398 	.word	0x20000398
 8001b50:	200002ac 	.word	0x200002ac
 8001b54:	20000384 	.word	0x20000384
 8001b58:	20000210 	.word	0x20000210
 8001b5c:	200003b0 	.word	0x200003b0
 8001b60:	0800aa08 	.word	0x0800aa08
 8001b64:	200003d5 	.word	0x200003d5
 8001b68:	200003c8 	.word	0x200003c8
 8001b6c:	2000033c 	.word	0x2000033c
 8001b70:	200003d7 	.word	0x200003d7
 8001b74:	20000000 	.word	0x20000000

08001b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b090      	sub	sp, #64	; 0x40
 8001b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7e:	f107 0318 	add.w	r3, r7, #24
 8001b82:	2228      	movs	r2, #40	; 0x28
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 f864 	bl	8005c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ba2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bac:	2302      	movs	r3, #2
 8001bae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001bb6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bbc:	f107 0318 	add.w	r3, r7, #24
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f001 fe2b 	bl	800381c <HAL_RCC_OscConfig>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001bcc:	f000 fa08 	bl	8001fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bd0:	230f      	movs	r3, #15
 8001bd2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001be0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	2102      	movs	r1, #2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 f898 	bl	8003d20 <HAL_RCC_ClockConfig>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001bf6:	f000 f9f3 	bl	8001fe0 <Error_Handler>
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3740      	adds	r7, #64	; 0x40
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <MX_I2C2_Init+0x50>)
 8001c0a:	4a13      	ldr	r2, [pc, #76]	; (8001c58 <MX_I2C2_Init+0x54>)
 8001c0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_I2C2_Init+0x50>)
 8001c10:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <MX_I2C2_Init+0x58>)
 8001c12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_I2C2_Init+0x50>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_I2C2_Init+0x50>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_I2C2_Init+0x50>)
 8001c22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c26:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <MX_I2C2_Init+0x50>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_I2C2_Init+0x50>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <MX_I2C2_Init+0x50>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_I2C2_Init+0x50>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <MX_I2C2_Init+0x50>)
 8001c42:	f001 f94f 	bl	8002ee4 <HAL_I2C_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c4c:	f000 f9c8 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000210 	.word	0x20000210
 8001c58:	40005800 	.word	0x40005800
 8001c5c:	000186a0 	.word	0x000186a0

08001c60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c66:	f107 0308 	add.w	r3, r7, #8
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c74:	463b      	mov	r3, r7
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c7c:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <MX_TIM1_Init+0x98>)
 8001c7e:	4a1f      	ldr	r2, [pc, #124]	; (8001cfc <MX_TIM1_Init+0x9c>)
 8001c80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <MX_TIM1_Init+0x98>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <MX_TIM1_Init+0x98>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <MX_TIM1_Init+0x98>)
 8001c90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c96:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <MX_TIM1_Init+0x98>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c9c:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <MX_TIM1_Init+0x98>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <MX_TIM1_Init+0x98>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ca8:	4813      	ldr	r0, [pc, #76]	; (8001cf8 <MX_TIM1_Init+0x98>)
 8001caa:	f002 f9c7 	bl	800403c <HAL_TIM_Base_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001cb4:	f000 f994 	bl	8001fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cbe:	f107 0308 	add.w	r3, r7, #8
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480c      	ldr	r0, [pc, #48]	; (8001cf8 <MX_TIM1_Init+0x98>)
 8001cc6:	f002 fd17 	bl	80046f8 <HAL_TIM_ConfigClockSource>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001cd0:	f000 f986 	bl	8001fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cdc:	463b      	mov	r3, r7
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_TIM1_Init+0x98>)
 8001ce2:	f003 f8a1 	bl	8004e28 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001cec:	f000 f978 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000264 	.word	0x20000264
 8001cfc:	40012c00 	.word	0x40012c00

08001d00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08e      	sub	sp, #56	; 0x38
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d14:	f107 0320 	add.w	r3, r7, #32
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
 8001d2c:	615a      	str	r2, [r3, #20]
 8001d2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d30:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <MX_TIM2_Init+0x114>)
 8001d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 554-1;
 8001d38:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <MX_TIM2_Init+0x114>)
 8001d3a:	f240 2229 	movw	r2, #553	; 0x229
 8001d3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d40:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <MX_TIM2_Init+0x114>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255-1;
 8001d46:	4b33      	ldr	r3, [pc, #204]	; (8001e14 <MX_TIM2_Init+0x114>)
 8001d48:	22fe      	movs	r2, #254	; 0xfe
 8001d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4c:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <MX_TIM2_Init+0x114>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d52:	4b30      	ldr	r3, [pc, #192]	; (8001e14 <MX_TIM2_Init+0x114>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d58:	482e      	ldr	r0, [pc, #184]	; (8001e14 <MX_TIM2_Init+0x114>)
 8001d5a:	f002 f96f 	bl	800403c <HAL_TIM_Base_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001d64:	f000 f93c 	bl	8001fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d72:	4619      	mov	r1, r3
 8001d74:	4827      	ldr	r0, [pc, #156]	; (8001e14 <MX_TIM2_Init+0x114>)
 8001d76:	f002 fcbf 	bl	80046f8 <HAL_TIM_ConfigClockSource>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001d80:	f000 f92e 	bl	8001fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d84:	4823      	ldr	r0, [pc, #140]	; (8001e14 <MX_TIM2_Init+0x114>)
 8001d86:	f002 f9f3 	bl	8004170 <HAL_TIM_PWM_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001d90:	f000 f926 	bl	8001fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d94:	2300      	movs	r3, #0
 8001d96:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d9c:	f107 0320 	add.w	r3, r7, #32
 8001da0:	4619      	mov	r1, r3
 8001da2:	481c      	ldr	r0, [pc, #112]	; (8001e14 <MX_TIM2_Init+0x114>)
 8001da4:	f003 f840 	bl	8004e28 <HAL_TIMEx_MasterConfigSynchronization>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001dae:	f000 f917 	bl	8001fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db2:	2360      	movs	r3, #96	; 0x60
 8001db4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4812      	ldr	r0, [pc, #72]	; (8001e14 <MX_TIM2_Init+0x114>)
 8001dca:	f002 fbd3 	bl	8004574 <HAL_TIM_PWM_ConfigChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001dd4:	f000 f904 	bl	8001fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	2204      	movs	r2, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	480d      	ldr	r0, [pc, #52]	; (8001e14 <MX_TIM2_Init+0x114>)
 8001de0:	f002 fbc8 	bl	8004574 <HAL_TIM_PWM_ConfigChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001dea:	f000 f8f9 	bl	8001fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	2208      	movs	r2, #8
 8001df2:	4619      	mov	r1, r3
 8001df4:	4807      	ldr	r0, [pc, #28]	; (8001e14 <MX_TIM2_Init+0x114>)
 8001df6:	f002 fbbd 	bl	8004574 <HAL_TIM_PWM_ConfigChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001e00:	f000 f8ee 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e04:	4803      	ldr	r0, [pc, #12]	; (8001e14 <MX_TIM2_Init+0x114>)
 8001e06:	f000 fabd 	bl	8002384 <HAL_TIM_MspPostInit>

}
 8001e0a:	bf00      	nop
 8001e0c:	3738      	adds	r7, #56	; 0x38
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200002ac 	.word	0x200002ac

08001e18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e1e:	f107 0308 	add.w	r3, r7, #8
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2c:	463b      	mov	r3, r7
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e34:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <MX_TIM4_Init+0x94>)
 8001e36:	4a1e      	ldr	r2, [pc, #120]	; (8001eb0 <MX_TIM4_Init+0x98>)
 8001e38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <MX_TIM4_Init+0x94>)
 8001e3c:	2247      	movs	r2, #71	; 0x47
 8001e3e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <MX_TIM4_Init+0x94>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF-1;
 8001e46:	4b19      	ldr	r3, [pc, #100]	; (8001eac <MX_TIM4_Init+0x94>)
 8001e48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <MX_TIM4_Init+0x94>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e54:	4b15      	ldr	r3, [pc, #84]	; (8001eac <MX_TIM4_Init+0x94>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e5a:	4814      	ldr	r0, [pc, #80]	; (8001eac <MX_TIM4_Init+0x94>)
 8001e5c:	f002 f8ee 	bl	800403c <HAL_TIM_Base_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001e66:	f000 f8bb 	bl	8001fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e70:	f107 0308 	add.w	r3, r7, #8
 8001e74:	4619      	mov	r1, r3
 8001e76:	480d      	ldr	r0, [pc, #52]	; (8001eac <MX_TIM4_Init+0x94>)
 8001e78:	f002 fc3e 	bl	80046f8 <HAL_TIM_ConfigClockSource>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001e82:	f000 f8ad 	bl	8001fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e8e:	463b      	mov	r3, r7
 8001e90:	4619      	mov	r1, r3
 8001e92:	4806      	ldr	r0, [pc, #24]	; (8001eac <MX_TIM4_Init+0x94>)
 8001e94:	f002 ffc8 	bl	8004e28 <HAL_TIMEx_MasterConfigSynchronization>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001e9e:	f000 f89f 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200002f4 	.word	0x200002f4
 8001eb0:	40000800 	.word	0x40000800

08001eb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <MX_USART1_UART_Init+0x50>)
 8001ebc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ec4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001eda:	220c      	movs	r2, #12
 8001edc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001eec:	f003 f80c 	bl	8004f08 <HAL_UART_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ef6:	f000 f873 	bl	8001fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2000033c 	.word	0x2000033c
 8001f04:	40013800 	.word	0x40013800

08001f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0e:	f107 0310 	add.w	r3, r7, #16
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <MX_GPIO_Init+0xcc>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	4a2c      	ldr	r2, [pc, #176]	; (8001fd4 <MX_GPIO_Init+0xcc>)
 8001f22:	f043 0310 	orr.w	r3, r3, #16
 8001f26:	6193      	str	r3, [r2, #24]
 8001f28:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <MX_GPIO_Init+0xcc>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f34:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <MX_GPIO_Init+0xcc>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	4a26      	ldr	r2, [pc, #152]	; (8001fd4 <MX_GPIO_Init+0xcc>)
 8001f3a:	f043 0320 	orr.w	r3, r3, #32
 8001f3e:	6193      	str	r3, [r2, #24]
 8001f40:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <MX_GPIO_Init+0xcc>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f003 0320 	and.w	r3, r3, #32
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4c:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <MX_GPIO_Init+0xcc>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4a20      	ldr	r2, [pc, #128]	; (8001fd4 <MX_GPIO_Init+0xcc>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	6193      	str	r3, [r2, #24]
 8001f58:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <MX_GPIO_Init+0xcc>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f64:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <MX_GPIO_Init+0xcc>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	4a1a      	ldr	r2, [pc, #104]	; (8001fd4 <MX_GPIO_Init+0xcc>)
 8001f6a:	f043 0308 	orr.w	r3, r3, #8
 8001f6e:	6193      	str	r3, [r2, #24]
 8001f70:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <MX_GPIO_Init+0xcc>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	603b      	str	r3, [r7, #0]
 8001f7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f82:	4815      	ldr	r0, [pc, #84]	; (8001fd8 <MX_GPIO_Init+0xd0>)
 8001f84:	f000 ff95 	bl	8002eb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, GPIO_PIN_RESET);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	4813      	ldr	r0, [pc, #76]	; (8001fdc <MX_GPIO_Init+0xd4>)
 8001f8e:	f000 ff90 	bl	8002eb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001f92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001fa4:	f107 0310 	add.w	r3, r7, #16
 8001fa8:	4619      	mov	r1, r3
 8001faa:	480b      	ldr	r0, [pc, #44]	; (8001fd8 <MX_GPIO_Init+0xd0>)
 8001fac:	f000 fde6 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT_Pin */
  GPIO_InitStruct.Pin = DHT_Pin;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 8001fc0:	f107 0310 	add.w	r3, r7, #16
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4805      	ldr	r0, [pc, #20]	; (8001fdc <MX_GPIO_Init+0xd4>)
 8001fc8:	f000 fdd8 	bl	8002b7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fcc:	bf00      	nop
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40011000 	.word	0x40011000
 8001fdc:	40010c00 	.word	0x40010c00

08001fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe4:	b672      	cpsid	i
}
 8001fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe8:	e7fe      	b.n	8001fe8 <Error_Handler+0x8>
	...

08001fec <assign_value>:


/* Private user code ---------------------------------------------------------*/

static void assign_value(RGB_t *rgb)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	switch (rgb->red_channel)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b0c      	cmp	r3, #12
 8001ffa:	d839      	bhi.n	8002070 <assign_value+0x84>
 8001ffc:	a201      	add	r2, pc, #4	; (adr r2, 8002004 <assign_value+0x18>)
 8001ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002002:	bf00      	nop
 8002004:	08002039 	.word	0x08002039
 8002008:	08002071 	.word	0x08002071
 800200c:	08002071 	.word	0x08002071
 8002010:	08002071 	.word	0x08002071
 8002014:	08002047 	.word	0x08002047
 8002018:	08002071 	.word	0x08002071
 800201c:	08002071 	.word	0x08002071
 8002020:	08002071 	.word	0x08002071
 8002024:	08002055 	.word	0x08002055
 8002028:	08002071 	.word	0x08002071
 800202c:	08002071 	.word	0x08002071
 8002030:	08002071 	.word	0x08002071
 8002034:	08002063 	.word	0x08002063
	{
		case TIM_CHANNEL_1:
			rgb->Timer->Instance->CCR1 = rgb->Data.red_value;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	7c1a      	ldrb	r2, [r3, #16]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002044:	e014      	b.n	8002070 <assign_value+0x84>
		case TIM_CHANNEL_2:
			rgb->Timer->Instance->CCR2 = rgb->Data.red_value;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7c1a      	ldrb	r2, [r3, #16]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8002052:	e00d      	b.n	8002070 <assign_value+0x84>
		case TIM_CHANNEL_3:
			rgb->Timer->Instance->CCR3 = rgb->Data.red_value;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7c1a      	ldrb	r2, [r3, #16]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8002060:	e006      	b.n	8002070 <assign_value+0x84>
		case TIM_CHANNEL_4:
			rgb->Timer->Instance->CCR4 = rgb->Data.red_value;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	7c1a      	ldrb	r2, [r3, #16]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800206e:	bf00      	nop
	}

	switch (rgb->green_channel)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b0c      	cmp	r3, #12
 8002076:	d839      	bhi.n	80020ec <assign_value+0x100>
 8002078:	a201      	add	r2, pc, #4	; (adr r2, 8002080 <assign_value+0x94>)
 800207a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207e:	bf00      	nop
 8002080:	080020b5 	.word	0x080020b5
 8002084:	080020ed 	.word	0x080020ed
 8002088:	080020ed 	.word	0x080020ed
 800208c:	080020ed 	.word	0x080020ed
 8002090:	080020c3 	.word	0x080020c3
 8002094:	080020ed 	.word	0x080020ed
 8002098:	080020ed 	.word	0x080020ed
 800209c:	080020ed 	.word	0x080020ed
 80020a0:	080020d1 	.word	0x080020d1
 80020a4:	080020ed 	.word	0x080020ed
 80020a8:	080020ed 	.word	0x080020ed
 80020ac:	080020ed 	.word	0x080020ed
 80020b0:	080020df 	.word	0x080020df
	{
		case TIM_CHANNEL_1:
			rgb->Timer->Instance->CCR1 = rgb->Data.green_value;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	7c5a      	ldrb	r2, [r3, #17]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80020c0:	e014      	b.n	80020ec <assign_value+0x100>
		case TIM_CHANNEL_2:
			rgb->Timer->Instance->CCR2 = rgb->Data.green_value;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	7c5a      	ldrb	r2, [r3, #17]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80020ce:	e00d      	b.n	80020ec <assign_value+0x100>
		case TIM_CHANNEL_3:
			rgb->Timer->Instance->CCR3 = rgb->Data.green_value;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	7c5a      	ldrb	r2, [r3, #17]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80020dc:	e006      	b.n	80020ec <assign_value+0x100>
		case TIM_CHANNEL_4:
			rgb->Timer->Instance->CCR4 = rgb->Data.green_value;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7c5a      	ldrb	r2, [r3, #17]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80020ea:	bf00      	nop
	}

	switch (rgb->blue_channel)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b0c      	cmp	r3, #12
 80020f2:	d839      	bhi.n	8002168 <assign_value+0x17c>
 80020f4:	a201      	add	r2, pc, #4	; (adr r2, 80020fc <assign_value+0x110>)
 80020f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fa:	bf00      	nop
 80020fc:	08002131 	.word	0x08002131
 8002100:	08002169 	.word	0x08002169
 8002104:	08002169 	.word	0x08002169
 8002108:	08002169 	.word	0x08002169
 800210c:	0800213f 	.word	0x0800213f
 8002110:	08002169 	.word	0x08002169
 8002114:	08002169 	.word	0x08002169
 8002118:	08002169 	.word	0x08002169
 800211c:	0800214d 	.word	0x0800214d
 8002120:	08002169 	.word	0x08002169
 8002124:	08002169 	.word	0x08002169
 8002128:	08002169 	.word	0x08002169
 800212c:	0800215b 	.word	0x0800215b
	{
		case TIM_CHANNEL_1:
			rgb->Timer->Instance->CCR1 = rgb->Data.blue_value;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	7c9a      	ldrb	r2, [r3, #18]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800213c:	e014      	b.n	8002168 <assign_value+0x17c>
		case TIM_CHANNEL_2:
			rgb->Timer->Instance->CCR2 = rgb->Data.blue_value;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	7c9a      	ldrb	r2, [r3, #18]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800214a:	e00d      	b.n	8002168 <assign_value+0x17c>
		case TIM_CHANNEL_3:
			rgb->Timer->Instance->CCR3 = rgb->Data.blue_value;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7c9a      	ldrb	r2, [r3, #18]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8002158:	e006      	b.n	8002168 <assign_value+0x17c>
		case TIM_CHANNEL_4:
			rgb->Timer->Instance->CCR4 = rgb->Data.blue_value;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	7c9a      	ldrb	r2, [r3, #18]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8002166:	bf00      	nop
	}
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop

08002174 <RGB_Init>:

void RGB_Init(RGB_t* rgb, TIM_HandleTypeDef* htim, uint32_t red_channel, uint32_t green_channel, uint32_t blue_channel)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
    rgb->Timer = htim;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	601a      	str	r2, [r3, #0]
    rgb->red_channel  = red_channel;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	605a      	str	r2, [r3, #4]
    rgb->green_channel = green_channel;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	609a      	str	r2, [r3, #8]
    rgb->blue_channel = blue_channel;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	60da      	str	r2, [r3, #12]

    HAL_TIM_PWM_Start(rgb->Timer, red_channel);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f002 f83d 	bl	8004220 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(rgb->Timer, green_channel);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6839      	ldr	r1, [r7, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f002 f837 	bl	8004220 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(rgb->Timer, blue_channel);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	69b9      	ldr	r1, [r7, #24]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f002 f831 	bl	8004220 <HAL_TIM_PWM_Start>

 	rgb->Data.red_value = 0;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	741a      	strb	r2, [r3, #16]
 	rgb->Data.green_value = 0;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	745a      	strb	r2, [r3, #17]
 	rgb->Data.blue_value = 0;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	749a      	strb	r2, [r3, #18]

    assign_value(rgb);
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f7ff ff0b 	bl	8001fec <assign_value>
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <RGB_SetValue>:

void RGB_SetValue(RGB_t *rgb, uint8_t red, uint8_t green, uint8_t blue)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	4608      	mov	r0, r1
 80021e8:	4611      	mov	r1, r2
 80021ea:	461a      	mov	r2, r3
 80021ec:	4603      	mov	r3, r0
 80021ee:	70fb      	strb	r3, [r7, #3]
 80021f0:	460b      	mov	r3, r1
 80021f2:	70bb      	strb	r3, [r7, #2]
 80021f4:	4613      	mov	r3, r2
 80021f6:	707b      	strb	r3, [r7, #1]
 	rgb->Data.red_value = red;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	78fa      	ldrb	r2, [r7, #3]
 80021fc:	741a      	strb	r2, [r3, #16]
 	rgb->Data.green_value = green;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	78ba      	ldrb	r2, [r7, #2]
 8002202:	745a      	strb	r2, [r3, #17]
 	rgb->Data.blue_value = blue;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	787a      	ldrb	r2, [r7, #1]
 8002208:	749a      	strb	r2, [r3, #18]

	assign_value(rgb);   
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff feee 	bl	8001fec <assign_value>
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <HAL_MspInit+0x40>)
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	4a0d      	ldr	r2, [pc, #52]	; (8002258 <HAL_MspInit+0x40>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6193      	str	r3, [r2, #24]
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_MspInit+0x40>)
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_MspInit+0x40>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	4a07      	ldr	r2, [pc, #28]	; (8002258 <HAL_MspInit+0x40>)
 800223c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002240:	61d3      	str	r3, [r2, #28]
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_MspInit+0x40>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	40021000 	.word	0x40021000

0800225c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 0310 	add.w	r3, r7, #16
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a16      	ldr	r2, [pc, #88]	; (80022d0 <HAL_I2C_MspInit+0x74>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d124      	bne.n	80022c6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800227c:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <HAL_I2C_MspInit+0x78>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <HAL_I2C_MspInit+0x78>)
 8002282:	f043 0308 	orr.w	r3, r3, #8
 8002286:	6193      	str	r3, [r2, #24]
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_I2C_MspInit+0x78>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002294:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002298:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800229a:	2312      	movs	r3, #18
 800229c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800229e:	2303      	movs	r3, #3
 80022a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a2:	f107 0310 	add.w	r3, r7, #16
 80022a6:	4619      	mov	r1, r3
 80022a8:	480b      	ldr	r0, [pc, #44]	; (80022d8 <HAL_I2C_MspInit+0x7c>)
 80022aa:	f000 fc67 	bl	8002b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_I2C_MspInit+0x78>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <HAL_I2C_MspInit+0x78>)
 80022b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022b8:	61d3      	str	r3, [r2, #28]
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_I2C_MspInit+0x78>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80022c6:	bf00      	nop
 80022c8:	3720      	adds	r7, #32
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40005800 	.word	0x40005800
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40010c00 	.word	0x40010c00

080022dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a23      	ldr	r2, [pc, #140]	; (8002378 <HAL_TIM_Base_MspInit+0x9c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d11c      	bne.n	8002328 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ee:	4b23      	ldr	r3, [pc, #140]	; (800237c <HAL_TIM_Base_MspInit+0xa0>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	4a22      	ldr	r2, [pc, #136]	; (800237c <HAL_TIM_Base_MspInit+0xa0>)
 80022f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022f8:	6193      	str	r3, [r2, #24]
 80022fa:	4b20      	ldr	r3, [pc, #128]	; (800237c <HAL_TIM_Base_MspInit+0xa0>)
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	2018      	movs	r0, #24
 800230c:	f000 fb4d 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002310:	2018      	movs	r0, #24
 8002312:	f000 fb66 	bl	80029e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2100      	movs	r1, #0
 800231a:	2019      	movs	r0, #25
 800231c:	f000 fb45 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002320:	2019      	movs	r0, #25
 8002322:	f000 fb5e 	bl	80029e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002326:	e022      	b.n	800236e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002330:	d10c      	bne.n	800234c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002332:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_TIM_Base_MspInit+0xa0>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	4a11      	ldr	r2, [pc, #68]	; (800237c <HAL_TIM_Base_MspInit+0xa0>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	61d3      	str	r3, [r2, #28]
 800233e:	4b0f      	ldr	r3, [pc, #60]	; (800237c <HAL_TIM_Base_MspInit+0xa0>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]
}
 800234a:	e010      	b.n	800236e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <HAL_TIM_Base_MspInit+0xa4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d10b      	bne.n	800236e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_TIM_Base_MspInit+0xa0>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	4a08      	ldr	r2, [pc, #32]	; (800237c <HAL_TIM_Base_MspInit+0xa0>)
 800235c:	f043 0304 	orr.w	r3, r3, #4
 8002360:	61d3      	str	r3, [r2, #28]
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_TIM_Base_MspInit+0xa0>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
}
 800236e:	bf00      	nop
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40012c00 	.word	0x40012c00
 800237c:	40021000 	.word	0x40021000
 8002380:	40000800 	.word	0x40000800

08002384 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 0310 	add.w	r3, r7, #16
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a2:	d117      	bne.n	80023d4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a4:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <HAL_TIM_MspPostInit+0x58>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	4a0c      	ldr	r2, [pc, #48]	; (80023dc <HAL_TIM_MspPostInit+0x58>)
 80023aa:	f043 0304 	orr.w	r3, r3, #4
 80023ae:	6193      	str	r3, [r2, #24]
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <HAL_TIM_MspPostInit+0x58>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80023bc:	2307      	movs	r3, #7
 80023be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c0:	2302      	movs	r3, #2
 80023c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2302      	movs	r3, #2
 80023c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c8:	f107 0310 	add.w	r3, r7, #16
 80023cc:	4619      	mov	r1, r3
 80023ce:	4804      	ldr	r0, [pc, #16]	; (80023e0 <HAL_TIM_MspPostInit+0x5c>)
 80023d0:	f000 fbd4 	bl	8002b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023d4:	bf00      	nop
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40010800 	.word	0x40010800

080023e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ec:	f107 0310 	add.w	r3, r7, #16
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a20      	ldr	r2, [pc, #128]	; (8002480 <HAL_UART_MspInit+0x9c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d139      	bne.n	8002478 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002404:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <HAL_UART_MspInit+0xa0>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	4a1e      	ldr	r2, [pc, #120]	; (8002484 <HAL_UART_MspInit+0xa0>)
 800240a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800240e:	6193      	str	r3, [r2, #24]
 8002410:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <HAL_UART_MspInit+0xa0>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_UART_MspInit+0xa0>)
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	4a18      	ldr	r2, [pc, #96]	; (8002484 <HAL_UART_MspInit+0xa0>)
 8002422:	f043 0304 	orr.w	r3, r3, #4
 8002426:	6193      	str	r3, [r2, #24]
 8002428:	4b16      	ldr	r3, [pc, #88]	; (8002484 <HAL_UART_MspInit+0xa0>)
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002438:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800243e:	2303      	movs	r3, #3
 8002440:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002442:	f107 0310 	add.w	r3, r7, #16
 8002446:	4619      	mov	r1, r3
 8002448:	480f      	ldr	r0, [pc, #60]	; (8002488 <HAL_UART_MspInit+0xa4>)
 800244a:	f000 fb97 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800244e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002452:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	4619      	mov	r1, r3
 8002462:	4809      	ldr	r0, [pc, #36]	; (8002488 <HAL_UART_MspInit+0xa4>)
 8002464:	f000 fb8a 	bl	8002b7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002468:	2200      	movs	r2, #0
 800246a:	2100      	movs	r1, #0
 800246c:	2025      	movs	r0, #37	; 0x25
 800246e:	f000 fa9c 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002472:	2025      	movs	r0, #37	; 0x25
 8002474:	f000 fab5 	bl	80029e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002478:	bf00      	nop
 800247a:	3720      	adds	r7, #32
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40013800 	.word	0x40013800
 8002484:	40021000 	.word	0x40021000
 8002488:	40010800 	.word	0x40010800

0800248c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002490:	e7fe      	b.n	8002490 <NMI_Handler+0x4>

08002492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002496:	e7fe      	b.n	8002496 <HardFault_Handler+0x4>

08002498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800249c:	e7fe      	b.n	800249c <MemManage_Handler+0x4>

0800249e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <BusFault_Handler+0x4>

080024a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <UsageFault_Handler+0x4>

080024aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr

080024c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024c2:	b480      	push	{r7}
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d2:	f000 f953 	bl	800277c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024e0:	4802      	ldr	r0, [pc, #8]	; (80024ec <TIM1_BRK_IRQHandler+0x10>)
 80024e2:	f001 ff3f 	bl	8004364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000264 	.word	0x20000264

080024f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024f4:	4802      	ldr	r0, [pc, #8]	; (8002500 <TIM1_UP_IRQHandler+0x10>)
 80024f6:	f001 ff35 	bl	8004364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000264 	.word	0x20000264

08002504 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002508:	4802      	ldr	r0, [pc, #8]	; (8002514 <USART1_IRQHandler+0x10>)
 800250a:	f002 fdf5 	bl	80050f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	2000033c 	.word	0x2000033c

08002518 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return 1;
 800251c:	2301      	movs	r3, #1
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <_kill>:

int _kill(int pid, int sig)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002530:	f003 fb66 	bl	8005c00 <__errno>
 8002534:	4603      	mov	r3, r0
 8002536:	2216      	movs	r2, #22
 8002538:	601a      	str	r2, [r3, #0]
  return -1;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <_exit>:

void _exit (int status)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800254e:	f04f 31ff 	mov.w	r1, #4294967295
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff ffe7 	bl	8002526 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002558:	e7fe      	b.n	8002558 <_exit+0x12>

0800255a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b086      	sub	sp, #24
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	e00a      	b.n	8002582 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800256c:	f3af 8000 	nop.w
 8002570:	4601      	mov	r1, r0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	60ba      	str	r2, [r7, #8]
 8002578:	b2ca      	uxtb	r2, r1
 800257a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3301      	adds	r3, #1
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	429a      	cmp	r2, r3
 8002588:	dbf0      	blt.n	800256c <_read+0x12>
  }

  return len;
 800258a:	687b      	ldr	r3, [r7, #4]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	e009      	b.n	80025ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	60ba      	str	r2, [r7, #8]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe ff66 	bl	8001480 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	3301      	adds	r3, #1
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	429a      	cmp	r2, r3
 80025c0:	dbf1      	blt.n	80025a6 <_write+0x12>
  }
  return len;
 80025c2:	687b      	ldr	r3, [r7, #4]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <_close>:

int _close(int file)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025f2:	605a      	str	r2, [r3, #4]
  return 0;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <_isatty>:

int _isatty(int file)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002608:	2301      	movs	r3, #1
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002634:	4a14      	ldr	r2, [pc, #80]	; (8002688 <_sbrk+0x5c>)
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <_sbrk+0x60>)
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <_sbrk+0x64>)
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <_sbrk+0x68>)
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <_sbrk+0x64>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	429a      	cmp	r2, r3
 800265a:	d207      	bcs.n	800266c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800265c:	f003 fad0 	bl	8005c00 <__errno>
 8002660:	4603      	mov	r3, r0
 8002662:	220c      	movs	r2, #12
 8002664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
 800266a:	e009      	b.n	8002680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <_sbrk+0x64>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	4a05      	ldr	r2, [pc, #20]	; (8002690 <_sbrk+0x64>)
 800267c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20005000 	.word	0x20005000
 800268c:	00000400 	.word	0x00000400
 8002690:	200003d8 	.word	0x200003d8
 8002694:	200003f0 	.word	0x200003f0

08002698 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026a4:	f7ff fff8 	bl	8002698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a8:	480b      	ldr	r0, [pc, #44]	; (80026d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80026aa:	490c      	ldr	r1, [pc, #48]	; (80026dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80026ac:	4a0c      	ldr	r2, [pc, #48]	; (80026e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b0:	e002      	b.n	80026b8 <LoopCopyDataInit>

080026b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b6:	3304      	adds	r3, #4

080026b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026bc:	d3f9      	bcc.n	80026b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026be:	4a09      	ldr	r2, [pc, #36]	; (80026e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80026c0:	4c09      	ldr	r4, [pc, #36]	; (80026e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c4:	e001      	b.n	80026ca <LoopFillZerobss>

080026c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c8:	3204      	adds	r2, #4

080026ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026cc:	d3fb      	bcc.n	80026c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ce:	f003 fa9d 	bl	8005c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026d2:	f7ff f99f 	bl	8001a14 <main>
  bx lr
 80026d6:	4770      	bx	lr
  ldr r0, =_sdata
 80026d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026dc:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80026e0:	0800aef4 	.word	0x0800aef4
  ldr r2, =_sbss
 80026e4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80026e8:	200003f0 	.word	0x200003f0

080026ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026ec:	e7fe      	b.n	80026ec <ADC1_2_IRQHandler>
	...

080026f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <HAL_Init+0x28>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a07      	ldr	r2, [pc, #28]	; (8002718 <HAL_Init+0x28>)
 80026fa:	f043 0310 	orr.w	r3, r3, #16
 80026fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002700:	2003      	movs	r0, #3
 8002702:	f000 f947 	bl	8002994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002706:	200f      	movs	r0, #15
 8002708:	f000 f808 	bl	800271c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800270c:	f7ff fd84 	bl	8002218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40022000 	.word	0x40022000

0800271c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002724:	4b12      	ldr	r3, [pc, #72]	; (8002770 <HAL_InitTick+0x54>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_InitTick+0x58>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	4619      	mov	r1, r3
 800272e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002732:	fbb3 f3f1 	udiv	r3, r3, r1
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	4618      	mov	r0, r3
 800273c:	f000 f95f 	bl	80029fe <HAL_SYSTICK_Config>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e00e      	b.n	8002768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b0f      	cmp	r3, #15
 800274e:	d80a      	bhi.n	8002766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002750:	2200      	movs	r2, #0
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	f04f 30ff 	mov.w	r0, #4294967295
 8002758:	f000 f927 	bl	80029aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800275c:	4a06      	ldr	r2, [pc, #24]	; (8002778 <HAL_InitTick+0x5c>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e000      	b.n	8002768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000014 	.word	0x20000014
 8002774:	2000001c 	.word	0x2000001c
 8002778:	20000018 	.word	0x20000018

0800277c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_IncTick+0x1c>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_IncTick+0x20>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4413      	add	r3, r2
 800278c:	4a03      	ldr	r2, [pc, #12]	; (800279c <HAL_IncTick+0x20>)
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	2000001c 	.word	0x2000001c
 800279c:	200003dc 	.word	0x200003dc

080027a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return uwTick;
 80027a4:	4b02      	ldr	r3, [pc, #8]	; (80027b0 <HAL_GetTick+0x10>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	200003dc 	.word	0x200003dc

080027b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027bc:	f7ff fff0 	bl	80027a0 <HAL_GetTick>
 80027c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027cc:	d005      	beq.n	80027da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_Delay+0x44>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027da:	bf00      	nop
 80027dc:	f7ff ffe0 	bl	80027a0 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d8f7      	bhi.n	80027dc <HAL_Delay+0x28>
  {
  }
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	2000001c 	.word	0x2000001c

080027fc <__NVIC_SetPriorityGrouping>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002818:	4013      	ands	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800282c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282e:	4a04      	ldr	r2, [pc, #16]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	60d3      	str	r3, [r2, #12]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <__NVIC_GetPriorityGrouping>:
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <__NVIC_GetPriorityGrouping+0x18>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	f003 0307 	and.w	r3, r3, #7
}
 8002852:	4618      	mov	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_EnableIRQ>:
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	2b00      	cmp	r3, #0
 8002870:	db0b      	blt.n	800288a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	f003 021f 	and.w	r2, r3, #31
 8002878:	4906      	ldr	r1, [pc, #24]	; (8002894 <__NVIC_EnableIRQ+0x34>)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2001      	movs	r0, #1
 8002882:	fa00 f202 	lsl.w	r2, r0, r2
 8002886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	e000e100 	.word	0xe000e100

08002898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	db0a      	blt.n	80028c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	490c      	ldr	r1, [pc, #48]	; (80028e4 <__NVIC_SetPriority+0x4c>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	0112      	lsls	r2, r2, #4
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	440b      	add	r3, r1
 80028bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c0:	e00a      	b.n	80028d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4908      	ldr	r1, [pc, #32]	; (80028e8 <__NVIC_SetPriority+0x50>)
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	3b04      	subs	r3, #4
 80028d0:	0112      	lsls	r2, r2, #4
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	440b      	add	r3, r1
 80028d6:	761a      	strb	r2, [r3, #24]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	e000e100 	.word	0xe000e100
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	; 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f1c3 0307 	rsb	r3, r3, #7
 8002906:	2b04      	cmp	r3, #4
 8002908:	bf28      	it	cs
 800290a:	2304      	movcs	r3, #4
 800290c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3304      	adds	r3, #4
 8002912:	2b06      	cmp	r3, #6
 8002914:	d902      	bls.n	800291c <NVIC_EncodePriority+0x30>
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3b03      	subs	r3, #3
 800291a:	e000      	b.n	800291e <NVIC_EncodePriority+0x32>
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	f04f 32ff 	mov.w	r2, #4294967295
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43da      	mvns	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	401a      	ands	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002934:	f04f 31ff 	mov.w	r1, #4294967295
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	43d9      	mvns	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	4313      	orrs	r3, r2
         );
}
 8002946:	4618      	mov	r0, r3
 8002948:	3724      	adds	r7, #36	; 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002960:	d301      	bcc.n	8002966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002962:	2301      	movs	r3, #1
 8002964:	e00f      	b.n	8002986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002966:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <SysTick_Config+0x40>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3b01      	subs	r3, #1
 800296c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800296e:	210f      	movs	r1, #15
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	f7ff ff90 	bl	8002898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <SysTick_Config+0x40>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800297e:	4b04      	ldr	r3, [pc, #16]	; (8002990 <SysTick_Config+0x40>)
 8002980:	2207      	movs	r2, #7
 8002982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	e000e010 	.word	0xe000e010

08002994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff2d 	bl	80027fc <__NVIC_SetPriorityGrouping>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	4603      	mov	r3, r0
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029bc:	f7ff ff42 	bl	8002844 <__NVIC_GetPriorityGrouping>
 80029c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	6978      	ldr	r0, [r7, #20]
 80029c8:	f7ff ff90 	bl	80028ec <NVIC_EncodePriority>
 80029cc:	4602      	mov	r2, r0
 80029ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff5f 	bl	8002898 <__NVIC_SetPriority>
}
 80029da:	bf00      	nop
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff35 	bl	8002860 <__NVIC_EnableIRQ>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff ffa2 	bl	8002950 <SysTick_Config>
 8002a0c:	4603      	mov	r3, r0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b085      	sub	sp, #20
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d008      	beq.n	8002a40 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2204      	movs	r2, #4
 8002a32:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e020      	b.n	8002a82 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 020e 	bic.w	r2, r2, #14
 8002a4e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a68:	2101      	movs	r1, #1
 8002a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d005      	beq.n	8002ab0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
 8002aae:	e051      	b.n	8002b54 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 020e 	bic.w	r2, r2, #14
 8002abe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0201 	bic.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a22      	ldr	r2, [pc, #136]	; (8002b60 <HAL_DMA_Abort_IT+0xd4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d029      	beq.n	8002b2e <HAL_DMA_Abort_IT+0xa2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a21      	ldr	r2, [pc, #132]	; (8002b64 <HAL_DMA_Abort_IT+0xd8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d022      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x9e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1f      	ldr	r2, [pc, #124]	; (8002b68 <HAL_DMA_Abort_IT+0xdc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d01a      	beq.n	8002b24 <HAL_DMA_Abort_IT+0x98>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1e      	ldr	r2, [pc, #120]	; (8002b6c <HAL_DMA_Abort_IT+0xe0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d012      	beq.n	8002b1e <HAL_DMA_Abort_IT+0x92>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a1c      	ldr	r2, [pc, #112]	; (8002b70 <HAL_DMA_Abort_IT+0xe4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00a      	beq.n	8002b18 <HAL_DMA_Abort_IT+0x8c>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1b      	ldr	r2, [pc, #108]	; (8002b74 <HAL_DMA_Abort_IT+0xe8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d102      	bne.n	8002b12 <HAL_DMA_Abort_IT+0x86>
 8002b0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b10:	e00e      	b.n	8002b30 <HAL_DMA_Abort_IT+0xa4>
 8002b12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b16:	e00b      	b.n	8002b30 <HAL_DMA_Abort_IT+0xa4>
 8002b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b1c:	e008      	b.n	8002b30 <HAL_DMA_Abort_IT+0xa4>
 8002b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b22:	e005      	b.n	8002b30 <HAL_DMA_Abort_IT+0xa4>
 8002b24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b28:	e002      	b.n	8002b30 <HAL_DMA_Abort_IT+0xa4>
 8002b2a:	2310      	movs	r3, #16
 8002b2c:	e000      	b.n	8002b30 <HAL_DMA_Abort_IT+0xa4>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	4a11      	ldr	r2, [pc, #68]	; (8002b78 <HAL_DMA_Abort_IT+0xec>)
 8002b32:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	4798      	blx	r3
    } 
  }
  return status;
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40020008 	.word	0x40020008
 8002b64:	4002001c 	.word	0x4002001c
 8002b68:	40020030 	.word	0x40020030
 8002b6c:	40020044 	.word	0x40020044
 8002b70:	40020058 	.word	0x40020058
 8002b74:	4002006c 	.word	0x4002006c
 8002b78:	40020000 	.word	0x40020000

08002b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b08b      	sub	sp, #44	; 0x2c
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b86:	2300      	movs	r3, #0
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b8e:	e169      	b.n	8002e64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b90:	2201      	movs	r2, #1
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	f040 8158 	bne.w	8002e5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4a9a      	ldr	r2, [pc, #616]	; (8002e1c <HAL_GPIO_Init+0x2a0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d05e      	beq.n	8002c76 <HAL_GPIO_Init+0xfa>
 8002bb8:	4a98      	ldr	r2, [pc, #608]	; (8002e1c <HAL_GPIO_Init+0x2a0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d875      	bhi.n	8002caa <HAL_GPIO_Init+0x12e>
 8002bbe:	4a98      	ldr	r2, [pc, #608]	; (8002e20 <HAL_GPIO_Init+0x2a4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d058      	beq.n	8002c76 <HAL_GPIO_Init+0xfa>
 8002bc4:	4a96      	ldr	r2, [pc, #600]	; (8002e20 <HAL_GPIO_Init+0x2a4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d86f      	bhi.n	8002caa <HAL_GPIO_Init+0x12e>
 8002bca:	4a96      	ldr	r2, [pc, #600]	; (8002e24 <HAL_GPIO_Init+0x2a8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d052      	beq.n	8002c76 <HAL_GPIO_Init+0xfa>
 8002bd0:	4a94      	ldr	r2, [pc, #592]	; (8002e24 <HAL_GPIO_Init+0x2a8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d869      	bhi.n	8002caa <HAL_GPIO_Init+0x12e>
 8002bd6:	4a94      	ldr	r2, [pc, #592]	; (8002e28 <HAL_GPIO_Init+0x2ac>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d04c      	beq.n	8002c76 <HAL_GPIO_Init+0xfa>
 8002bdc:	4a92      	ldr	r2, [pc, #584]	; (8002e28 <HAL_GPIO_Init+0x2ac>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d863      	bhi.n	8002caa <HAL_GPIO_Init+0x12e>
 8002be2:	4a92      	ldr	r2, [pc, #584]	; (8002e2c <HAL_GPIO_Init+0x2b0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d046      	beq.n	8002c76 <HAL_GPIO_Init+0xfa>
 8002be8:	4a90      	ldr	r2, [pc, #576]	; (8002e2c <HAL_GPIO_Init+0x2b0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d85d      	bhi.n	8002caa <HAL_GPIO_Init+0x12e>
 8002bee:	2b12      	cmp	r3, #18
 8002bf0:	d82a      	bhi.n	8002c48 <HAL_GPIO_Init+0xcc>
 8002bf2:	2b12      	cmp	r3, #18
 8002bf4:	d859      	bhi.n	8002caa <HAL_GPIO_Init+0x12e>
 8002bf6:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <HAL_GPIO_Init+0x80>)
 8002bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfc:	08002c77 	.word	0x08002c77
 8002c00:	08002c51 	.word	0x08002c51
 8002c04:	08002c63 	.word	0x08002c63
 8002c08:	08002ca5 	.word	0x08002ca5
 8002c0c:	08002cab 	.word	0x08002cab
 8002c10:	08002cab 	.word	0x08002cab
 8002c14:	08002cab 	.word	0x08002cab
 8002c18:	08002cab 	.word	0x08002cab
 8002c1c:	08002cab 	.word	0x08002cab
 8002c20:	08002cab 	.word	0x08002cab
 8002c24:	08002cab 	.word	0x08002cab
 8002c28:	08002cab 	.word	0x08002cab
 8002c2c:	08002cab 	.word	0x08002cab
 8002c30:	08002cab 	.word	0x08002cab
 8002c34:	08002cab 	.word	0x08002cab
 8002c38:	08002cab 	.word	0x08002cab
 8002c3c:	08002cab 	.word	0x08002cab
 8002c40:	08002c59 	.word	0x08002c59
 8002c44:	08002c6d 	.word	0x08002c6d
 8002c48:	4a79      	ldr	r2, [pc, #484]	; (8002e30 <HAL_GPIO_Init+0x2b4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c4e:	e02c      	b.n	8002caa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	623b      	str	r3, [r7, #32]
          break;
 8002c56:	e029      	b.n	8002cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	623b      	str	r3, [r7, #32]
          break;
 8002c60:	e024      	b.n	8002cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	3308      	adds	r3, #8
 8002c68:	623b      	str	r3, [r7, #32]
          break;
 8002c6a:	e01f      	b.n	8002cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	330c      	adds	r3, #12
 8002c72:	623b      	str	r3, [r7, #32]
          break;
 8002c74:	e01a      	b.n	8002cac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d102      	bne.n	8002c84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c7e:	2304      	movs	r3, #4
 8002c80:	623b      	str	r3, [r7, #32]
          break;
 8002c82:	e013      	b.n	8002cac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d105      	bne.n	8002c98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c8c:	2308      	movs	r3, #8
 8002c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	611a      	str	r2, [r3, #16]
          break;
 8002c96:	e009      	b.n	8002cac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c98:	2308      	movs	r3, #8
 8002c9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69fa      	ldr	r2, [r7, #28]
 8002ca0:	615a      	str	r2, [r3, #20]
          break;
 8002ca2:	e003      	b.n	8002cac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	623b      	str	r3, [r7, #32]
          break;
 8002ca8:	e000      	b.n	8002cac <HAL_GPIO_Init+0x130>
          break;
 8002caa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2bff      	cmp	r3, #255	; 0xff
 8002cb0:	d801      	bhi.n	8002cb6 <HAL_GPIO_Init+0x13a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	e001      	b.n	8002cba <HAL_GPIO_Init+0x13e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	2bff      	cmp	r3, #255	; 0xff
 8002cc0:	d802      	bhi.n	8002cc8 <HAL_GPIO_Init+0x14c>
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	e002      	b.n	8002cce <HAL_GPIO_Init+0x152>
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	3b08      	subs	r3, #8
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	210f      	movs	r1, #15
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	401a      	ands	r2, r3
 8002ce0:	6a39      	ldr	r1, [r7, #32]
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 80b1 	beq.w	8002e5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cfc:	4b4d      	ldr	r3, [pc, #308]	; (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	4a4c      	ldr	r2, [pc, #304]	; (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6193      	str	r3, [r2, #24]
 8002d08:	4b4a      	ldr	r3, [pc, #296]	; (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d14:	4a48      	ldr	r2, [pc, #288]	; (8002e38 <HAL_GPIO_Init+0x2bc>)
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	220f      	movs	r2, #15
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	4013      	ands	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a40      	ldr	r2, [pc, #256]	; (8002e3c <HAL_GPIO_Init+0x2c0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d013      	beq.n	8002d68 <HAL_GPIO_Init+0x1ec>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a3f      	ldr	r2, [pc, #252]	; (8002e40 <HAL_GPIO_Init+0x2c4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00d      	beq.n	8002d64 <HAL_GPIO_Init+0x1e8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a3e      	ldr	r2, [pc, #248]	; (8002e44 <HAL_GPIO_Init+0x2c8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d007      	beq.n	8002d60 <HAL_GPIO_Init+0x1e4>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a3d      	ldr	r2, [pc, #244]	; (8002e48 <HAL_GPIO_Init+0x2cc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d101      	bne.n	8002d5c <HAL_GPIO_Init+0x1e0>
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e006      	b.n	8002d6a <HAL_GPIO_Init+0x1ee>
 8002d5c:	2304      	movs	r3, #4
 8002d5e:	e004      	b.n	8002d6a <HAL_GPIO_Init+0x1ee>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e002      	b.n	8002d6a <HAL_GPIO_Init+0x1ee>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <HAL_GPIO_Init+0x1ee>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6c:	f002 0203 	and.w	r2, r2, #3
 8002d70:	0092      	lsls	r2, r2, #2
 8002d72:	4093      	lsls	r3, r2
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d7a:	492f      	ldr	r1, [pc, #188]	; (8002e38 <HAL_GPIO_Init+0x2bc>)
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	089b      	lsrs	r3, r3, #2
 8002d80:	3302      	adds	r3, #2
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d006      	beq.n	8002da2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d94:	4b2d      	ldr	r3, [pc, #180]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	492c      	ldr	r1, [pc, #176]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	608b      	str	r3, [r1, #8]
 8002da0:	e006      	b.n	8002db0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002da2:	4b2a      	ldr	r3, [pc, #168]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	4928      	ldr	r1, [pc, #160]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d006      	beq.n	8002dca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002dbc:	4b23      	ldr	r3, [pc, #140]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	4922      	ldr	r1, [pc, #136]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60cb      	str	r3, [r1, #12]
 8002dc8:	e006      	b.n	8002dd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002dca:	4b20      	ldr	r3, [pc, #128]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	491e      	ldr	r1, [pc, #120]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d006      	beq.n	8002df2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	4918      	ldr	r1, [pc, #96]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]
 8002df0:	e006      	b.n	8002e00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002df2:	4b16      	ldr	r3, [pc, #88]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	4914      	ldr	r1, [pc, #80]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d021      	beq.n	8002e50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	490e      	ldr	r1, [pc, #56]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	600b      	str	r3, [r1, #0]
 8002e18:	e021      	b.n	8002e5e <HAL_GPIO_Init+0x2e2>
 8002e1a:	bf00      	nop
 8002e1c:	10320000 	.word	0x10320000
 8002e20:	10310000 	.word	0x10310000
 8002e24:	10220000 	.word	0x10220000
 8002e28:	10210000 	.word	0x10210000
 8002e2c:	10120000 	.word	0x10120000
 8002e30:	10110000 	.word	0x10110000
 8002e34:	40021000 	.word	0x40021000
 8002e38:	40010000 	.word	0x40010000
 8002e3c:	40010800 	.word	0x40010800
 8002e40:	40010c00 	.word	0x40010c00
 8002e44:	40011000 	.word	0x40011000
 8002e48:	40011400 	.word	0x40011400
 8002e4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_GPIO_Init+0x304>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	4909      	ldr	r1, [pc, #36]	; (8002e80 <HAL_GPIO_Init+0x304>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	3301      	adds	r3, #1
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f47f ae8e 	bne.w	8002b90 <HAL_GPIO_Init+0x14>
  }
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop
 8002e78:	372c      	adds	r7, #44	; 0x2c
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	40010400 	.word	0x40010400

08002e84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	887b      	ldrh	r3, [r7, #2]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
 8002ea0:	e001      	b.n	8002ea6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	807b      	strh	r3, [r7, #2]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ec2:	787b      	ldrb	r3, [r7, #1]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ec8:	887a      	ldrh	r2, [r7, #2]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ece:	e003      	b.n	8002ed8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ed0:	887b      	ldrh	r3, [r7, #2]
 8002ed2:	041a      	lsls	r2, r3, #16
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	611a      	str	r2, [r3, #16]
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr
	...

08002ee4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e12b      	b.n	800314e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff f9a6 	bl	800225c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2224      	movs	r2, #36	; 0x24
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0201 	bic.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f48:	f001 f832 	bl	8003fb0 <HAL_RCC_GetPCLK1Freq>
 8002f4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4a81      	ldr	r2, [pc, #516]	; (8003158 <HAL_I2C_Init+0x274>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d807      	bhi.n	8002f68 <HAL_I2C_Init+0x84>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4a80      	ldr	r2, [pc, #512]	; (800315c <HAL_I2C_Init+0x278>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	bf94      	ite	ls
 8002f60:	2301      	movls	r3, #1
 8002f62:	2300      	movhi	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	e006      	b.n	8002f76 <HAL_I2C_Init+0x92>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4a7d      	ldr	r2, [pc, #500]	; (8003160 <HAL_I2C_Init+0x27c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	bf94      	ite	ls
 8002f70:	2301      	movls	r3, #1
 8002f72:	2300      	movhi	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e0e7      	b.n	800314e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4a78      	ldr	r2, [pc, #480]	; (8003164 <HAL_I2C_Init+0x280>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	0c9b      	lsrs	r3, r3, #18
 8002f88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4a6a      	ldr	r2, [pc, #424]	; (8003158 <HAL_I2C_Init+0x274>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d802      	bhi.n	8002fb8 <HAL_I2C_Init+0xd4>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	e009      	b.n	8002fcc <HAL_I2C_Init+0xe8>
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fbe:	fb02 f303 	mul.w	r3, r2, r3
 8002fc2:	4a69      	ldr	r2, [pc, #420]	; (8003168 <HAL_I2C_Init+0x284>)
 8002fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc8:	099b      	lsrs	r3, r3, #6
 8002fca:	3301      	adds	r3, #1
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	495c      	ldr	r1, [pc, #368]	; (8003158 <HAL_I2C_Init+0x274>)
 8002fe8:	428b      	cmp	r3, r1
 8002fea:	d819      	bhi.n	8003020 <HAL_I2C_Init+0x13c>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1e59      	subs	r1, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ffa:	1c59      	adds	r1, r3, #1
 8002ffc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003000:	400b      	ands	r3, r1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_I2C_Init+0x138>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1e59      	subs	r1, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	fbb1 f3f3 	udiv	r3, r1, r3
 8003014:	3301      	adds	r3, #1
 8003016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301a:	e051      	b.n	80030c0 <HAL_I2C_Init+0x1dc>
 800301c:	2304      	movs	r3, #4
 800301e:	e04f      	b.n	80030c0 <HAL_I2C_Init+0x1dc>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d111      	bne.n	800304c <HAL_I2C_Init+0x168>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1e58      	subs	r0, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	440b      	add	r3, r1
 8003036:	fbb0 f3f3 	udiv	r3, r0, r3
 800303a:	3301      	adds	r3, #1
 800303c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf0c      	ite	eq
 8003044:	2301      	moveq	r3, #1
 8003046:	2300      	movne	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	e012      	b.n	8003072 <HAL_I2C_Init+0x18e>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1e58      	subs	r0, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	0099      	lsls	r1, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003062:	3301      	adds	r3, #1
 8003064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_I2C_Init+0x196>
 8003076:	2301      	movs	r3, #1
 8003078:	e022      	b.n	80030c0 <HAL_I2C_Init+0x1dc>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10e      	bne.n	80030a0 <HAL_I2C_Init+0x1bc>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1e58      	subs	r0, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6859      	ldr	r1, [r3, #4]
 800308a:	460b      	mov	r3, r1
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	440b      	add	r3, r1
 8003090:	fbb0 f3f3 	udiv	r3, r0, r3
 8003094:	3301      	adds	r3, #1
 8003096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800309e:	e00f      	b.n	80030c0 <HAL_I2C_Init+0x1dc>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1e58      	subs	r0, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6859      	ldr	r1, [r3, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	0099      	lsls	r1, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b6:	3301      	adds	r3, #1
 80030b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	6809      	ldr	r1, [r1, #0]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6911      	ldr	r1, [r2, #16]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68d2      	ldr	r2, [r2, #12]
 80030fa:	4311      	orrs	r1, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	430b      	orrs	r3, r1
 8003102:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695a      	ldr	r2, [r3, #20]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	000186a0 	.word	0x000186a0
 800315c:	001e847f 	.word	0x001e847f
 8003160:	003d08ff 	.word	0x003d08ff
 8003164:	431bde83 	.word	0x431bde83
 8003168:	10624dd3 	.word	0x10624dd3

0800316c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af02      	add	r7, sp, #8
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	607a      	str	r2, [r7, #4]
 8003176:	461a      	mov	r2, r3
 8003178:	460b      	mov	r3, r1
 800317a:	817b      	strh	r3, [r7, #10]
 800317c:	4613      	mov	r3, r2
 800317e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003180:	f7ff fb0e 	bl	80027a0 <HAL_GetTick>
 8003184:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b20      	cmp	r3, #32
 8003190:	f040 80e0 	bne.w	8003354 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	2319      	movs	r3, #25
 800319a:	2201      	movs	r2, #1
 800319c:	4970      	ldr	r1, [pc, #448]	; (8003360 <HAL_I2C_Master_Transmit+0x1f4>)
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f964 	bl	800346c <I2C_WaitOnFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031aa:	2302      	movs	r3, #2
 80031ac:	e0d3      	b.n	8003356 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_I2C_Master_Transmit+0x50>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e0cc      	b.n	8003356 <HAL_I2C_Master_Transmit+0x1ea>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d007      	beq.n	80031e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2221      	movs	r2, #33	; 0x21
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2210      	movs	r2, #16
 80031fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	893a      	ldrh	r2, [r7, #8]
 8003212:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4a50      	ldr	r2, [pc, #320]	; (8003364 <HAL_I2C_Master_Transmit+0x1f8>)
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003224:	8979      	ldrh	r1, [r7, #10]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	6a3a      	ldr	r2, [r7, #32]
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f89c 	bl	8003368 <I2C_MasterRequestWrite>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e08d      	b.n	8003356 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323a:	2300      	movs	r3, #0
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003250:	e066      	b.n	8003320 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	6a39      	ldr	r1, [r7, #32]
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 fa22 	bl	80036a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00d      	beq.n	800327e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	2b04      	cmp	r3, #4
 8003268:	d107      	bne.n	800327a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003278:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e06b      	b.n	8003356 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	781a      	ldrb	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d11b      	bne.n	80032f4 <HAL_I2C_Master_Transmit+0x188>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d017      	beq.n	80032f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	781a      	ldrb	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	6a39      	ldr	r1, [r7, #32]
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 fa19 	bl	8003730 <I2C_WaitOnBTFFlagUntilTimeout>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00d      	beq.n	8003320 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	2b04      	cmp	r3, #4
 800330a:	d107      	bne.n	800331c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e01a      	b.n	8003356 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003324:	2b00      	cmp	r3, #0
 8003326:	d194      	bne.n	8003252 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003336:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	e000      	b.n	8003356 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003354:	2302      	movs	r3, #2
  }
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	00100002 	.word	0x00100002
 8003364:	ffff0000 	.word	0xffff0000

08003368 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af02      	add	r7, sp, #8
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	460b      	mov	r3, r1
 8003376:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b08      	cmp	r3, #8
 8003382:	d006      	beq.n	8003392 <I2C_MasterRequestWrite+0x2a>
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d003      	beq.n	8003392 <I2C_MasterRequestWrite+0x2a>
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003390:	d108      	bne.n	80033a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	e00b      	b.n	80033bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	2b12      	cmp	r3, #18
 80033aa:	d107      	bne.n	80033bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f84f 	bl	800346c <I2C_WaitOnFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00d      	beq.n	80033f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e2:	d103      	bne.n	80033ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e035      	b.n	800345c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033f8:	d108      	bne.n	800340c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033fa:	897b      	ldrh	r3, [r7, #10]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003408:	611a      	str	r2, [r3, #16]
 800340a:	e01b      	b.n	8003444 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800340c:	897b      	ldrh	r3, [r7, #10]
 800340e:	11db      	asrs	r3, r3, #7
 8003410:	b2db      	uxtb	r3, r3
 8003412:	f003 0306 	and.w	r3, r3, #6
 8003416:	b2db      	uxtb	r3, r3
 8003418:	f063 030f 	orn	r3, r3, #15
 800341c:	b2da      	uxtb	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	490e      	ldr	r1, [pc, #56]	; (8003464 <I2C_MasterRequestWrite+0xfc>)
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 f898 	bl	8003560 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e010      	b.n	800345c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800343a:	897b      	ldrh	r3, [r7, #10]
 800343c:	b2da      	uxtb	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4907      	ldr	r1, [pc, #28]	; (8003468 <I2C_MasterRequestWrite+0x100>)
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f888 	bl	8003560 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	00010008 	.word	0x00010008
 8003468:	00010002 	.word	0x00010002

0800346c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	4613      	mov	r3, r2
 800347a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800347c:	e048      	b.n	8003510 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003484:	d044      	beq.n	8003510 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003486:	f7ff f98b 	bl	80027a0 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d302      	bcc.n	800349c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d139      	bne.n	8003510 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	0c1b      	lsrs	r3, r3, #16
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d10d      	bne.n	80034c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	43da      	mvns	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	4013      	ands	r3, r2
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	e00c      	b.n	80034dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	43da      	mvns	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4013      	ands	r3, r2
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d116      	bne.n	8003510 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f043 0220 	orr.w	r2, r3, #32
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e023      	b.n	8003558 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	0c1b      	lsrs	r3, r3, #16
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b01      	cmp	r3, #1
 8003518:	d10d      	bne.n	8003536 <I2C_WaitOnFlagUntilTimeout+0xca>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	43da      	mvns	r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	4013      	ands	r3, r2
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	bf0c      	ite	eq
 800352c:	2301      	moveq	r3, #1
 800352e:	2300      	movne	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	461a      	mov	r2, r3
 8003534:	e00c      	b.n	8003550 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	43da      	mvns	r2, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	4013      	ands	r3, r2
 8003542:	b29b      	uxth	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	429a      	cmp	r2, r3
 8003554:	d093      	beq.n	800347e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800356e:	e071      	b.n	8003654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357e:	d123      	bne.n	80035c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800358e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003598:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	f043 0204 	orr.w	r2, r3, #4
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e067      	b.n	8003698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ce:	d041      	beq.n	8003654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d0:	f7ff f8e6 	bl	80027a0 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d302      	bcc.n	80035e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d136      	bne.n	8003654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d10c      	bne.n	800360a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	43da      	mvns	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4013      	ands	r3, r2
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bf14      	ite	ne
 8003602:	2301      	movne	r3, #1
 8003604:	2300      	moveq	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	e00b      	b.n	8003622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	43da      	mvns	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	4013      	ands	r3, r2
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf14      	ite	ne
 800361c:	2301      	movne	r3, #1
 800361e:	2300      	moveq	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d016      	beq.n	8003654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	f043 0220 	orr.w	r2, r3, #32
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e021      	b.n	8003698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	0c1b      	lsrs	r3, r3, #16
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b01      	cmp	r3, #1
 800365c:	d10c      	bne.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	43da      	mvns	r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	4013      	ands	r3, r2
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	e00b      	b.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	43da      	mvns	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4013      	ands	r3, r2
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	f47f af6d 	bne.w	8003570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036ac:	e034      	b.n	8003718 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f886 	bl	80037c0 <I2C_IsAcknowledgeFailed>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e034      	b.n	8003728 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c4:	d028      	beq.n	8003718 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c6:	f7ff f86b 	bl	80027a0 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d302      	bcc.n	80036dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d11d      	bne.n	8003718 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e6:	2b80      	cmp	r3, #128	; 0x80
 80036e8:	d016      	beq.n	8003718 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f043 0220 	orr.w	r2, r3, #32
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e007      	b.n	8003728 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003722:	2b80      	cmp	r3, #128	; 0x80
 8003724:	d1c3      	bne.n	80036ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800373c:	e034      	b.n	80037a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f83e 	bl	80037c0 <I2C_IsAcknowledgeFailed>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e034      	b.n	80037b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003754:	d028      	beq.n	80037a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003756:	f7ff f823 	bl	80027a0 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	429a      	cmp	r2, r3
 8003764:	d302      	bcc.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d11d      	bne.n	80037a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	2b04      	cmp	r3, #4
 8003778:	d016      	beq.n	80037a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	f043 0220 	orr.w	r2, r3, #32
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e007      	b.n	80037b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d1c3      	bne.n	800373e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d6:	d11b      	bne.n	8003810 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f043 0204 	orr.w	r2, r3, #4
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr

0800381c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e272      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 8087 	beq.w	800394a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800383c:	4b92      	ldr	r3, [pc, #584]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b04      	cmp	r3, #4
 8003846:	d00c      	beq.n	8003862 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003848:	4b8f      	ldr	r3, [pc, #572]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 030c 	and.w	r3, r3, #12
 8003850:	2b08      	cmp	r3, #8
 8003852:	d112      	bne.n	800387a <HAL_RCC_OscConfig+0x5e>
 8003854:	4b8c      	ldr	r3, [pc, #560]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003860:	d10b      	bne.n	800387a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003862:	4b89      	ldr	r3, [pc, #548]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d06c      	beq.n	8003948 <HAL_RCC_OscConfig+0x12c>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d168      	bne.n	8003948 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e24c      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003882:	d106      	bne.n	8003892 <HAL_RCC_OscConfig+0x76>
 8003884:	4b80      	ldr	r3, [pc, #512]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a7f      	ldr	r2, [pc, #508]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800388a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	e02e      	b.n	80038f0 <HAL_RCC_OscConfig+0xd4>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10c      	bne.n	80038b4 <HAL_RCC_OscConfig+0x98>
 800389a:	4b7b      	ldr	r3, [pc, #492]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a7a      	ldr	r2, [pc, #488]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	4b78      	ldr	r3, [pc, #480]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a77      	ldr	r2, [pc, #476]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	e01d      	b.n	80038f0 <HAL_RCC_OscConfig+0xd4>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0xbc>
 80038be:	4b72      	ldr	r3, [pc, #456]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a71      	ldr	r2, [pc, #452]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b6f      	ldr	r3, [pc, #444]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a6e      	ldr	r2, [pc, #440]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e00b      	b.n	80038f0 <HAL_RCC_OscConfig+0xd4>
 80038d8:	4b6b      	ldr	r3, [pc, #428]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a6a      	ldr	r2, [pc, #424]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	4b68      	ldr	r3, [pc, #416]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a67      	ldr	r2, [pc, #412]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80038ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d013      	beq.n	8003920 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fe ff52 	bl	80027a0 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003900:	f7fe ff4e 	bl	80027a0 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b64      	cmp	r3, #100	; 0x64
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e200      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	4b5d      	ldr	r3, [pc, #372]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0xe4>
 800391e:	e014      	b.n	800394a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fe ff3e 	bl	80027a0 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003928:	f7fe ff3a 	bl	80027a0 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	; 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e1ec      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393a:	4b53      	ldr	r3, [pc, #332]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x10c>
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d063      	beq.n	8003a1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003956:	4b4c      	ldr	r3, [pc, #304]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003962:	4b49      	ldr	r3, [pc, #292]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b08      	cmp	r3, #8
 800396c:	d11c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x18c>
 800396e:	4b46      	ldr	r3, [pc, #280]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d116      	bne.n	80039a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397a:	4b43      	ldr	r3, [pc, #268]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_RCC_OscConfig+0x176>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d001      	beq.n	8003992 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e1c0      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003992:	4b3d      	ldr	r3, [pc, #244]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4939      	ldr	r1, [pc, #228]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a6:	e03a      	b.n	8003a1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d020      	beq.n	80039f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b0:	4b36      	ldr	r3, [pc, #216]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b6:	f7fe fef3 	bl	80027a0 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039be:	f7fe feef 	bl	80027a0 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e1a1      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d0:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039dc:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4927      	ldr	r1, [pc, #156]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	600b      	str	r3, [r1, #0]
 80039f0:	e015      	b.n	8003a1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f2:	4b26      	ldr	r3, [pc, #152]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7fe fed2 	bl	80027a0 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a00:	f7fe fece 	bl	80027a0 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e180      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a12:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d03a      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d019      	beq.n	8003a66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a32:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <HAL_RCC_OscConfig+0x274>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a38:	f7fe feb2 	bl	80027a0 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a40:	f7fe feae 	bl	80027a0 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e160      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a52:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <HAL_RCC_OscConfig+0x26c>)
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a5e:	2001      	movs	r0, #1
 8003a60:	f000 face 	bl	8004000 <RCC_Delay>
 8003a64:	e01c      	b.n	8003aa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a66:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <HAL_RCC_OscConfig+0x274>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6c:	f7fe fe98 	bl	80027a0 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a72:	e00f      	b.n	8003a94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a74:	f7fe fe94 	bl	80027a0 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d908      	bls.n	8003a94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e146      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	42420000 	.word	0x42420000
 8003a90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a94:	4b92      	ldr	r3, [pc, #584]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e9      	bne.n	8003a74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 80a6 	beq.w	8003bfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab2:	4b8b      	ldr	r3, [pc, #556]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10d      	bne.n	8003ada <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003abe:	4b88      	ldr	r3, [pc, #544]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	4a87      	ldr	r2, [pc, #540]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	61d3      	str	r3, [r2, #28]
 8003aca:	4b85      	ldr	r3, [pc, #532]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ada:	4b82      	ldr	r3, [pc, #520]	; (8003ce4 <HAL_RCC_OscConfig+0x4c8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d118      	bne.n	8003b18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae6:	4b7f      	ldr	r3, [pc, #508]	; (8003ce4 <HAL_RCC_OscConfig+0x4c8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a7e      	ldr	r2, [pc, #504]	; (8003ce4 <HAL_RCC_OscConfig+0x4c8>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af2:	f7fe fe55 	bl	80027a0 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afa:	f7fe fe51 	bl	80027a0 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b64      	cmp	r3, #100	; 0x64
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e103      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0c:	4b75      	ldr	r3, [pc, #468]	; (8003ce4 <HAL_RCC_OscConfig+0x4c8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d106      	bne.n	8003b2e <HAL_RCC_OscConfig+0x312>
 8003b20:	4b6f      	ldr	r3, [pc, #444]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	4a6e      	ldr	r2, [pc, #440]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	6213      	str	r3, [r2, #32]
 8003b2c:	e02d      	b.n	8003b8a <HAL_RCC_OscConfig+0x36e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCC_OscConfig+0x334>
 8003b36:	4b6a      	ldr	r3, [pc, #424]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	4a69      	ldr	r2, [pc, #420]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	6213      	str	r3, [r2, #32]
 8003b42:	4b67      	ldr	r3, [pc, #412]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	4a66      	ldr	r2, [pc, #408]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b48:	f023 0304 	bic.w	r3, r3, #4
 8003b4c:	6213      	str	r3, [r2, #32]
 8003b4e:	e01c      	b.n	8003b8a <HAL_RCC_OscConfig+0x36e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b05      	cmp	r3, #5
 8003b56:	d10c      	bne.n	8003b72 <HAL_RCC_OscConfig+0x356>
 8003b58:	4b61      	ldr	r3, [pc, #388]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4a60      	ldr	r2, [pc, #384]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b5e:	f043 0304 	orr.w	r3, r3, #4
 8003b62:	6213      	str	r3, [r2, #32]
 8003b64:	4b5e      	ldr	r3, [pc, #376]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	4a5d      	ldr	r2, [pc, #372]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6213      	str	r3, [r2, #32]
 8003b70:	e00b      	b.n	8003b8a <HAL_RCC_OscConfig+0x36e>
 8003b72:	4b5b      	ldr	r3, [pc, #364]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	4a5a      	ldr	r2, [pc, #360]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	f023 0301 	bic.w	r3, r3, #1
 8003b7c:	6213      	str	r3, [r2, #32]
 8003b7e:	4b58      	ldr	r3, [pc, #352]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	4a57      	ldr	r2, [pc, #348]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003b84:	f023 0304 	bic.w	r3, r3, #4
 8003b88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d015      	beq.n	8003bbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b92:	f7fe fe05 	bl	80027a0 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b98:	e00a      	b.n	8003bb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9a:	f7fe fe01 	bl	80027a0 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e0b1      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb0:	4b4b      	ldr	r3, [pc, #300]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0ee      	beq.n	8003b9a <HAL_RCC_OscConfig+0x37e>
 8003bbc:	e014      	b.n	8003be8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bbe:	f7fe fdef 	bl	80027a0 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc4:	e00a      	b.n	8003bdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc6:	f7fe fdeb 	bl	80027a0 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e09b      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bdc:	4b40      	ldr	r3, [pc, #256]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1ee      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003be8:	7dfb      	ldrb	r3, [r7, #23]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d105      	bne.n	8003bfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bee:	4b3c      	ldr	r3, [pc, #240]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	4a3b      	ldr	r2, [pc, #236]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 8087 	beq.w	8003d12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c04:	4b36      	ldr	r3, [pc, #216]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d061      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d146      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c18:	4b33      	ldr	r3, [pc, #204]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1e:	f7fe fdbf 	bl	80027a0 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c26:	f7fe fdbb 	bl	80027a0 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e06d      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c38:	4b29      	ldr	r3, [pc, #164]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1f0      	bne.n	8003c26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4c:	d108      	bne.n	8003c60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c4e:	4b24      	ldr	r3, [pc, #144]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	4921      	ldr	r1, [pc, #132]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c60:	4b1f      	ldr	r3, [pc, #124]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a19      	ldr	r1, [r3, #32]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	430b      	orrs	r3, r1
 8003c72:	491b      	ldr	r1, [pc, #108]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c78:	4b1b      	ldr	r3, [pc, #108]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7e:	f7fe fd8f 	bl	80027a0 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c86:	f7fe fd8b 	bl	80027a0 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e03d      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0f0      	beq.n	8003c86 <HAL_RCC_OscConfig+0x46a>
 8003ca4:	e035      	b.n	8003d12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca6:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <HAL_RCC_OscConfig+0x4cc>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fe fd78 	bl	80027a0 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fe fd74 	bl	80027a0 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e026      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cc6:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <HAL_RCC_OscConfig+0x4c4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x498>
 8003cd2:	e01e      	b.n	8003d12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d107      	bne.n	8003cec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e019      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40007000 	.word	0x40007000
 8003ce8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cec:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <HAL_RCC_OscConfig+0x500>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d106      	bne.n	8003d0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d001      	beq.n	8003d12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40021000 	.word	0x40021000

08003d20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0d0      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d34:	4b6a      	ldr	r3, [pc, #424]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d910      	bls.n	8003d64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d42:	4b67      	ldr	r3, [pc, #412]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f023 0207 	bic.w	r2, r3, #7
 8003d4a:	4965      	ldr	r1, [pc, #404]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d52:	4b63      	ldr	r3, [pc, #396]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0b8      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d020      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d7c:	4b59      	ldr	r3, [pc, #356]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4a58      	ldr	r2, [pc, #352]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d94:	4b53      	ldr	r3, [pc, #332]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	4a52      	ldr	r2, [pc, #328]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da0:	4b50      	ldr	r3, [pc, #320]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	494d      	ldr	r1, [pc, #308]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d040      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d107      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	4b47      	ldr	r3, [pc, #284]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d115      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e07f      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d107      	bne.n	8003dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dde:	4b41      	ldr	r3, [pc, #260]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e073      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dee:	4b3d      	ldr	r3, [pc, #244]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e06b      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dfe:	4b39      	ldr	r3, [pc, #228]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f023 0203 	bic.w	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	4936      	ldr	r1, [pc, #216]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e10:	f7fe fcc6 	bl	80027a0 <HAL_GetTick>
 8003e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e16:	e00a      	b.n	8003e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e18:	f7fe fcc2 	bl	80027a0 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e053      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 020c 	and.w	r2, r3, #12
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d1eb      	bne.n	8003e18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e40:	4b27      	ldr	r3, [pc, #156]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d210      	bcs.n	8003e70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 0207 	bic.w	r2, r3, #7
 8003e56:	4922      	ldr	r1, [pc, #136]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5e:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e032      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e7c:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	4916      	ldr	r1, [pc, #88]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d009      	beq.n	8003eae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e9a:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	490e      	ldr	r1, [pc, #56]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eae:	f000 f821 	bl	8003ef4 <HAL_RCC_GetSysClockFreq>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	490a      	ldr	r1, [pc, #40]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec0:	5ccb      	ldrb	r3, [r1, r3]
 8003ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec6:	4a09      	ldr	r2, [pc, #36]	; (8003eec <HAL_RCC_ClockConfig+0x1cc>)
 8003ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eca:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <HAL_RCC_ClockConfig+0x1d0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe fc24 	bl	800271c <HAL_InitTick>

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40022000 	.word	0x40022000
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	0800aa10 	.word	0x0800aa10
 8003eec:	20000014 	.word	0x20000014
 8003ef0:	20000018 	.word	0x20000018

08003ef4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	2300      	movs	r3, #0
 8003f08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f0e:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d002      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0x30>
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d003      	beq.n	8003f2a <HAL_RCC_GetSysClockFreq+0x36>
 8003f22:	e027      	b.n	8003f74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f24:	4b19      	ldr	r3, [pc, #100]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x98>)
 8003f26:	613b      	str	r3, [r7, #16]
      break;
 8003f28:	e027      	b.n	8003f7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	0c9b      	lsrs	r3, r3, #18
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	4a17      	ldr	r2, [pc, #92]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f34:	5cd3      	ldrb	r3, [r2, r3]
 8003f36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d010      	beq.n	8003f64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f42:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	0c5b      	lsrs	r3, r3, #17
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	4a11      	ldr	r2, [pc, #68]	; (8003f94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f4e:	5cd3      	ldrb	r3, [r2, r3]
 8003f50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a0d      	ldr	r2, [pc, #52]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x98>)
 8003f56:	fb03 f202 	mul.w	r2, r3, r2
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	e004      	b.n	8003f6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a0c      	ldr	r2, [pc, #48]	; (8003f98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f68:	fb02 f303 	mul.w	r3, r2, r3
 8003f6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	613b      	str	r3, [r7, #16]
      break;
 8003f72:	e002      	b.n	8003f7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x98>)
 8003f76:	613b      	str	r3, [r7, #16]
      break;
 8003f78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f7a:	693b      	ldr	r3, [r7, #16]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	007a1200 	.word	0x007a1200
 8003f90:	0800aa28 	.word	0x0800aa28
 8003f94:	0800aa38 	.word	0x0800aa38
 8003f98:	003d0900 	.word	0x003d0900

08003f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa0:	4b02      	ldr	r3, [pc, #8]	; (8003fac <HAL_RCC_GetHCLKFreq+0x10>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr
 8003fac:	20000014 	.word	0x20000014

08003fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fb4:	f7ff fff2 	bl	8003f9c <HAL_RCC_GetHCLKFreq>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	0a1b      	lsrs	r3, r3, #8
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	4903      	ldr	r1, [pc, #12]	; (8003fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fc6:	5ccb      	ldrb	r3, [r1, r3]
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	0800aa20 	.word	0x0800aa20

08003fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fdc:	f7ff ffde 	bl	8003f9c <HAL_RCC_GetHCLKFreq>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	0adb      	lsrs	r3, r3, #11
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	4903      	ldr	r1, [pc, #12]	; (8003ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fee:	5ccb      	ldrb	r3, [r1, r3]
 8003ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	0800aa20 	.word	0x0800aa20

08004000 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004008:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <RCC_Delay+0x34>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a0a      	ldr	r2, [pc, #40]	; (8004038 <RCC_Delay+0x38>)
 800400e:	fba2 2303 	umull	r2, r3, r2, r3
 8004012:	0a5b      	lsrs	r3, r3, #9
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	fb02 f303 	mul.w	r3, r2, r3
 800401a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800401c:	bf00      	nop
  }
  while (Delay --);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	1e5a      	subs	r2, r3, #1
 8004022:	60fa      	str	r2, [r7, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1f9      	bne.n	800401c <RCC_Delay+0x1c>
}
 8004028:	bf00      	nop
 800402a:	bf00      	nop
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr
 8004034:	20000014 	.word	0x20000014
 8004038:	10624dd3 	.word	0x10624dd3

0800403c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e041      	b.n	80040d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fe f93a 	bl	80022dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3304      	adds	r3, #4
 8004078:	4619      	mov	r1, r3
 800407a:	4610      	mov	r0, r2
 800407c:	f000 fc30 	bl	80048e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d001      	beq.n	80040f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e032      	b.n	800415a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a18      	ldr	r2, [pc, #96]	; (8004164 <HAL_TIM_Base_Start+0x88>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00e      	beq.n	8004124 <HAL_TIM_Base_Start+0x48>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410e:	d009      	beq.n	8004124 <HAL_TIM_Base_Start+0x48>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a14      	ldr	r2, [pc, #80]	; (8004168 <HAL_TIM_Base_Start+0x8c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <HAL_TIM_Base_Start+0x48>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a13      	ldr	r2, [pc, #76]	; (800416c <HAL_TIM_Base_Start+0x90>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d111      	bne.n	8004148 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b06      	cmp	r3, #6
 8004134:	d010      	beq.n	8004158 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0201 	orr.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004146:	e007      	b.n	8004158 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	40012c00 	.word	0x40012c00
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800

08004170 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e041      	b.n	8004206 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f839 	bl	800420e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	4619      	mov	r1, r3
 80041ae:	4610      	mov	r0, r2
 80041b0:	f000 fb96 	bl	80048e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr

08004220 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d109      	bne.n	8004244 <HAL_TIM_PWM_Start+0x24>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	bf14      	ite	ne
 800423c:	2301      	movne	r3, #1
 800423e:	2300      	moveq	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	e022      	b.n	800428a <HAL_TIM_PWM_Start+0x6a>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2b04      	cmp	r3, #4
 8004248:	d109      	bne.n	800425e <HAL_TIM_PWM_Start+0x3e>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b01      	cmp	r3, #1
 8004254:	bf14      	ite	ne
 8004256:	2301      	movne	r3, #1
 8004258:	2300      	moveq	r3, #0
 800425a:	b2db      	uxtb	r3, r3
 800425c:	e015      	b.n	800428a <HAL_TIM_PWM_Start+0x6a>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b08      	cmp	r3, #8
 8004262:	d109      	bne.n	8004278 <HAL_TIM_PWM_Start+0x58>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b01      	cmp	r3, #1
 800426e:	bf14      	ite	ne
 8004270:	2301      	movne	r3, #1
 8004272:	2300      	moveq	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	e008      	b.n	800428a <HAL_TIM_PWM_Start+0x6a>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b01      	cmp	r3, #1
 8004282:	bf14      	ite	ne
 8004284:	2301      	movne	r3, #1
 8004286:	2300      	moveq	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e05e      	b.n	8004350 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d104      	bne.n	80042a2 <HAL_TIM_PWM_Start+0x82>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a0:	e013      	b.n	80042ca <HAL_TIM_PWM_Start+0xaa>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d104      	bne.n	80042b2 <HAL_TIM_PWM_Start+0x92>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b0:	e00b      	b.n	80042ca <HAL_TIM_PWM_Start+0xaa>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d104      	bne.n	80042c2 <HAL_TIM_PWM_Start+0xa2>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042c0:	e003      	b.n	80042ca <HAL_TIM_PWM_Start+0xaa>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2202      	movs	r2, #2
 80042c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2201      	movs	r2, #1
 80042d0:	6839      	ldr	r1, [r7, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fd84 	bl	8004de0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a1e      	ldr	r2, [pc, #120]	; (8004358 <HAL_TIM_PWM_Start+0x138>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d107      	bne.n	80042f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a18      	ldr	r2, [pc, #96]	; (8004358 <HAL_TIM_PWM_Start+0x138>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00e      	beq.n	800431a <HAL_TIM_PWM_Start+0xfa>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004304:	d009      	beq.n	800431a <HAL_TIM_PWM_Start+0xfa>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a14      	ldr	r2, [pc, #80]	; (800435c <HAL_TIM_PWM_Start+0x13c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d004      	beq.n	800431a <HAL_TIM_PWM_Start+0xfa>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a12      	ldr	r2, [pc, #72]	; (8004360 <HAL_TIM_PWM_Start+0x140>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d111      	bne.n	800433e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b06      	cmp	r3, #6
 800432a:	d010      	beq.n	800434e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0201 	orr.w	r2, r2, #1
 800433a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800433c:	e007      	b.n	800434e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0201 	orr.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40012c00 	.word	0x40012c00
 800435c:	40000400 	.word	0x40000400
 8004360:	40000800 	.word	0x40000800

08004364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b02      	cmp	r3, #2
 8004378:	d122      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b02      	cmp	r3, #2
 8004386:	d11b      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f06f 0202 	mvn.w	r2, #2
 8004390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fa7f 	bl	80048aa <HAL_TIM_IC_CaptureCallback>
 80043ac:	e005      	b.n	80043ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fa72 	bl	8004898 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fa81 	bl	80048bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d122      	bne.n	8004414 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d11b      	bne.n	8004414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0204 	mvn.w	r2, #4
 80043e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2202      	movs	r2, #2
 80043ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fa55 	bl	80048aa <HAL_TIM_IC_CaptureCallback>
 8004400:	e005      	b.n	800440e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fa48 	bl	8004898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fa57 	bl	80048bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b08      	cmp	r3, #8
 8004420:	d122      	bne.n	8004468 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b08      	cmp	r3, #8
 800442e:	d11b      	bne.n	8004468 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0208 	mvn.w	r2, #8
 8004438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2204      	movs	r2, #4
 800443e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fa2b 	bl	80048aa <HAL_TIM_IC_CaptureCallback>
 8004454:	e005      	b.n	8004462 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fa1e 	bl	8004898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fa2d 	bl	80048bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0310 	and.w	r3, r3, #16
 8004472:	2b10      	cmp	r3, #16
 8004474:	d122      	bne.n	80044bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	2b10      	cmp	r3, #16
 8004482:	d11b      	bne.n	80044bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0210 	mvn.w	r2, #16
 800448c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2208      	movs	r2, #8
 8004492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fa01 	bl	80048aa <HAL_TIM_IC_CaptureCallback>
 80044a8:	e005      	b.n	80044b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f9f4 	bl	8004898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fa03 	bl	80048bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d10e      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d107      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0201 	mvn.w	r2, #1
 80044e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f9cf 	bl	8004886 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f2:	2b80      	cmp	r3, #128	; 0x80
 80044f4:	d10e      	bne.n	8004514 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004500:	2b80      	cmp	r3, #128	; 0x80
 8004502:	d107      	bne.n	8004514 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800450c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fcf1 	bl	8004ef6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451e:	2b40      	cmp	r3, #64	; 0x40
 8004520:	d10e      	bne.n	8004540 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	d107      	bne.n	8004540 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f9c7 	bl	80048ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b20      	cmp	r3, #32
 800454c:	d10e      	bne.n	800456c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b20      	cmp	r3, #32
 800455a:	d107      	bne.n	800456c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0220 	mvn.w	r2, #32
 8004564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fcbc 	bl	8004ee4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800456c:	bf00      	nop
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800458e:	2302      	movs	r3, #2
 8004590:	e0ae      	b.n	80046f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b0c      	cmp	r3, #12
 800459e:	f200 809f 	bhi.w	80046e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80045a2:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a8:	080045dd 	.word	0x080045dd
 80045ac:	080046e1 	.word	0x080046e1
 80045b0:	080046e1 	.word	0x080046e1
 80045b4:	080046e1 	.word	0x080046e1
 80045b8:	0800461d 	.word	0x0800461d
 80045bc:	080046e1 	.word	0x080046e1
 80045c0:	080046e1 	.word	0x080046e1
 80045c4:	080046e1 	.word	0x080046e1
 80045c8:	0800465f 	.word	0x0800465f
 80045cc:	080046e1 	.word	0x080046e1
 80045d0:	080046e1 	.word	0x080046e1
 80045d4:	080046e1 	.word	0x080046e1
 80045d8:	0800469f 	.word	0x0800469f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 f9de 	bl	80049a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0208 	orr.w	r2, r2, #8
 80045f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0204 	bic.w	r2, r2, #4
 8004606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6999      	ldr	r1, [r3, #24]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	619a      	str	r2, [r3, #24]
      break;
 800461a:	e064      	b.n	80046e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68b9      	ldr	r1, [r7, #8]
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fa24 	bl	8004a70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6999      	ldr	r1, [r3, #24]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	021a      	lsls	r2, r3, #8
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	619a      	str	r2, [r3, #24]
      break;
 800465c:	e043      	b.n	80046e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68b9      	ldr	r1, [r7, #8]
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fa6d 	bl	8004b44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0208 	orr.w	r2, r2, #8
 8004678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0204 	bic.w	r2, r2, #4
 8004688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69d9      	ldr	r1, [r3, #28]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	61da      	str	r2, [r3, #28]
      break;
 800469c:	e023      	b.n	80046e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fab7 	bl	8004c18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69da      	ldr	r2, [r3, #28]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69da      	ldr	r2, [r3, #28]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69d9      	ldr	r1, [r3, #28]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	021a      	lsls	r2, r3, #8
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	61da      	str	r2, [r3, #28]
      break;
 80046de:	e002      	b.n	80046e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	75fb      	strb	r3, [r7, #23]
      break;
 80046e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_TIM_ConfigClockSource+0x1c>
 8004710:	2302      	movs	r3, #2
 8004712:	e0b4      	b.n	800487e <HAL_TIM_ConfigClockSource+0x186>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800473a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474c:	d03e      	beq.n	80047cc <HAL_TIM_ConfigClockSource+0xd4>
 800474e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004752:	f200 8087 	bhi.w	8004864 <HAL_TIM_ConfigClockSource+0x16c>
 8004756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475a:	f000 8086 	beq.w	800486a <HAL_TIM_ConfigClockSource+0x172>
 800475e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004762:	d87f      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x16c>
 8004764:	2b70      	cmp	r3, #112	; 0x70
 8004766:	d01a      	beq.n	800479e <HAL_TIM_ConfigClockSource+0xa6>
 8004768:	2b70      	cmp	r3, #112	; 0x70
 800476a:	d87b      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x16c>
 800476c:	2b60      	cmp	r3, #96	; 0x60
 800476e:	d050      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x11a>
 8004770:	2b60      	cmp	r3, #96	; 0x60
 8004772:	d877      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x16c>
 8004774:	2b50      	cmp	r3, #80	; 0x50
 8004776:	d03c      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0xfa>
 8004778:	2b50      	cmp	r3, #80	; 0x50
 800477a:	d873      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x16c>
 800477c:	2b40      	cmp	r3, #64	; 0x40
 800477e:	d058      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x13a>
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	d86f      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x16c>
 8004784:	2b30      	cmp	r3, #48	; 0x30
 8004786:	d064      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x15a>
 8004788:	2b30      	cmp	r3, #48	; 0x30
 800478a:	d86b      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x16c>
 800478c:	2b20      	cmp	r3, #32
 800478e:	d060      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x15a>
 8004790:	2b20      	cmp	r3, #32
 8004792:	d867      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x16c>
 8004794:	2b00      	cmp	r3, #0
 8004796:	d05c      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x15a>
 8004798:	2b10      	cmp	r3, #16
 800479a:	d05a      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x15a>
 800479c:	e062      	b.n	8004864 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6899      	ldr	r1, [r3, #8]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f000 faf8 	bl	8004da2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	609a      	str	r2, [r3, #8]
      break;
 80047ca:	e04f      	b.n	800486c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	6899      	ldr	r1, [r3, #8]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f000 fae1 	bl	8004da2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ee:	609a      	str	r2, [r3, #8]
      break;
 80047f0:	e03c      	b.n	800486c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6859      	ldr	r1, [r3, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	461a      	mov	r2, r3
 8004800:	f000 fa58 	bl	8004cb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2150      	movs	r1, #80	; 0x50
 800480a:	4618      	mov	r0, r3
 800480c:	f000 faaf 	bl	8004d6e <TIM_ITRx_SetConfig>
      break;
 8004810:	e02c      	b.n	800486c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	6859      	ldr	r1, [r3, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	461a      	mov	r2, r3
 8004820:	f000 fa76 	bl	8004d10 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2160      	movs	r1, #96	; 0x60
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fa9f 	bl	8004d6e <TIM_ITRx_SetConfig>
      break;
 8004830:	e01c      	b.n	800486c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	461a      	mov	r2, r3
 8004840:	f000 fa38 	bl	8004cb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2140      	movs	r1, #64	; 0x40
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fa8f 	bl	8004d6e <TIM_ITRx_SetConfig>
      break;
 8004850:	e00c      	b.n	800486c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f000 fa86 	bl	8004d6e <TIM_ITRx_SetConfig>
      break;
 8004862:	e003      	b.n	800486c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	73fb      	strb	r3, [r7, #15]
      break;
 8004868:	e000      	b.n	800486c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800486a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800487c:	7bfb      	ldrb	r3, [r7, #15]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr

08004898 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bc80      	pop	{r7}
 80048a8:	4770      	bx	lr

080048aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr

080048bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bc80      	pop	{r7}
 80048cc:	4770      	bx	lr

080048ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr

080048e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a29      	ldr	r2, [pc, #164]	; (8004998 <TIM_Base_SetConfig+0xb8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00b      	beq.n	8004910 <TIM_Base_SetConfig+0x30>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fe:	d007      	beq.n	8004910 <TIM_Base_SetConfig+0x30>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a26      	ldr	r2, [pc, #152]	; (800499c <TIM_Base_SetConfig+0xbc>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d003      	beq.n	8004910 <TIM_Base_SetConfig+0x30>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a25      	ldr	r2, [pc, #148]	; (80049a0 <TIM_Base_SetConfig+0xc0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d108      	bne.n	8004922 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a1c      	ldr	r2, [pc, #112]	; (8004998 <TIM_Base_SetConfig+0xb8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00b      	beq.n	8004942 <TIM_Base_SetConfig+0x62>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004930:	d007      	beq.n	8004942 <TIM_Base_SetConfig+0x62>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a19      	ldr	r2, [pc, #100]	; (800499c <TIM_Base_SetConfig+0xbc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d003      	beq.n	8004942 <TIM_Base_SetConfig+0x62>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a18      	ldr	r2, [pc, #96]	; (80049a0 <TIM_Base_SetConfig+0xc0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d108      	bne.n	8004954 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4313      	orrs	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a07      	ldr	r2, [pc, #28]	; (8004998 <TIM_Base_SetConfig+0xb8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d103      	bne.n	8004988 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	691a      	ldr	r2, [r3, #16]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	615a      	str	r2, [r3, #20]
}
 800498e:	bf00      	nop
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr
 8004998:	40012c00 	.word	0x40012c00
 800499c:	40000400 	.word	0x40000400
 80049a0:	40000800 	.word	0x40000800

080049a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	f023 0201 	bic.w	r2, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f023 0302 	bic.w	r3, r3, #2
 80049ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a1c      	ldr	r2, [pc, #112]	; (8004a6c <TIM_OC1_SetConfig+0xc8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d10c      	bne.n	8004a1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f023 0308 	bic.w	r3, r3, #8
 8004a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f023 0304 	bic.w	r3, r3, #4
 8004a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a13      	ldr	r2, [pc, #76]	; (8004a6c <TIM_OC1_SetConfig+0xc8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d111      	bne.n	8004a46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	621a      	str	r2, [r3, #32]
}
 8004a60:	bf00      	nop
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40012c00 	.word	0x40012c00

08004a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	f023 0210 	bic.w	r2, r3, #16
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f023 0320 	bic.w	r3, r3, #32
 8004aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a1d      	ldr	r2, [pc, #116]	; (8004b40 <TIM_OC2_SetConfig+0xd0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d10d      	bne.n	8004aec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a14      	ldr	r2, [pc, #80]	; (8004b40 <TIM_OC2_SetConfig+0xd0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d113      	bne.n	8004b1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	621a      	str	r2, [r3, #32]
}
 8004b36:	bf00      	nop
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr
 8004b40:	40012c00 	.word	0x40012c00

08004b44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0303 	bic.w	r3, r3, #3
 8004b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	021b      	lsls	r3, r3, #8
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a1d      	ldr	r2, [pc, #116]	; (8004c14 <TIM_OC3_SetConfig+0xd0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d10d      	bne.n	8004bbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a14      	ldr	r2, [pc, #80]	; (8004c14 <TIM_OC3_SetConfig+0xd0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d113      	bne.n	8004bee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	621a      	str	r2, [r3, #32]
}
 8004c08:	bf00      	nop
 8004c0a:	371c      	adds	r7, #28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40012c00 	.word	0x40012c00

08004c18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	021b      	lsls	r3, r3, #8
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	031b      	lsls	r3, r3, #12
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a0f      	ldr	r2, [pc, #60]	; (8004cb0 <TIM_OC4_SetConfig+0x98>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d109      	bne.n	8004c8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	019b      	lsls	r3, r3, #6
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	621a      	str	r2, [r3, #32]
}
 8004ca6:	bf00      	nop
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr
 8004cb0:	40012c00 	.word	0x40012c00

08004cb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	f023 0201 	bic.w	r2, r3, #1
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f023 030a 	bic.w	r3, r3, #10
 8004cf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	621a      	str	r2, [r3, #32]
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr

08004d10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	f023 0210 	bic.w	r2, r3, #16
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	031b      	lsls	r3, r3, #12
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	621a      	str	r2, [r3, #32]
}
 8004d64:	bf00      	nop
 8004d66:	371c      	adds	r7, #28
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bc80      	pop	{r7}
 8004d6c:	4770      	bx	lr

08004d6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b085      	sub	sp, #20
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f043 0307 	orr.w	r3, r3, #7
 8004d90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	609a      	str	r2, [r3, #8]
}
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bc80      	pop	{r7}
 8004da0:	4770      	bx	lr

08004da2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b087      	sub	sp, #28
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	607a      	str	r2, [r7, #4]
 8004dae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	021a      	lsls	r2, r3, #8
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	609a      	str	r2, [r3, #8]
}
 8004dd6:	bf00      	nop
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr

08004de0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f003 031f 	and.w	r3, r3, #31
 8004df2:	2201      	movs	r2, #1
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a1a      	ldr	r2, [r3, #32]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	43db      	mvns	r3, r3
 8004e02:	401a      	ands	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a1a      	ldr	r2, [r3, #32]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f003 031f 	and.w	r3, r3, #31
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	fa01 f303 	lsl.w	r3, r1, r3
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	621a      	str	r2, [r3, #32]
}
 8004e1e:	bf00      	nop
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr

08004e28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e046      	b.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a16      	ldr	r2, [pc, #88]	; (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00e      	beq.n	8004ea2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8c:	d009      	beq.n	8004ea2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a12      	ldr	r2, [pc, #72]	; (8004edc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d004      	beq.n	8004ea2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a10      	ldr	r2, [pc, #64]	; (8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d10c      	bne.n	8004ebc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ea8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr
 8004ed8:	40012c00 	.word	0x40012c00
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40000800 	.word	0x40000800

08004ee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr

08004ef6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr

08004f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e042      	b.n	8004fa0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fd fa58 	bl	80023e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2224      	movs	r2, #36	; 0x24
 8004f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fdc5 	bl	8005adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695a      	ldr	r2, [r3, #20]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08a      	sub	sp, #40	; 0x28
 8004fac:	af02      	add	r7, sp, #8
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	d16d      	bne.n	80050a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <HAL_UART_Transmit+0x2c>
 8004fce:	88fb      	ldrh	r3, [r7, #6]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e066      	b.n	80050a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2221      	movs	r2, #33	; 0x21
 8004fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fe6:	f7fd fbdb 	bl	80027a0 <HAL_GetTick>
 8004fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	88fa      	ldrh	r2, [r7, #6]
 8004ff0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	88fa      	ldrh	r2, [r7, #6]
 8004ff6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005000:	d108      	bne.n	8005014 <HAL_UART_Transmit+0x6c>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d104      	bne.n	8005014 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800500a:	2300      	movs	r3, #0
 800500c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	61bb      	str	r3, [r7, #24]
 8005012:	e003      	b.n	800501c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005018:	2300      	movs	r3, #0
 800501a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800501c:	e02a      	b.n	8005074 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2200      	movs	r2, #0
 8005026:	2180      	movs	r1, #128	; 0x80
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 fb14 	bl	8005656 <UART_WaitOnFlagUntilTimeout>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e036      	b.n	80050a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10b      	bne.n	8005056 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800504c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	3302      	adds	r3, #2
 8005052:	61bb      	str	r3, [r7, #24]
 8005054:	e007      	b.n	8005066 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	781a      	ldrb	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	3301      	adds	r3, #1
 8005064:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1cf      	bne.n	800501e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2200      	movs	r2, #0
 8005086:	2140      	movs	r1, #64	; 0x40
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 fae4 	bl	8005656 <UART_WaitOnFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e006      	b.n	80050a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	e000      	b.n	80050a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80050a4:	2302      	movs	r3, #2
  }
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3720      	adds	r7, #32
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	4613      	mov	r3, r2
 80050ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d112      	bne.n	80050ee <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_UART_Receive_IT+0x26>
 80050ce:	88fb      	ldrh	r3, [r7, #6]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e00b      	b.n	80050f0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80050de:	88fb      	ldrh	r3, [r7, #6]
 80050e0:	461a      	mov	r2, r3
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 fb24 	bl	8005732 <UART_Start_Receive_IT>
 80050ea:	4603      	mov	r3, r0
 80050ec:	e000      	b.n	80050f0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80050ee:	2302      	movs	r3, #2
  }
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b0ba      	sub	sp, #232	; 0xe8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800511e:	2300      	movs	r3, #0
 8005120:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005124:	2300      	movs	r3, #0
 8005126:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800512a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005136:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10f      	bne.n	800515e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800513e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005142:	f003 0320 	and.w	r3, r3, #32
 8005146:	2b00      	cmp	r3, #0
 8005148:	d009      	beq.n	800515e <HAL_UART_IRQHandler+0x66>
 800514a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fc01 	bl	800595e <UART_Receive_IT>
      return;
 800515c:	e25b      	b.n	8005616 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800515e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 80de 	beq.w	8005324 <HAL_UART_IRQHandler+0x22c>
 8005168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d106      	bne.n	8005182 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005178:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 80d1 	beq.w	8005324 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00b      	beq.n	80051a6 <HAL_UART_IRQHandler+0xae>
 800518e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005196:	2b00      	cmp	r3, #0
 8005198:	d005      	beq.n	80051a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519e:	f043 0201 	orr.w	r2, r3, #1
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00b      	beq.n	80051ca <HAL_UART_IRQHandler+0xd2>
 80051b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c2:	f043 0202 	orr.w	r2, r3, #2
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00b      	beq.n	80051ee <HAL_UART_IRQHandler+0xf6>
 80051d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d005      	beq.n	80051ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e6:	f043 0204 	orr.w	r2, r3, #4
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80051ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d011      	beq.n	800521e <HAL_UART_IRQHandler+0x126>
 80051fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051fe:	f003 0320 	and.w	r3, r3, #32
 8005202:	2b00      	cmp	r3, #0
 8005204:	d105      	bne.n	8005212 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005216:	f043 0208 	orr.w	r2, r3, #8
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 81f2 	beq.w	800560c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800522c:	f003 0320 	and.w	r3, r3, #32
 8005230:	2b00      	cmp	r3, #0
 8005232:	d008      	beq.n	8005246 <HAL_UART_IRQHandler+0x14e>
 8005234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fb8c 	bl	800595e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	bf14      	ite	ne
 8005254:	2301      	movne	r3, #1
 8005256:	2300      	moveq	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	f003 0308 	and.w	r3, r3, #8
 8005266:	2b00      	cmp	r3, #0
 8005268:	d103      	bne.n	8005272 <HAL_UART_IRQHandler+0x17a>
 800526a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800526e:	2b00      	cmp	r3, #0
 8005270:	d04f      	beq.n	8005312 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fa96 	bl	80057a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005282:	2b00      	cmp	r3, #0
 8005284:	d041      	beq.n	800530a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3314      	adds	r3, #20
 800528c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005290:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800529c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3314      	adds	r3, #20
 80052ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80052b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80052b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80052be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80052ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1d9      	bne.n	8005286 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d013      	beq.n	8005302 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052de:	4a7e      	ldr	r2, [pc, #504]	; (80054d8 <HAL_UART_IRQHandler+0x3e0>)
 80052e0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fd fbd0 	bl	8002a8c <HAL_DMA_Abort_IT>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d016      	beq.n	8005320 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80052fc:	4610      	mov	r0, r2
 80052fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005300:	e00e      	b.n	8005320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f993 	bl	800562e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005308:	e00a      	b.n	8005320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f98f 	bl	800562e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005310:	e006      	b.n	8005320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f98b 	bl	800562e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800531e:	e175      	b.n	800560c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005320:	bf00      	nop
    return;
 8005322:	e173      	b.n	800560c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005328:	2b01      	cmp	r3, #1
 800532a:	f040 814f 	bne.w	80055cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800532e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005332:	f003 0310 	and.w	r3, r3, #16
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 8148 	beq.w	80055cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800533c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 8141 	beq.w	80055cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800534a:	2300      	movs	r3, #0
 800534c:	60bb      	str	r3, [r7, #8]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	60bb      	str	r3, [r7, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	60bb      	str	r3, [r7, #8]
 800535e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 80b6 	beq.w	80054dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800537c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 8145 	beq.w	8005610 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800538a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800538e:	429a      	cmp	r2, r3
 8005390:	f080 813e 	bcs.w	8005610 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800539a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	f000 8088 	beq.w	80054b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	330c      	adds	r3, #12
 80053ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80053be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	330c      	adds	r3, #12
 80053d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80053d4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80053e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80053ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1d9      	bne.n	80053a8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3314      	adds	r3, #20
 80053fa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005404:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005406:	f023 0301 	bic.w	r3, r3, #1
 800540a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3314      	adds	r3, #20
 8005414:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005418:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800541c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005420:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800542a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e1      	bne.n	80053f4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3314      	adds	r3, #20
 8005436:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005446:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3314      	adds	r3, #20
 8005450:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005454:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005456:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800545a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005462:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e3      	bne.n	8005430 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	330c      	adds	r3, #12
 800547c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005488:	f023 0310 	bic.w	r3, r3, #16
 800548c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	330c      	adds	r3, #12
 8005496:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800549a:	65ba      	str	r2, [r7, #88]	; 0x58
 800549c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054a2:	e841 2300 	strex	r3, r2, [r1]
 80054a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1e3      	bne.n	8005476 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fd faaf 	bl	8002a16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f8b6 	bl	8005640 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054d4:	e09c      	b.n	8005610 <HAL_UART_IRQHandler+0x518>
 80054d6:	bf00      	nop
 80054d8:	08005869 	.word	0x08005869
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 808e 	beq.w	8005614 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80054f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 8089 	beq.w	8005614 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	330c      	adds	r3, #12
 8005508:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	e853 3f00 	ldrex	r3, [r3]
 8005510:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005514:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005518:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	330c      	adds	r3, #12
 8005522:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005526:	647a      	str	r2, [r7, #68]	; 0x44
 8005528:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800552c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1e3      	bne.n	8005502 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3314      	adds	r3, #20
 8005540:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	623b      	str	r3, [r7, #32]
   return(result);
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	f023 0301 	bic.w	r3, r3, #1
 8005550:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3314      	adds	r3, #20
 800555a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800555e:	633a      	str	r2, [r7, #48]	; 0x30
 8005560:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e3      	bne.n	800553a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2220      	movs	r2, #32
 8005576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	330c      	adds	r3, #12
 8005586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	e853 3f00 	ldrex	r3, [r3]
 800558e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0310 	bic.w	r3, r3, #16
 8005596:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	330c      	adds	r3, #12
 80055a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80055a4:	61fa      	str	r2, [r7, #28]
 80055a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a8:	69b9      	ldr	r1, [r7, #24]
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	e841 2300 	strex	r3, r2, [r1]
 80055b0:	617b      	str	r3, [r7, #20]
   return(result);
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1e3      	bne.n	8005580 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055c2:	4619      	mov	r1, r3
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f83b 	bl	8005640 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055ca:	e023      	b.n	8005614 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d009      	beq.n	80055ec <HAL_UART_IRQHandler+0x4f4>
 80055d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f953 	bl	8005890 <UART_Transmit_IT>
    return;
 80055ea:	e014      	b.n	8005616 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00e      	beq.n	8005616 <HAL_UART_IRQHandler+0x51e>
 80055f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005600:	2b00      	cmp	r3, #0
 8005602:	d008      	beq.n	8005616 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f992 	bl	800592e <UART_EndTransmit_IT>
    return;
 800560a:	e004      	b.n	8005616 <HAL_UART_IRQHandler+0x51e>
    return;
 800560c:	bf00      	nop
 800560e:	e002      	b.n	8005616 <HAL_UART_IRQHandler+0x51e>
      return;
 8005610:	bf00      	nop
 8005612:	e000      	b.n	8005616 <HAL_UART_IRQHandler+0x51e>
      return;
 8005614:	bf00      	nop
  }
}
 8005616:	37e8      	adds	r7, #232	; 0xe8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr

0800562e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr

08005640 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	460b      	mov	r3, r1
 800564a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	bc80      	pop	{r7}
 8005654:	4770      	bx	lr

08005656 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b090      	sub	sp, #64	; 0x40
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	603b      	str	r3, [r7, #0]
 8005662:	4613      	mov	r3, r2
 8005664:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005666:	e050      	b.n	800570a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800566a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566e:	d04c      	beq.n	800570a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005672:	2b00      	cmp	r3, #0
 8005674:	d007      	beq.n	8005686 <UART_WaitOnFlagUntilTimeout+0x30>
 8005676:	f7fd f893 	bl	80027a0 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005682:	429a      	cmp	r2, r3
 8005684:	d241      	bcs.n	800570a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	330c      	adds	r3, #12
 800568c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800569c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	330c      	adds	r3, #12
 80056a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056a6:	637a      	str	r2, [r7, #52]	; 0x34
 80056a8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e5      	bne.n	8005686 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3314      	adds	r3, #20
 80056c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	613b      	str	r3, [r7, #16]
   return(result);
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f023 0301 	bic.w	r3, r3, #1
 80056d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3314      	adds	r3, #20
 80056d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056da:	623a      	str	r2, [r7, #32]
 80056dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	69f9      	ldr	r1, [r7, #28]
 80056e0:	6a3a      	ldr	r2, [r7, #32]
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e5      	bne.n	80056ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e00f      	b.n	800572a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	4013      	ands	r3, r2
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	bf0c      	ite	eq
 800571a:	2301      	moveq	r3, #1
 800571c:	2300      	movne	r3, #0
 800571e:	b2db      	uxtb	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	429a      	cmp	r2, r3
 8005726:	d09f      	beq.n	8005668 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3740      	adds	r7, #64	; 0x40
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005732:	b480      	push	{r7}
 8005734:	b085      	sub	sp, #20
 8005736:	af00      	add	r7, sp, #0
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	4613      	mov	r3, r2
 800573e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	88fa      	ldrh	r2, [r7, #6]
 800574a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	88fa      	ldrh	r2, [r7, #6]
 8005750:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2222      	movs	r2, #34	; 0x22
 800575c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d007      	beq.n	8005778 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005776:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695a      	ldr	r2, [r3, #20]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0201 	orr.w	r2, r2, #1
 8005786:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0220 	orr.w	r2, r2, #32
 8005796:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	bc80      	pop	{r7}
 80057a2:	4770      	bx	lr

080057a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b095      	sub	sp, #84	; 0x54
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	330c      	adds	r3, #12
 80057b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	330c      	adds	r3, #12
 80057ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057cc:	643a      	str	r2, [r7, #64]	; 0x40
 80057ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e5      	bne.n	80057ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3314      	adds	r3, #20
 80057e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3314      	adds	r3, #20
 80057fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005800:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e5      	bne.n	80057e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	2b01      	cmp	r3, #1
 800581a:	d119      	bne.n	8005850 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	330c      	adds	r3, #12
 8005822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	60bb      	str	r3, [r7, #8]
   return(result);
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f023 0310 	bic.w	r3, r3, #16
 8005832:	647b      	str	r3, [r7, #68]	; 0x44
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800583c:	61ba      	str	r2, [r7, #24]
 800583e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	6979      	ldr	r1, [r7, #20]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	613b      	str	r3, [r7, #16]
   return(result);
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e5      	bne.n	800581c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800585e:	bf00      	nop
 8005860:	3754      	adds	r7, #84	; 0x54
 8005862:	46bd      	mov	sp, r7
 8005864:	bc80      	pop	{r7}
 8005866:	4770      	bx	lr

08005868 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f7ff fed3 	bl	800562e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005888:	bf00      	nop
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b21      	cmp	r3, #33	; 0x21
 80058a2:	d13e      	bne.n	8005922 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ac:	d114      	bne.n	80058d8 <UART_Transmit_IT+0x48>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d110      	bne.n	80058d8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	461a      	mov	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	1c9a      	adds	r2, r3, #2
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	621a      	str	r2, [r3, #32]
 80058d6:	e008      	b.n	80058ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	1c59      	adds	r1, r3, #1
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	6211      	str	r1, [r2, #32]
 80058e2:	781a      	ldrb	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	3b01      	subs	r3, #1
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	4619      	mov	r1, r3
 80058f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10f      	bne.n	800591e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68da      	ldr	r2, [r3, #12]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800590c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800591c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	e000      	b.n	8005924 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005922:	2302      	movs	r3, #2
  }
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	bc80      	pop	{r7}
 800592c:	4770      	bx	lr

0800592e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b082      	sub	sp, #8
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005944:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7ff fe64 	bl	800561c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b08c      	sub	sp, #48	; 0x30
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b22      	cmp	r3, #34	; 0x22
 8005970:	f040 80ae 	bne.w	8005ad0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800597c:	d117      	bne.n	80059ae <UART_Receive_IT+0x50>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d113      	bne.n	80059ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005986:	2300      	movs	r3, #0
 8005988:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	b29b      	uxth	r3, r3
 8005998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800599c:	b29a      	uxth	r2, r3
 800599e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a6:	1c9a      	adds	r2, r3, #2
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	629a      	str	r2, [r3, #40]	; 0x28
 80059ac:	e026      	b.n	80059fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80059b4:	2300      	movs	r3, #0
 80059b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c0:	d007      	beq.n	80059d2 <UART_Receive_IT+0x74>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10a      	bne.n	80059e0 <UART_Receive_IT+0x82>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d106      	bne.n	80059e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	e008      	b.n	80059f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	4619      	mov	r1, r3
 8005a0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d15d      	bne.n	8005acc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0220 	bic.w	r2, r2, #32
 8005a1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695a      	ldr	r2, [r3, #20]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 0201 	bic.w	r2, r2, #1
 8005a3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d135      	bne.n	8005ac2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	330c      	adds	r3, #12
 8005a62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f023 0310 	bic.w	r3, r3, #16
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	330c      	adds	r3, #12
 8005a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7c:	623a      	str	r2, [r7, #32]
 8005a7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	69f9      	ldr	r1, [r7, #28]
 8005a82:	6a3a      	ldr	r2, [r7, #32]
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e5      	bne.n	8005a5c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0310 	and.w	r3, r3, #16
 8005a9a:	2b10      	cmp	r3, #16
 8005a9c:	d10a      	bne.n	8005ab4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff fdc0 	bl	8005640 <HAL_UARTEx_RxEventCallback>
 8005ac0:	e002      	b.n	8005ac8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fb fe24 	bl	8001710 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	e002      	b.n	8005ad2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	e000      	b.n	8005ad2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ad0:	2302      	movs	r3, #2
  }
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3730      	adds	r7, #48	; 0x30
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	431a      	orrs	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b16:	f023 030c 	bic.w	r3, r3, #12
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	6812      	ldr	r2, [r2, #0]
 8005b1e:	68b9      	ldr	r1, [r7, #8]
 8005b20:	430b      	orrs	r3, r1
 8005b22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699a      	ldr	r2, [r3, #24]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a2c      	ldr	r2, [pc, #176]	; (8005bf0 <UART_SetConfig+0x114>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d103      	bne.n	8005b4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b44:	f7fe fa48 	bl	8003fd8 <HAL_RCC_GetPCLK2Freq>
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	e002      	b.n	8005b52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b4c:	f7fe fa30 	bl	8003fb0 <HAL_RCC_GetPCLK1Freq>
 8005b50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4613      	mov	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	009a      	lsls	r2, r3, #2
 8005b5c:	441a      	add	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b68:	4a22      	ldr	r2, [pc, #136]	; (8005bf4 <UART_SetConfig+0x118>)
 8005b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6e:	095b      	lsrs	r3, r3, #5
 8005b70:	0119      	lsls	r1, r3, #4
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	4613      	mov	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	009a      	lsls	r2, r3, #2
 8005b7c:	441a      	add	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b88:	4b1a      	ldr	r3, [pc, #104]	; (8005bf4 <UART_SetConfig+0x118>)
 8005b8a:	fba3 0302 	umull	r0, r3, r3, r2
 8005b8e:	095b      	lsrs	r3, r3, #5
 8005b90:	2064      	movs	r0, #100	; 0x64
 8005b92:	fb00 f303 	mul.w	r3, r0, r3
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	3332      	adds	r3, #50	; 0x32
 8005b9c:	4a15      	ldr	r2, [pc, #84]	; (8005bf4 <UART_SetConfig+0x118>)
 8005b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba2:	095b      	lsrs	r3, r3, #5
 8005ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ba8:	4419      	add	r1, r3
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	4613      	mov	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	009a      	lsls	r2, r3, #2
 8005bb4:	441a      	add	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bc0:	4b0c      	ldr	r3, [pc, #48]	; (8005bf4 <UART_SetConfig+0x118>)
 8005bc2:	fba3 0302 	umull	r0, r3, r3, r2
 8005bc6:	095b      	lsrs	r3, r3, #5
 8005bc8:	2064      	movs	r0, #100	; 0x64
 8005bca:	fb00 f303 	mul.w	r3, r0, r3
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	3332      	adds	r3, #50	; 0x32
 8005bd4:	4a07      	ldr	r2, [pc, #28]	; (8005bf4 <UART_SetConfig+0x118>)
 8005bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	f003 020f 	and.w	r2, r3, #15
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	440a      	add	r2, r1
 8005be6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005be8:	bf00      	nop
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	40013800 	.word	0x40013800
 8005bf4:	51eb851f 	.word	0x51eb851f

08005bf8 <atoi>:
 8005bf8:	220a      	movs	r2, #10
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	f001 be08 	b.w	8007810 <strtol>

08005c00 <__errno>:
 8005c00:	4b01      	ldr	r3, [pc, #4]	; (8005c08 <__errno+0x8>)
 8005c02:	6818      	ldr	r0, [r3, #0]
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	20000020 	.word	0x20000020

08005c0c <__libc_init_array>:
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	2600      	movs	r6, #0
 8005c10:	4d0c      	ldr	r5, [pc, #48]	; (8005c44 <__libc_init_array+0x38>)
 8005c12:	4c0d      	ldr	r4, [pc, #52]	; (8005c48 <__libc_init_array+0x3c>)
 8005c14:	1b64      	subs	r4, r4, r5
 8005c16:	10a4      	asrs	r4, r4, #2
 8005c18:	42a6      	cmp	r6, r4
 8005c1a:	d109      	bne.n	8005c30 <__libc_init_array+0x24>
 8005c1c:	f004 fd5a 	bl	800a6d4 <_init>
 8005c20:	2600      	movs	r6, #0
 8005c22:	4d0a      	ldr	r5, [pc, #40]	; (8005c4c <__libc_init_array+0x40>)
 8005c24:	4c0a      	ldr	r4, [pc, #40]	; (8005c50 <__libc_init_array+0x44>)
 8005c26:	1b64      	subs	r4, r4, r5
 8005c28:	10a4      	asrs	r4, r4, #2
 8005c2a:	42a6      	cmp	r6, r4
 8005c2c:	d105      	bne.n	8005c3a <__libc_init_array+0x2e>
 8005c2e:	bd70      	pop	{r4, r5, r6, pc}
 8005c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c34:	4798      	blx	r3
 8005c36:	3601      	adds	r6, #1
 8005c38:	e7ee      	b.n	8005c18 <__libc_init_array+0xc>
 8005c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c3e:	4798      	blx	r3
 8005c40:	3601      	adds	r6, #1
 8005c42:	e7f2      	b.n	8005c2a <__libc_init_array+0x1e>
 8005c44:	0800aeec 	.word	0x0800aeec
 8005c48:	0800aeec 	.word	0x0800aeec
 8005c4c:	0800aeec 	.word	0x0800aeec
 8005c50:	0800aef0 	.word	0x0800aef0

08005c54 <memset>:
 8005c54:	4603      	mov	r3, r0
 8005c56:	4402      	add	r2, r0
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d100      	bne.n	8005c5e <memset+0xa>
 8005c5c:	4770      	bx	lr
 8005c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c62:	e7f9      	b.n	8005c58 <memset+0x4>

08005c64 <__cvt>:
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c6a:	461f      	mov	r7, r3
 8005c6c:	bfbb      	ittet	lt
 8005c6e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005c72:	461f      	movlt	r7, r3
 8005c74:	2300      	movge	r3, #0
 8005c76:	232d      	movlt	r3, #45	; 0x2d
 8005c78:	b088      	sub	sp, #32
 8005c7a:	4614      	mov	r4, r2
 8005c7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c7e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005c80:	7013      	strb	r3, [r2, #0]
 8005c82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c84:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005c88:	f023 0820 	bic.w	r8, r3, #32
 8005c8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c90:	d005      	beq.n	8005c9e <__cvt+0x3a>
 8005c92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c96:	d100      	bne.n	8005c9a <__cvt+0x36>
 8005c98:	3501      	adds	r5, #1
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	e000      	b.n	8005ca0 <__cvt+0x3c>
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	aa07      	add	r2, sp, #28
 8005ca2:	9204      	str	r2, [sp, #16]
 8005ca4:	aa06      	add	r2, sp, #24
 8005ca6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005caa:	e9cd 3500 	strd	r3, r5, [sp]
 8005cae:	4622      	mov	r2, r4
 8005cb0:	463b      	mov	r3, r7
 8005cb2:	f001 ff05 	bl	8007ac0 <_dtoa_r>
 8005cb6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005cba:	4606      	mov	r6, r0
 8005cbc:	d102      	bne.n	8005cc4 <__cvt+0x60>
 8005cbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cc0:	07db      	lsls	r3, r3, #31
 8005cc2:	d522      	bpl.n	8005d0a <__cvt+0xa6>
 8005cc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cc8:	eb06 0905 	add.w	r9, r6, r5
 8005ccc:	d110      	bne.n	8005cf0 <__cvt+0x8c>
 8005cce:	7833      	ldrb	r3, [r6, #0]
 8005cd0:	2b30      	cmp	r3, #48	; 0x30
 8005cd2:	d10a      	bne.n	8005cea <__cvt+0x86>
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	4620      	mov	r0, r4
 8005cda:	4639      	mov	r1, r7
 8005cdc:	f7fa fe6e 	bl	80009bc <__aeabi_dcmpeq>
 8005ce0:	b918      	cbnz	r0, 8005cea <__cvt+0x86>
 8005ce2:	f1c5 0501 	rsb	r5, r5, #1
 8005ce6:	f8ca 5000 	str.w	r5, [sl]
 8005cea:	f8da 3000 	ldr.w	r3, [sl]
 8005cee:	4499      	add	r9, r3
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	4639      	mov	r1, r7
 8005cf8:	f7fa fe60 	bl	80009bc <__aeabi_dcmpeq>
 8005cfc:	b108      	cbz	r0, 8005d02 <__cvt+0x9e>
 8005cfe:	f8cd 901c 	str.w	r9, [sp, #28]
 8005d02:	2230      	movs	r2, #48	; 0x30
 8005d04:	9b07      	ldr	r3, [sp, #28]
 8005d06:	454b      	cmp	r3, r9
 8005d08:	d307      	bcc.n	8005d1a <__cvt+0xb6>
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	9b07      	ldr	r3, [sp, #28]
 8005d0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005d10:	1b9b      	subs	r3, r3, r6
 8005d12:	6013      	str	r3, [r2, #0]
 8005d14:	b008      	add	sp, #32
 8005d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1a:	1c59      	adds	r1, r3, #1
 8005d1c:	9107      	str	r1, [sp, #28]
 8005d1e:	701a      	strb	r2, [r3, #0]
 8005d20:	e7f0      	b.n	8005d04 <__cvt+0xa0>

08005d22 <__exponent>:
 8005d22:	4603      	mov	r3, r0
 8005d24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d26:	2900      	cmp	r1, #0
 8005d28:	f803 2b02 	strb.w	r2, [r3], #2
 8005d2c:	bfb6      	itet	lt
 8005d2e:	222d      	movlt	r2, #45	; 0x2d
 8005d30:	222b      	movge	r2, #43	; 0x2b
 8005d32:	4249      	neglt	r1, r1
 8005d34:	2909      	cmp	r1, #9
 8005d36:	7042      	strb	r2, [r0, #1]
 8005d38:	dd2b      	ble.n	8005d92 <__exponent+0x70>
 8005d3a:	f10d 0407 	add.w	r4, sp, #7
 8005d3e:	46a4      	mov	ip, r4
 8005d40:	270a      	movs	r7, #10
 8005d42:	fb91 f6f7 	sdiv	r6, r1, r7
 8005d46:	460a      	mov	r2, r1
 8005d48:	46a6      	mov	lr, r4
 8005d4a:	fb07 1516 	mls	r5, r7, r6, r1
 8005d4e:	2a63      	cmp	r2, #99	; 0x63
 8005d50:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005d54:	4631      	mov	r1, r6
 8005d56:	f104 34ff 	add.w	r4, r4, #4294967295
 8005d5a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005d5e:	dcf0      	bgt.n	8005d42 <__exponent+0x20>
 8005d60:	3130      	adds	r1, #48	; 0x30
 8005d62:	f1ae 0502 	sub.w	r5, lr, #2
 8005d66:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d6a:	4629      	mov	r1, r5
 8005d6c:	1c44      	adds	r4, r0, #1
 8005d6e:	4561      	cmp	r1, ip
 8005d70:	d30a      	bcc.n	8005d88 <__exponent+0x66>
 8005d72:	f10d 0209 	add.w	r2, sp, #9
 8005d76:	eba2 020e 	sub.w	r2, r2, lr
 8005d7a:	4565      	cmp	r5, ip
 8005d7c:	bf88      	it	hi
 8005d7e:	2200      	movhi	r2, #0
 8005d80:	4413      	add	r3, r2
 8005d82:	1a18      	subs	r0, r3, r0
 8005d84:	b003      	add	sp, #12
 8005d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d88:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d8c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005d90:	e7ed      	b.n	8005d6e <__exponent+0x4c>
 8005d92:	2330      	movs	r3, #48	; 0x30
 8005d94:	3130      	adds	r1, #48	; 0x30
 8005d96:	7083      	strb	r3, [r0, #2]
 8005d98:	70c1      	strb	r1, [r0, #3]
 8005d9a:	1d03      	adds	r3, r0, #4
 8005d9c:	e7f1      	b.n	8005d82 <__exponent+0x60>
	...

08005da0 <_printf_float>:
 8005da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da4:	b091      	sub	sp, #68	; 0x44
 8005da6:	460c      	mov	r4, r1
 8005da8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005dac:	4616      	mov	r6, r2
 8005dae:	461f      	mov	r7, r3
 8005db0:	4605      	mov	r5, r0
 8005db2:	f003 f98d 	bl	80090d0 <_localeconv_r>
 8005db6:	6803      	ldr	r3, [r0, #0]
 8005db8:	4618      	mov	r0, r3
 8005dba:	9309      	str	r3, [sp, #36]	; 0x24
 8005dbc:	f7fa f9d2 	bl	8000164 <strlen>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	930e      	str	r3, [sp, #56]	; 0x38
 8005dc4:	f8d8 3000 	ldr.w	r3, [r8]
 8005dc8:	900a      	str	r0, [sp, #40]	; 0x28
 8005dca:	3307      	adds	r3, #7
 8005dcc:	f023 0307 	bic.w	r3, r3, #7
 8005dd0:	f103 0208 	add.w	r2, r3, #8
 8005dd4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005dd8:	f8d4 b000 	ldr.w	fp, [r4]
 8005ddc:	f8c8 2000 	str.w	r2, [r8]
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005de8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005dec:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005df0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005df2:	f04f 32ff 	mov.w	r2, #4294967295
 8005df6:	4640      	mov	r0, r8
 8005df8:	4b9c      	ldr	r3, [pc, #624]	; (800606c <_printf_float+0x2cc>)
 8005dfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dfc:	f7fa fe10 	bl	8000a20 <__aeabi_dcmpun>
 8005e00:	bb70      	cbnz	r0, 8005e60 <_printf_float+0xc0>
 8005e02:	f04f 32ff 	mov.w	r2, #4294967295
 8005e06:	4640      	mov	r0, r8
 8005e08:	4b98      	ldr	r3, [pc, #608]	; (800606c <_printf_float+0x2cc>)
 8005e0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e0c:	f7fa fdea 	bl	80009e4 <__aeabi_dcmple>
 8005e10:	bb30      	cbnz	r0, 8005e60 <_printf_float+0xc0>
 8005e12:	2200      	movs	r2, #0
 8005e14:	2300      	movs	r3, #0
 8005e16:	4640      	mov	r0, r8
 8005e18:	4651      	mov	r1, sl
 8005e1a:	f7fa fdd9 	bl	80009d0 <__aeabi_dcmplt>
 8005e1e:	b110      	cbz	r0, 8005e26 <_printf_float+0x86>
 8005e20:	232d      	movs	r3, #45	; 0x2d
 8005e22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e26:	4b92      	ldr	r3, [pc, #584]	; (8006070 <_printf_float+0x2d0>)
 8005e28:	4892      	ldr	r0, [pc, #584]	; (8006074 <_printf_float+0x2d4>)
 8005e2a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005e2e:	bf94      	ite	ls
 8005e30:	4698      	movls	r8, r3
 8005e32:	4680      	movhi	r8, r0
 8005e34:	2303      	movs	r3, #3
 8005e36:	f04f 0a00 	mov.w	sl, #0
 8005e3a:	6123      	str	r3, [r4, #16]
 8005e3c:	f02b 0304 	bic.w	r3, fp, #4
 8005e40:	6023      	str	r3, [r4, #0]
 8005e42:	4633      	mov	r3, r6
 8005e44:	4621      	mov	r1, r4
 8005e46:	4628      	mov	r0, r5
 8005e48:	9700      	str	r7, [sp, #0]
 8005e4a:	aa0f      	add	r2, sp, #60	; 0x3c
 8005e4c:	f000 f9d4 	bl	80061f8 <_printf_common>
 8005e50:	3001      	adds	r0, #1
 8005e52:	f040 8090 	bne.w	8005f76 <_printf_float+0x1d6>
 8005e56:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5a:	b011      	add	sp, #68	; 0x44
 8005e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e60:	4642      	mov	r2, r8
 8005e62:	4653      	mov	r3, sl
 8005e64:	4640      	mov	r0, r8
 8005e66:	4651      	mov	r1, sl
 8005e68:	f7fa fdda 	bl	8000a20 <__aeabi_dcmpun>
 8005e6c:	b148      	cbz	r0, 8005e82 <_printf_float+0xe2>
 8005e6e:	f1ba 0f00 	cmp.w	sl, #0
 8005e72:	bfb8      	it	lt
 8005e74:	232d      	movlt	r3, #45	; 0x2d
 8005e76:	4880      	ldr	r0, [pc, #512]	; (8006078 <_printf_float+0x2d8>)
 8005e78:	bfb8      	it	lt
 8005e7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e7e:	4b7f      	ldr	r3, [pc, #508]	; (800607c <_printf_float+0x2dc>)
 8005e80:	e7d3      	b.n	8005e2a <_printf_float+0x8a>
 8005e82:	6863      	ldr	r3, [r4, #4]
 8005e84:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	d142      	bne.n	8005f12 <_printf_float+0x172>
 8005e8c:	2306      	movs	r3, #6
 8005e8e:	6063      	str	r3, [r4, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	9206      	str	r2, [sp, #24]
 8005e94:	aa0e      	add	r2, sp, #56	; 0x38
 8005e96:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005e9a:	aa0d      	add	r2, sp, #52	; 0x34
 8005e9c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005ea0:	9203      	str	r2, [sp, #12]
 8005ea2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005ea6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005eaa:	6023      	str	r3, [r4, #0]
 8005eac:	6863      	ldr	r3, [r4, #4]
 8005eae:	4642      	mov	r2, r8
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	4653      	mov	r3, sl
 8005eb6:	910b      	str	r1, [sp, #44]	; 0x2c
 8005eb8:	f7ff fed4 	bl	8005c64 <__cvt>
 8005ebc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ebe:	4680      	mov	r8, r0
 8005ec0:	2947      	cmp	r1, #71	; 0x47
 8005ec2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ec4:	d108      	bne.n	8005ed8 <_printf_float+0x138>
 8005ec6:	1cc8      	adds	r0, r1, #3
 8005ec8:	db02      	blt.n	8005ed0 <_printf_float+0x130>
 8005eca:	6863      	ldr	r3, [r4, #4]
 8005ecc:	4299      	cmp	r1, r3
 8005ece:	dd40      	ble.n	8005f52 <_printf_float+0x1b2>
 8005ed0:	f1a9 0902 	sub.w	r9, r9, #2
 8005ed4:	fa5f f989 	uxtb.w	r9, r9
 8005ed8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005edc:	d81f      	bhi.n	8005f1e <_printf_float+0x17e>
 8005ede:	464a      	mov	r2, r9
 8005ee0:	3901      	subs	r1, #1
 8005ee2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ee6:	910d      	str	r1, [sp, #52]	; 0x34
 8005ee8:	f7ff ff1b 	bl	8005d22 <__exponent>
 8005eec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005eee:	4682      	mov	sl, r0
 8005ef0:	1813      	adds	r3, r2, r0
 8005ef2:	2a01      	cmp	r2, #1
 8005ef4:	6123      	str	r3, [r4, #16]
 8005ef6:	dc02      	bgt.n	8005efe <_printf_float+0x15e>
 8005ef8:	6822      	ldr	r2, [r4, #0]
 8005efa:	07d2      	lsls	r2, r2, #31
 8005efc:	d501      	bpl.n	8005f02 <_printf_float+0x162>
 8005efe:	3301      	adds	r3, #1
 8005f00:	6123      	str	r3, [r4, #16]
 8005f02:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d09b      	beq.n	8005e42 <_printf_float+0xa2>
 8005f0a:	232d      	movs	r3, #45	; 0x2d
 8005f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f10:	e797      	b.n	8005e42 <_printf_float+0xa2>
 8005f12:	2947      	cmp	r1, #71	; 0x47
 8005f14:	d1bc      	bne.n	8005e90 <_printf_float+0xf0>
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1ba      	bne.n	8005e90 <_printf_float+0xf0>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e7b7      	b.n	8005e8e <_printf_float+0xee>
 8005f1e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005f22:	d118      	bne.n	8005f56 <_printf_float+0x1b6>
 8005f24:	2900      	cmp	r1, #0
 8005f26:	6863      	ldr	r3, [r4, #4]
 8005f28:	dd0b      	ble.n	8005f42 <_printf_float+0x1a2>
 8005f2a:	6121      	str	r1, [r4, #16]
 8005f2c:	b913      	cbnz	r3, 8005f34 <_printf_float+0x194>
 8005f2e:	6822      	ldr	r2, [r4, #0]
 8005f30:	07d0      	lsls	r0, r2, #31
 8005f32:	d502      	bpl.n	8005f3a <_printf_float+0x19a>
 8005f34:	3301      	adds	r3, #1
 8005f36:	440b      	add	r3, r1
 8005f38:	6123      	str	r3, [r4, #16]
 8005f3a:	f04f 0a00 	mov.w	sl, #0
 8005f3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f40:	e7df      	b.n	8005f02 <_printf_float+0x162>
 8005f42:	b913      	cbnz	r3, 8005f4a <_printf_float+0x1aa>
 8005f44:	6822      	ldr	r2, [r4, #0]
 8005f46:	07d2      	lsls	r2, r2, #31
 8005f48:	d501      	bpl.n	8005f4e <_printf_float+0x1ae>
 8005f4a:	3302      	adds	r3, #2
 8005f4c:	e7f4      	b.n	8005f38 <_printf_float+0x198>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e7f2      	b.n	8005f38 <_printf_float+0x198>
 8005f52:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005f56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f58:	4299      	cmp	r1, r3
 8005f5a:	db05      	blt.n	8005f68 <_printf_float+0x1c8>
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	6121      	str	r1, [r4, #16]
 8005f60:	07d8      	lsls	r0, r3, #31
 8005f62:	d5ea      	bpl.n	8005f3a <_printf_float+0x19a>
 8005f64:	1c4b      	adds	r3, r1, #1
 8005f66:	e7e7      	b.n	8005f38 <_printf_float+0x198>
 8005f68:	2900      	cmp	r1, #0
 8005f6a:	bfcc      	ite	gt
 8005f6c:	2201      	movgt	r2, #1
 8005f6e:	f1c1 0202 	rsble	r2, r1, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	e7e0      	b.n	8005f38 <_printf_float+0x198>
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	055a      	lsls	r2, r3, #21
 8005f7a:	d407      	bmi.n	8005f8c <_printf_float+0x1ec>
 8005f7c:	6923      	ldr	r3, [r4, #16]
 8005f7e:	4642      	mov	r2, r8
 8005f80:	4631      	mov	r1, r6
 8005f82:	4628      	mov	r0, r5
 8005f84:	47b8      	blx	r7
 8005f86:	3001      	adds	r0, #1
 8005f88:	d12b      	bne.n	8005fe2 <_printf_float+0x242>
 8005f8a:	e764      	b.n	8005e56 <_printf_float+0xb6>
 8005f8c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005f90:	f240 80dd 	bls.w	800614e <_printf_float+0x3ae>
 8005f94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f7fa fd0e 	bl	80009bc <__aeabi_dcmpeq>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d033      	beq.n	800600c <_printf_float+0x26c>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	4628      	mov	r0, r5
 8005faa:	4a35      	ldr	r2, [pc, #212]	; (8006080 <_printf_float+0x2e0>)
 8005fac:	47b8      	blx	r7
 8005fae:	3001      	adds	r0, #1
 8005fb0:	f43f af51 	beq.w	8005e56 <_printf_float+0xb6>
 8005fb4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	db02      	blt.n	8005fc2 <_printf_float+0x222>
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	07d8      	lsls	r0, r3, #31
 8005fc0:	d50f      	bpl.n	8005fe2 <_printf_float+0x242>
 8005fc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	4628      	mov	r0, r5
 8005fca:	47b8      	blx	r7
 8005fcc:	3001      	adds	r0, #1
 8005fce:	f43f af42 	beq.w	8005e56 <_printf_float+0xb6>
 8005fd2:	f04f 0800 	mov.w	r8, #0
 8005fd6:	f104 091a 	add.w	r9, r4, #26
 8005fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	4543      	cmp	r3, r8
 8005fe0:	dc09      	bgt.n	8005ff6 <_printf_float+0x256>
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	079b      	lsls	r3, r3, #30
 8005fe6:	f100 8102 	bmi.w	80061ee <_printf_float+0x44e>
 8005fea:	68e0      	ldr	r0, [r4, #12]
 8005fec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fee:	4298      	cmp	r0, r3
 8005ff0:	bfb8      	it	lt
 8005ff2:	4618      	movlt	r0, r3
 8005ff4:	e731      	b.n	8005e5a <_printf_float+0xba>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	464a      	mov	r2, r9
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	47b8      	blx	r7
 8006000:	3001      	adds	r0, #1
 8006002:	f43f af28 	beq.w	8005e56 <_printf_float+0xb6>
 8006006:	f108 0801 	add.w	r8, r8, #1
 800600a:	e7e6      	b.n	8005fda <_printf_float+0x23a>
 800600c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800600e:	2b00      	cmp	r3, #0
 8006010:	dc38      	bgt.n	8006084 <_printf_float+0x2e4>
 8006012:	2301      	movs	r3, #1
 8006014:	4631      	mov	r1, r6
 8006016:	4628      	mov	r0, r5
 8006018:	4a19      	ldr	r2, [pc, #100]	; (8006080 <_printf_float+0x2e0>)
 800601a:	47b8      	blx	r7
 800601c:	3001      	adds	r0, #1
 800601e:	f43f af1a 	beq.w	8005e56 <_printf_float+0xb6>
 8006022:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006026:	4313      	orrs	r3, r2
 8006028:	d102      	bne.n	8006030 <_printf_float+0x290>
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	07d9      	lsls	r1, r3, #31
 800602e:	d5d8      	bpl.n	8005fe2 <_printf_float+0x242>
 8006030:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006034:	4631      	mov	r1, r6
 8006036:	4628      	mov	r0, r5
 8006038:	47b8      	blx	r7
 800603a:	3001      	adds	r0, #1
 800603c:	f43f af0b 	beq.w	8005e56 <_printf_float+0xb6>
 8006040:	f04f 0900 	mov.w	r9, #0
 8006044:	f104 0a1a 	add.w	sl, r4, #26
 8006048:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800604a:	425b      	negs	r3, r3
 800604c:	454b      	cmp	r3, r9
 800604e:	dc01      	bgt.n	8006054 <_printf_float+0x2b4>
 8006050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006052:	e794      	b.n	8005f7e <_printf_float+0x1de>
 8006054:	2301      	movs	r3, #1
 8006056:	4652      	mov	r2, sl
 8006058:	4631      	mov	r1, r6
 800605a:	4628      	mov	r0, r5
 800605c:	47b8      	blx	r7
 800605e:	3001      	adds	r0, #1
 8006060:	f43f aef9 	beq.w	8005e56 <_printf_float+0xb6>
 8006064:	f109 0901 	add.w	r9, r9, #1
 8006068:	e7ee      	b.n	8006048 <_printf_float+0x2a8>
 800606a:	bf00      	nop
 800606c:	7fefffff 	.word	0x7fefffff
 8006070:	0800aa40 	.word	0x0800aa40
 8006074:	0800aa44 	.word	0x0800aa44
 8006078:	0800aa4c 	.word	0x0800aa4c
 800607c:	0800aa48 	.word	0x0800aa48
 8006080:	0800aa50 	.word	0x0800aa50
 8006084:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006086:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006088:	429a      	cmp	r2, r3
 800608a:	bfa8      	it	ge
 800608c:	461a      	movge	r2, r3
 800608e:	2a00      	cmp	r2, #0
 8006090:	4691      	mov	r9, r2
 8006092:	dc37      	bgt.n	8006104 <_printf_float+0x364>
 8006094:	f04f 0b00 	mov.w	fp, #0
 8006098:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800609c:	f104 021a 	add.w	r2, r4, #26
 80060a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80060a4:	ebaa 0309 	sub.w	r3, sl, r9
 80060a8:	455b      	cmp	r3, fp
 80060aa:	dc33      	bgt.n	8006114 <_printf_float+0x374>
 80060ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80060b0:	429a      	cmp	r2, r3
 80060b2:	db3b      	blt.n	800612c <_printf_float+0x38c>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	07da      	lsls	r2, r3, #31
 80060b8:	d438      	bmi.n	800612c <_printf_float+0x38c>
 80060ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80060be:	eba3 020a 	sub.w	r2, r3, sl
 80060c2:	eba3 0901 	sub.w	r9, r3, r1
 80060c6:	4591      	cmp	r9, r2
 80060c8:	bfa8      	it	ge
 80060ca:	4691      	movge	r9, r2
 80060cc:	f1b9 0f00 	cmp.w	r9, #0
 80060d0:	dc34      	bgt.n	800613c <_printf_float+0x39c>
 80060d2:	f04f 0800 	mov.w	r8, #0
 80060d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060da:	f104 0a1a 	add.w	sl, r4, #26
 80060de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80060e2:	1a9b      	subs	r3, r3, r2
 80060e4:	eba3 0309 	sub.w	r3, r3, r9
 80060e8:	4543      	cmp	r3, r8
 80060ea:	f77f af7a 	ble.w	8005fe2 <_printf_float+0x242>
 80060ee:	2301      	movs	r3, #1
 80060f0:	4652      	mov	r2, sl
 80060f2:	4631      	mov	r1, r6
 80060f4:	4628      	mov	r0, r5
 80060f6:	47b8      	blx	r7
 80060f8:	3001      	adds	r0, #1
 80060fa:	f43f aeac 	beq.w	8005e56 <_printf_float+0xb6>
 80060fe:	f108 0801 	add.w	r8, r8, #1
 8006102:	e7ec      	b.n	80060de <_printf_float+0x33e>
 8006104:	4613      	mov	r3, r2
 8006106:	4631      	mov	r1, r6
 8006108:	4642      	mov	r2, r8
 800610a:	4628      	mov	r0, r5
 800610c:	47b8      	blx	r7
 800610e:	3001      	adds	r0, #1
 8006110:	d1c0      	bne.n	8006094 <_printf_float+0x2f4>
 8006112:	e6a0      	b.n	8005e56 <_printf_float+0xb6>
 8006114:	2301      	movs	r3, #1
 8006116:	4631      	mov	r1, r6
 8006118:	4628      	mov	r0, r5
 800611a:	920b      	str	r2, [sp, #44]	; 0x2c
 800611c:	47b8      	blx	r7
 800611e:	3001      	adds	r0, #1
 8006120:	f43f ae99 	beq.w	8005e56 <_printf_float+0xb6>
 8006124:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006126:	f10b 0b01 	add.w	fp, fp, #1
 800612a:	e7b9      	b.n	80060a0 <_printf_float+0x300>
 800612c:	4631      	mov	r1, r6
 800612e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006132:	4628      	mov	r0, r5
 8006134:	47b8      	blx	r7
 8006136:	3001      	adds	r0, #1
 8006138:	d1bf      	bne.n	80060ba <_printf_float+0x31a>
 800613a:	e68c      	b.n	8005e56 <_printf_float+0xb6>
 800613c:	464b      	mov	r3, r9
 800613e:	4631      	mov	r1, r6
 8006140:	4628      	mov	r0, r5
 8006142:	eb08 020a 	add.w	r2, r8, sl
 8006146:	47b8      	blx	r7
 8006148:	3001      	adds	r0, #1
 800614a:	d1c2      	bne.n	80060d2 <_printf_float+0x332>
 800614c:	e683      	b.n	8005e56 <_printf_float+0xb6>
 800614e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006150:	2a01      	cmp	r2, #1
 8006152:	dc01      	bgt.n	8006158 <_printf_float+0x3b8>
 8006154:	07db      	lsls	r3, r3, #31
 8006156:	d537      	bpl.n	80061c8 <_printf_float+0x428>
 8006158:	2301      	movs	r3, #1
 800615a:	4642      	mov	r2, r8
 800615c:	4631      	mov	r1, r6
 800615e:	4628      	mov	r0, r5
 8006160:	47b8      	blx	r7
 8006162:	3001      	adds	r0, #1
 8006164:	f43f ae77 	beq.w	8005e56 <_printf_float+0xb6>
 8006168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800616c:	4631      	mov	r1, r6
 800616e:	4628      	mov	r0, r5
 8006170:	47b8      	blx	r7
 8006172:	3001      	adds	r0, #1
 8006174:	f43f ae6f 	beq.w	8005e56 <_printf_float+0xb6>
 8006178:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800617c:	2200      	movs	r2, #0
 800617e:	2300      	movs	r3, #0
 8006180:	f7fa fc1c 	bl	80009bc <__aeabi_dcmpeq>
 8006184:	b9d8      	cbnz	r0, 80061be <_printf_float+0x41e>
 8006186:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006188:	f108 0201 	add.w	r2, r8, #1
 800618c:	3b01      	subs	r3, #1
 800618e:	4631      	mov	r1, r6
 8006190:	4628      	mov	r0, r5
 8006192:	47b8      	blx	r7
 8006194:	3001      	adds	r0, #1
 8006196:	d10e      	bne.n	80061b6 <_printf_float+0x416>
 8006198:	e65d      	b.n	8005e56 <_printf_float+0xb6>
 800619a:	2301      	movs	r3, #1
 800619c:	464a      	mov	r2, r9
 800619e:	4631      	mov	r1, r6
 80061a0:	4628      	mov	r0, r5
 80061a2:	47b8      	blx	r7
 80061a4:	3001      	adds	r0, #1
 80061a6:	f43f ae56 	beq.w	8005e56 <_printf_float+0xb6>
 80061aa:	f108 0801 	add.w	r8, r8, #1
 80061ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061b0:	3b01      	subs	r3, #1
 80061b2:	4543      	cmp	r3, r8
 80061b4:	dcf1      	bgt.n	800619a <_printf_float+0x3fa>
 80061b6:	4653      	mov	r3, sl
 80061b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061bc:	e6e0      	b.n	8005f80 <_printf_float+0x1e0>
 80061be:	f04f 0800 	mov.w	r8, #0
 80061c2:	f104 091a 	add.w	r9, r4, #26
 80061c6:	e7f2      	b.n	80061ae <_printf_float+0x40e>
 80061c8:	2301      	movs	r3, #1
 80061ca:	4642      	mov	r2, r8
 80061cc:	e7df      	b.n	800618e <_printf_float+0x3ee>
 80061ce:	2301      	movs	r3, #1
 80061d0:	464a      	mov	r2, r9
 80061d2:	4631      	mov	r1, r6
 80061d4:	4628      	mov	r0, r5
 80061d6:	47b8      	blx	r7
 80061d8:	3001      	adds	r0, #1
 80061da:	f43f ae3c 	beq.w	8005e56 <_printf_float+0xb6>
 80061de:	f108 0801 	add.w	r8, r8, #1
 80061e2:	68e3      	ldr	r3, [r4, #12]
 80061e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80061e6:	1a5b      	subs	r3, r3, r1
 80061e8:	4543      	cmp	r3, r8
 80061ea:	dcf0      	bgt.n	80061ce <_printf_float+0x42e>
 80061ec:	e6fd      	b.n	8005fea <_printf_float+0x24a>
 80061ee:	f04f 0800 	mov.w	r8, #0
 80061f2:	f104 0919 	add.w	r9, r4, #25
 80061f6:	e7f4      	b.n	80061e2 <_printf_float+0x442>

080061f8 <_printf_common>:
 80061f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061fc:	4616      	mov	r6, r2
 80061fe:	4699      	mov	r9, r3
 8006200:	688a      	ldr	r2, [r1, #8]
 8006202:	690b      	ldr	r3, [r1, #16]
 8006204:	4607      	mov	r7, r0
 8006206:	4293      	cmp	r3, r2
 8006208:	bfb8      	it	lt
 800620a:	4613      	movlt	r3, r2
 800620c:	6033      	str	r3, [r6, #0]
 800620e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006212:	460c      	mov	r4, r1
 8006214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006218:	b10a      	cbz	r2, 800621e <_printf_common+0x26>
 800621a:	3301      	adds	r3, #1
 800621c:	6033      	str	r3, [r6, #0]
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	0699      	lsls	r1, r3, #26
 8006222:	bf42      	ittt	mi
 8006224:	6833      	ldrmi	r3, [r6, #0]
 8006226:	3302      	addmi	r3, #2
 8006228:	6033      	strmi	r3, [r6, #0]
 800622a:	6825      	ldr	r5, [r4, #0]
 800622c:	f015 0506 	ands.w	r5, r5, #6
 8006230:	d106      	bne.n	8006240 <_printf_common+0x48>
 8006232:	f104 0a19 	add.w	sl, r4, #25
 8006236:	68e3      	ldr	r3, [r4, #12]
 8006238:	6832      	ldr	r2, [r6, #0]
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	42ab      	cmp	r3, r5
 800623e:	dc28      	bgt.n	8006292 <_printf_common+0x9a>
 8006240:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006244:	1e13      	subs	r3, r2, #0
 8006246:	6822      	ldr	r2, [r4, #0]
 8006248:	bf18      	it	ne
 800624a:	2301      	movne	r3, #1
 800624c:	0692      	lsls	r2, r2, #26
 800624e:	d42d      	bmi.n	80062ac <_printf_common+0xb4>
 8006250:	4649      	mov	r1, r9
 8006252:	4638      	mov	r0, r7
 8006254:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006258:	47c0      	blx	r8
 800625a:	3001      	adds	r0, #1
 800625c:	d020      	beq.n	80062a0 <_printf_common+0xa8>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	68e5      	ldr	r5, [r4, #12]
 8006262:	f003 0306 	and.w	r3, r3, #6
 8006266:	2b04      	cmp	r3, #4
 8006268:	bf18      	it	ne
 800626a:	2500      	movne	r5, #0
 800626c:	6832      	ldr	r2, [r6, #0]
 800626e:	f04f 0600 	mov.w	r6, #0
 8006272:	68a3      	ldr	r3, [r4, #8]
 8006274:	bf08      	it	eq
 8006276:	1aad      	subeq	r5, r5, r2
 8006278:	6922      	ldr	r2, [r4, #16]
 800627a:	bf08      	it	eq
 800627c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006280:	4293      	cmp	r3, r2
 8006282:	bfc4      	itt	gt
 8006284:	1a9b      	subgt	r3, r3, r2
 8006286:	18ed      	addgt	r5, r5, r3
 8006288:	341a      	adds	r4, #26
 800628a:	42b5      	cmp	r5, r6
 800628c:	d11a      	bne.n	80062c4 <_printf_common+0xcc>
 800628e:	2000      	movs	r0, #0
 8006290:	e008      	b.n	80062a4 <_printf_common+0xac>
 8006292:	2301      	movs	r3, #1
 8006294:	4652      	mov	r2, sl
 8006296:	4649      	mov	r1, r9
 8006298:	4638      	mov	r0, r7
 800629a:	47c0      	blx	r8
 800629c:	3001      	adds	r0, #1
 800629e:	d103      	bne.n	80062a8 <_printf_common+0xb0>
 80062a0:	f04f 30ff 	mov.w	r0, #4294967295
 80062a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a8:	3501      	adds	r5, #1
 80062aa:	e7c4      	b.n	8006236 <_printf_common+0x3e>
 80062ac:	2030      	movs	r0, #48	; 0x30
 80062ae:	18e1      	adds	r1, r4, r3
 80062b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062ba:	4422      	add	r2, r4
 80062bc:	3302      	adds	r3, #2
 80062be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062c2:	e7c5      	b.n	8006250 <_printf_common+0x58>
 80062c4:	2301      	movs	r3, #1
 80062c6:	4622      	mov	r2, r4
 80062c8:	4649      	mov	r1, r9
 80062ca:	4638      	mov	r0, r7
 80062cc:	47c0      	blx	r8
 80062ce:	3001      	adds	r0, #1
 80062d0:	d0e6      	beq.n	80062a0 <_printf_common+0xa8>
 80062d2:	3601      	adds	r6, #1
 80062d4:	e7d9      	b.n	800628a <_printf_common+0x92>
	...

080062d8 <_printf_i>:
 80062d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062dc:	7e0f      	ldrb	r7, [r1, #24]
 80062de:	4691      	mov	r9, r2
 80062e0:	2f78      	cmp	r7, #120	; 0x78
 80062e2:	4680      	mov	r8, r0
 80062e4:	460c      	mov	r4, r1
 80062e6:	469a      	mov	sl, r3
 80062e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062ee:	d807      	bhi.n	8006300 <_printf_i+0x28>
 80062f0:	2f62      	cmp	r7, #98	; 0x62
 80062f2:	d80a      	bhi.n	800630a <_printf_i+0x32>
 80062f4:	2f00      	cmp	r7, #0
 80062f6:	f000 80d9 	beq.w	80064ac <_printf_i+0x1d4>
 80062fa:	2f58      	cmp	r7, #88	; 0x58
 80062fc:	f000 80a4 	beq.w	8006448 <_printf_i+0x170>
 8006300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006304:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006308:	e03a      	b.n	8006380 <_printf_i+0xa8>
 800630a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800630e:	2b15      	cmp	r3, #21
 8006310:	d8f6      	bhi.n	8006300 <_printf_i+0x28>
 8006312:	a101      	add	r1, pc, #4	; (adr r1, 8006318 <_printf_i+0x40>)
 8006314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006318:	08006371 	.word	0x08006371
 800631c:	08006385 	.word	0x08006385
 8006320:	08006301 	.word	0x08006301
 8006324:	08006301 	.word	0x08006301
 8006328:	08006301 	.word	0x08006301
 800632c:	08006301 	.word	0x08006301
 8006330:	08006385 	.word	0x08006385
 8006334:	08006301 	.word	0x08006301
 8006338:	08006301 	.word	0x08006301
 800633c:	08006301 	.word	0x08006301
 8006340:	08006301 	.word	0x08006301
 8006344:	08006493 	.word	0x08006493
 8006348:	080063b5 	.word	0x080063b5
 800634c:	08006475 	.word	0x08006475
 8006350:	08006301 	.word	0x08006301
 8006354:	08006301 	.word	0x08006301
 8006358:	080064b5 	.word	0x080064b5
 800635c:	08006301 	.word	0x08006301
 8006360:	080063b5 	.word	0x080063b5
 8006364:	08006301 	.word	0x08006301
 8006368:	08006301 	.word	0x08006301
 800636c:	0800647d 	.word	0x0800647d
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	1d1a      	adds	r2, r3, #4
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	602a      	str	r2, [r5, #0]
 8006378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800637c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006380:	2301      	movs	r3, #1
 8006382:	e0a4      	b.n	80064ce <_printf_i+0x1f6>
 8006384:	6820      	ldr	r0, [r4, #0]
 8006386:	6829      	ldr	r1, [r5, #0]
 8006388:	0606      	lsls	r6, r0, #24
 800638a:	f101 0304 	add.w	r3, r1, #4
 800638e:	d50a      	bpl.n	80063a6 <_printf_i+0xce>
 8006390:	680e      	ldr	r6, [r1, #0]
 8006392:	602b      	str	r3, [r5, #0]
 8006394:	2e00      	cmp	r6, #0
 8006396:	da03      	bge.n	80063a0 <_printf_i+0xc8>
 8006398:	232d      	movs	r3, #45	; 0x2d
 800639a:	4276      	negs	r6, r6
 800639c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063a0:	230a      	movs	r3, #10
 80063a2:	485e      	ldr	r0, [pc, #376]	; (800651c <_printf_i+0x244>)
 80063a4:	e019      	b.n	80063da <_printf_i+0x102>
 80063a6:	680e      	ldr	r6, [r1, #0]
 80063a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063ac:	602b      	str	r3, [r5, #0]
 80063ae:	bf18      	it	ne
 80063b0:	b236      	sxthne	r6, r6
 80063b2:	e7ef      	b.n	8006394 <_printf_i+0xbc>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	6820      	ldr	r0, [r4, #0]
 80063b8:	1d19      	adds	r1, r3, #4
 80063ba:	6029      	str	r1, [r5, #0]
 80063bc:	0601      	lsls	r1, r0, #24
 80063be:	d501      	bpl.n	80063c4 <_printf_i+0xec>
 80063c0:	681e      	ldr	r6, [r3, #0]
 80063c2:	e002      	b.n	80063ca <_printf_i+0xf2>
 80063c4:	0646      	lsls	r6, r0, #25
 80063c6:	d5fb      	bpl.n	80063c0 <_printf_i+0xe8>
 80063c8:	881e      	ldrh	r6, [r3, #0]
 80063ca:	2f6f      	cmp	r7, #111	; 0x6f
 80063cc:	bf0c      	ite	eq
 80063ce:	2308      	moveq	r3, #8
 80063d0:	230a      	movne	r3, #10
 80063d2:	4852      	ldr	r0, [pc, #328]	; (800651c <_printf_i+0x244>)
 80063d4:	2100      	movs	r1, #0
 80063d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063da:	6865      	ldr	r5, [r4, #4]
 80063dc:	2d00      	cmp	r5, #0
 80063de:	bfa8      	it	ge
 80063e0:	6821      	ldrge	r1, [r4, #0]
 80063e2:	60a5      	str	r5, [r4, #8]
 80063e4:	bfa4      	itt	ge
 80063e6:	f021 0104 	bicge.w	r1, r1, #4
 80063ea:	6021      	strge	r1, [r4, #0]
 80063ec:	b90e      	cbnz	r6, 80063f2 <_printf_i+0x11a>
 80063ee:	2d00      	cmp	r5, #0
 80063f0:	d04d      	beq.n	800648e <_printf_i+0x1b6>
 80063f2:	4615      	mov	r5, r2
 80063f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80063f8:	fb03 6711 	mls	r7, r3, r1, r6
 80063fc:	5dc7      	ldrb	r7, [r0, r7]
 80063fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006402:	4637      	mov	r7, r6
 8006404:	42bb      	cmp	r3, r7
 8006406:	460e      	mov	r6, r1
 8006408:	d9f4      	bls.n	80063f4 <_printf_i+0x11c>
 800640a:	2b08      	cmp	r3, #8
 800640c:	d10b      	bne.n	8006426 <_printf_i+0x14e>
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	07de      	lsls	r6, r3, #31
 8006412:	d508      	bpl.n	8006426 <_printf_i+0x14e>
 8006414:	6923      	ldr	r3, [r4, #16]
 8006416:	6861      	ldr	r1, [r4, #4]
 8006418:	4299      	cmp	r1, r3
 800641a:	bfde      	ittt	le
 800641c:	2330      	movle	r3, #48	; 0x30
 800641e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006422:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006426:	1b52      	subs	r2, r2, r5
 8006428:	6122      	str	r2, [r4, #16]
 800642a:	464b      	mov	r3, r9
 800642c:	4621      	mov	r1, r4
 800642e:	4640      	mov	r0, r8
 8006430:	f8cd a000 	str.w	sl, [sp]
 8006434:	aa03      	add	r2, sp, #12
 8006436:	f7ff fedf 	bl	80061f8 <_printf_common>
 800643a:	3001      	adds	r0, #1
 800643c:	d14c      	bne.n	80064d8 <_printf_i+0x200>
 800643e:	f04f 30ff 	mov.w	r0, #4294967295
 8006442:	b004      	add	sp, #16
 8006444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006448:	4834      	ldr	r0, [pc, #208]	; (800651c <_printf_i+0x244>)
 800644a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800644e:	6829      	ldr	r1, [r5, #0]
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	f851 6b04 	ldr.w	r6, [r1], #4
 8006456:	6029      	str	r1, [r5, #0]
 8006458:	061d      	lsls	r5, r3, #24
 800645a:	d514      	bpl.n	8006486 <_printf_i+0x1ae>
 800645c:	07df      	lsls	r7, r3, #31
 800645e:	bf44      	itt	mi
 8006460:	f043 0320 	orrmi.w	r3, r3, #32
 8006464:	6023      	strmi	r3, [r4, #0]
 8006466:	b91e      	cbnz	r6, 8006470 <_printf_i+0x198>
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	f023 0320 	bic.w	r3, r3, #32
 800646e:	6023      	str	r3, [r4, #0]
 8006470:	2310      	movs	r3, #16
 8006472:	e7af      	b.n	80063d4 <_printf_i+0xfc>
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	f043 0320 	orr.w	r3, r3, #32
 800647a:	6023      	str	r3, [r4, #0]
 800647c:	2378      	movs	r3, #120	; 0x78
 800647e:	4828      	ldr	r0, [pc, #160]	; (8006520 <_printf_i+0x248>)
 8006480:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006484:	e7e3      	b.n	800644e <_printf_i+0x176>
 8006486:	0659      	lsls	r1, r3, #25
 8006488:	bf48      	it	mi
 800648a:	b2b6      	uxthmi	r6, r6
 800648c:	e7e6      	b.n	800645c <_printf_i+0x184>
 800648e:	4615      	mov	r5, r2
 8006490:	e7bb      	b.n	800640a <_printf_i+0x132>
 8006492:	682b      	ldr	r3, [r5, #0]
 8006494:	6826      	ldr	r6, [r4, #0]
 8006496:	1d18      	adds	r0, r3, #4
 8006498:	6961      	ldr	r1, [r4, #20]
 800649a:	6028      	str	r0, [r5, #0]
 800649c:	0635      	lsls	r5, r6, #24
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	d501      	bpl.n	80064a6 <_printf_i+0x1ce>
 80064a2:	6019      	str	r1, [r3, #0]
 80064a4:	e002      	b.n	80064ac <_printf_i+0x1d4>
 80064a6:	0670      	lsls	r0, r6, #25
 80064a8:	d5fb      	bpl.n	80064a2 <_printf_i+0x1ca>
 80064aa:	8019      	strh	r1, [r3, #0]
 80064ac:	2300      	movs	r3, #0
 80064ae:	4615      	mov	r5, r2
 80064b0:	6123      	str	r3, [r4, #16]
 80064b2:	e7ba      	b.n	800642a <_printf_i+0x152>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	2100      	movs	r1, #0
 80064b8:	1d1a      	adds	r2, r3, #4
 80064ba:	602a      	str	r2, [r5, #0]
 80064bc:	681d      	ldr	r5, [r3, #0]
 80064be:	6862      	ldr	r2, [r4, #4]
 80064c0:	4628      	mov	r0, r5
 80064c2:	f002 fe8b 	bl	80091dc <memchr>
 80064c6:	b108      	cbz	r0, 80064cc <_printf_i+0x1f4>
 80064c8:	1b40      	subs	r0, r0, r5
 80064ca:	6060      	str	r0, [r4, #4]
 80064cc:	6863      	ldr	r3, [r4, #4]
 80064ce:	6123      	str	r3, [r4, #16]
 80064d0:	2300      	movs	r3, #0
 80064d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064d6:	e7a8      	b.n	800642a <_printf_i+0x152>
 80064d8:	462a      	mov	r2, r5
 80064da:	4649      	mov	r1, r9
 80064dc:	4640      	mov	r0, r8
 80064de:	6923      	ldr	r3, [r4, #16]
 80064e0:	47d0      	blx	sl
 80064e2:	3001      	adds	r0, #1
 80064e4:	d0ab      	beq.n	800643e <_printf_i+0x166>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	079b      	lsls	r3, r3, #30
 80064ea:	d413      	bmi.n	8006514 <_printf_i+0x23c>
 80064ec:	68e0      	ldr	r0, [r4, #12]
 80064ee:	9b03      	ldr	r3, [sp, #12]
 80064f0:	4298      	cmp	r0, r3
 80064f2:	bfb8      	it	lt
 80064f4:	4618      	movlt	r0, r3
 80064f6:	e7a4      	b.n	8006442 <_printf_i+0x16a>
 80064f8:	2301      	movs	r3, #1
 80064fa:	4632      	mov	r2, r6
 80064fc:	4649      	mov	r1, r9
 80064fe:	4640      	mov	r0, r8
 8006500:	47d0      	blx	sl
 8006502:	3001      	adds	r0, #1
 8006504:	d09b      	beq.n	800643e <_printf_i+0x166>
 8006506:	3501      	adds	r5, #1
 8006508:	68e3      	ldr	r3, [r4, #12]
 800650a:	9903      	ldr	r1, [sp, #12]
 800650c:	1a5b      	subs	r3, r3, r1
 800650e:	42ab      	cmp	r3, r5
 8006510:	dcf2      	bgt.n	80064f8 <_printf_i+0x220>
 8006512:	e7eb      	b.n	80064ec <_printf_i+0x214>
 8006514:	2500      	movs	r5, #0
 8006516:	f104 0619 	add.w	r6, r4, #25
 800651a:	e7f5      	b.n	8006508 <_printf_i+0x230>
 800651c:	0800aa52 	.word	0x0800aa52
 8006520:	0800aa63 	.word	0x0800aa63

08006524 <_scanf_float>:
 8006524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006528:	b087      	sub	sp, #28
 800652a:	9303      	str	r3, [sp, #12]
 800652c:	688b      	ldr	r3, [r1, #8]
 800652e:	4617      	mov	r7, r2
 8006530:	1e5a      	subs	r2, r3, #1
 8006532:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006536:	bf85      	ittet	hi
 8006538:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800653c:	195b      	addhi	r3, r3, r5
 800653e:	2300      	movls	r3, #0
 8006540:	9302      	strhi	r3, [sp, #8]
 8006542:	bf88      	it	hi
 8006544:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006548:	468b      	mov	fp, r1
 800654a:	f04f 0500 	mov.w	r5, #0
 800654e:	bf8c      	ite	hi
 8006550:	608b      	strhi	r3, [r1, #8]
 8006552:	9302      	strls	r3, [sp, #8]
 8006554:	680b      	ldr	r3, [r1, #0]
 8006556:	4680      	mov	r8, r0
 8006558:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800655c:	f84b 3b1c 	str.w	r3, [fp], #28
 8006560:	460c      	mov	r4, r1
 8006562:	465e      	mov	r6, fp
 8006564:	46aa      	mov	sl, r5
 8006566:	46a9      	mov	r9, r5
 8006568:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800656c:	9501      	str	r5, [sp, #4]
 800656e:	68a2      	ldr	r2, [r4, #8]
 8006570:	b152      	cbz	r2, 8006588 <_scanf_float+0x64>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b4e      	cmp	r3, #78	; 0x4e
 8006578:	d864      	bhi.n	8006644 <_scanf_float+0x120>
 800657a:	2b40      	cmp	r3, #64	; 0x40
 800657c:	d83c      	bhi.n	80065f8 <_scanf_float+0xd4>
 800657e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006582:	b2c8      	uxtb	r0, r1
 8006584:	280e      	cmp	r0, #14
 8006586:	d93a      	bls.n	80065fe <_scanf_float+0xda>
 8006588:	f1b9 0f00 	cmp.w	r9, #0
 800658c:	d003      	beq.n	8006596 <_scanf_float+0x72>
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006594:	6023      	str	r3, [r4, #0]
 8006596:	f10a 3aff 	add.w	sl, sl, #4294967295
 800659a:	f1ba 0f01 	cmp.w	sl, #1
 800659e:	f200 8113 	bhi.w	80067c8 <_scanf_float+0x2a4>
 80065a2:	455e      	cmp	r6, fp
 80065a4:	f200 8105 	bhi.w	80067b2 <_scanf_float+0x28e>
 80065a8:	2501      	movs	r5, #1
 80065aa:	4628      	mov	r0, r5
 80065ac:	b007      	add	sp, #28
 80065ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80065b6:	2a0d      	cmp	r2, #13
 80065b8:	d8e6      	bhi.n	8006588 <_scanf_float+0x64>
 80065ba:	a101      	add	r1, pc, #4	; (adr r1, 80065c0 <_scanf_float+0x9c>)
 80065bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80065c0:	080066ff 	.word	0x080066ff
 80065c4:	08006589 	.word	0x08006589
 80065c8:	08006589 	.word	0x08006589
 80065cc:	08006589 	.word	0x08006589
 80065d0:	0800675f 	.word	0x0800675f
 80065d4:	08006737 	.word	0x08006737
 80065d8:	08006589 	.word	0x08006589
 80065dc:	08006589 	.word	0x08006589
 80065e0:	0800670d 	.word	0x0800670d
 80065e4:	08006589 	.word	0x08006589
 80065e8:	08006589 	.word	0x08006589
 80065ec:	08006589 	.word	0x08006589
 80065f0:	08006589 	.word	0x08006589
 80065f4:	080066c5 	.word	0x080066c5
 80065f8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80065fc:	e7db      	b.n	80065b6 <_scanf_float+0x92>
 80065fe:	290e      	cmp	r1, #14
 8006600:	d8c2      	bhi.n	8006588 <_scanf_float+0x64>
 8006602:	a001      	add	r0, pc, #4	; (adr r0, 8006608 <_scanf_float+0xe4>)
 8006604:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006608:	080066b7 	.word	0x080066b7
 800660c:	08006589 	.word	0x08006589
 8006610:	080066b7 	.word	0x080066b7
 8006614:	0800674b 	.word	0x0800674b
 8006618:	08006589 	.word	0x08006589
 800661c:	08006665 	.word	0x08006665
 8006620:	080066a1 	.word	0x080066a1
 8006624:	080066a1 	.word	0x080066a1
 8006628:	080066a1 	.word	0x080066a1
 800662c:	080066a1 	.word	0x080066a1
 8006630:	080066a1 	.word	0x080066a1
 8006634:	080066a1 	.word	0x080066a1
 8006638:	080066a1 	.word	0x080066a1
 800663c:	080066a1 	.word	0x080066a1
 8006640:	080066a1 	.word	0x080066a1
 8006644:	2b6e      	cmp	r3, #110	; 0x6e
 8006646:	d809      	bhi.n	800665c <_scanf_float+0x138>
 8006648:	2b60      	cmp	r3, #96	; 0x60
 800664a:	d8b2      	bhi.n	80065b2 <_scanf_float+0x8e>
 800664c:	2b54      	cmp	r3, #84	; 0x54
 800664e:	d077      	beq.n	8006740 <_scanf_float+0x21c>
 8006650:	2b59      	cmp	r3, #89	; 0x59
 8006652:	d199      	bne.n	8006588 <_scanf_float+0x64>
 8006654:	2d07      	cmp	r5, #7
 8006656:	d197      	bne.n	8006588 <_scanf_float+0x64>
 8006658:	2508      	movs	r5, #8
 800665a:	e029      	b.n	80066b0 <_scanf_float+0x18c>
 800665c:	2b74      	cmp	r3, #116	; 0x74
 800665e:	d06f      	beq.n	8006740 <_scanf_float+0x21c>
 8006660:	2b79      	cmp	r3, #121	; 0x79
 8006662:	e7f6      	b.n	8006652 <_scanf_float+0x12e>
 8006664:	6821      	ldr	r1, [r4, #0]
 8006666:	05c8      	lsls	r0, r1, #23
 8006668:	d51a      	bpl.n	80066a0 <_scanf_float+0x17c>
 800666a:	9b02      	ldr	r3, [sp, #8]
 800666c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006670:	6021      	str	r1, [r4, #0]
 8006672:	f109 0901 	add.w	r9, r9, #1
 8006676:	b11b      	cbz	r3, 8006680 <_scanf_float+0x15c>
 8006678:	3b01      	subs	r3, #1
 800667a:	3201      	adds	r2, #1
 800667c:	9302      	str	r3, [sp, #8]
 800667e:	60a2      	str	r2, [r4, #8]
 8006680:	68a3      	ldr	r3, [r4, #8]
 8006682:	3b01      	subs	r3, #1
 8006684:	60a3      	str	r3, [r4, #8]
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	3301      	adds	r3, #1
 800668a:	6123      	str	r3, [r4, #16]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	3b01      	subs	r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	607b      	str	r3, [r7, #4]
 8006694:	f340 8084 	ble.w	80067a0 <_scanf_float+0x27c>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	3301      	adds	r3, #1
 800669c:	603b      	str	r3, [r7, #0]
 800669e:	e766      	b.n	800656e <_scanf_float+0x4a>
 80066a0:	eb1a 0f05 	cmn.w	sl, r5
 80066a4:	f47f af70 	bne.w	8006588 <_scanf_float+0x64>
 80066a8:	6822      	ldr	r2, [r4, #0]
 80066aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80066ae:	6022      	str	r2, [r4, #0]
 80066b0:	f806 3b01 	strb.w	r3, [r6], #1
 80066b4:	e7e4      	b.n	8006680 <_scanf_float+0x15c>
 80066b6:	6822      	ldr	r2, [r4, #0]
 80066b8:	0610      	lsls	r0, r2, #24
 80066ba:	f57f af65 	bpl.w	8006588 <_scanf_float+0x64>
 80066be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066c2:	e7f4      	b.n	80066ae <_scanf_float+0x18a>
 80066c4:	f1ba 0f00 	cmp.w	sl, #0
 80066c8:	d10e      	bne.n	80066e8 <_scanf_float+0x1c4>
 80066ca:	f1b9 0f00 	cmp.w	r9, #0
 80066ce:	d10e      	bne.n	80066ee <_scanf_float+0x1ca>
 80066d0:	6822      	ldr	r2, [r4, #0]
 80066d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80066d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80066da:	d108      	bne.n	80066ee <_scanf_float+0x1ca>
 80066dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80066e0:	f04f 0a01 	mov.w	sl, #1
 80066e4:	6022      	str	r2, [r4, #0]
 80066e6:	e7e3      	b.n	80066b0 <_scanf_float+0x18c>
 80066e8:	f1ba 0f02 	cmp.w	sl, #2
 80066ec:	d055      	beq.n	800679a <_scanf_float+0x276>
 80066ee:	2d01      	cmp	r5, #1
 80066f0:	d002      	beq.n	80066f8 <_scanf_float+0x1d4>
 80066f2:	2d04      	cmp	r5, #4
 80066f4:	f47f af48 	bne.w	8006588 <_scanf_float+0x64>
 80066f8:	3501      	adds	r5, #1
 80066fa:	b2ed      	uxtb	r5, r5
 80066fc:	e7d8      	b.n	80066b0 <_scanf_float+0x18c>
 80066fe:	f1ba 0f01 	cmp.w	sl, #1
 8006702:	f47f af41 	bne.w	8006588 <_scanf_float+0x64>
 8006706:	f04f 0a02 	mov.w	sl, #2
 800670a:	e7d1      	b.n	80066b0 <_scanf_float+0x18c>
 800670c:	b97d      	cbnz	r5, 800672e <_scanf_float+0x20a>
 800670e:	f1b9 0f00 	cmp.w	r9, #0
 8006712:	f47f af3c 	bne.w	800658e <_scanf_float+0x6a>
 8006716:	6822      	ldr	r2, [r4, #0]
 8006718:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800671c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006720:	f47f af39 	bne.w	8006596 <_scanf_float+0x72>
 8006724:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006728:	2501      	movs	r5, #1
 800672a:	6022      	str	r2, [r4, #0]
 800672c:	e7c0      	b.n	80066b0 <_scanf_float+0x18c>
 800672e:	2d03      	cmp	r5, #3
 8006730:	d0e2      	beq.n	80066f8 <_scanf_float+0x1d4>
 8006732:	2d05      	cmp	r5, #5
 8006734:	e7de      	b.n	80066f4 <_scanf_float+0x1d0>
 8006736:	2d02      	cmp	r5, #2
 8006738:	f47f af26 	bne.w	8006588 <_scanf_float+0x64>
 800673c:	2503      	movs	r5, #3
 800673e:	e7b7      	b.n	80066b0 <_scanf_float+0x18c>
 8006740:	2d06      	cmp	r5, #6
 8006742:	f47f af21 	bne.w	8006588 <_scanf_float+0x64>
 8006746:	2507      	movs	r5, #7
 8006748:	e7b2      	b.n	80066b0 <_scanf_float+0x18c>
 800674a:	6822      	ldr	r2, [r4, #0]
 800674c:	0591      	lsls	r1, r2, #22
 800674e:	f57f af1b 	bpl.w	8006588 <_scanf_float+0x64>
 8006752:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006756:	6022      	str	r2, [r4, #0]
 8006758:	f8cd 9004 	str.w	r9, [sp, #4]
 800675c:	e7a8      	b.n	80066b0 <_scanf_float+0x18c>
 800675e:	6822      	ldr	r2, [r4, #0]
 8006760:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006764:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006768:	d006      	beq.n	8006778 <_scanf_float+0x254>
 800676a:	0550      	lsls	r0, r2, #21
 800676c:	f57f af0c 	bpl.w	8006588 <_scanf_float+0x64>
 8006770:	f1b9 0f00 	cmp.w	r9, #0
 8006774:	f43f af0f 	beq.w	8006596 <_scanf_float+0x72>
 8006778:	0591      	lsls	r1, r2, #22
 800677a:	bf58      	it	pl
 800677c:	9901      	ldrpl	r1, [sp, #4]
 800677e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006782:	bf58      	it	pl
 8006784:	eba9 0101 	subpl.w	r1, r9, r1
 8006788:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800678c:	f04f 0900 	mov.w	r9, #0
 8006790:	bf58      	it	pl
 8006792:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006796:	6022      	str	r2, [r4, #0]
 8006798:	e78a      	b.n	80066b0 <_scanf_float+0x18c>
 800679a:	f04f 0a03 	mov.w	sl, #3
 800679e:	e787      	b.n	80066b0 <_scanf_float+0x18c>
 80067a0:	4639      	mov	r1, r7
 80067a2:	4640      	mov	r0, r8
 80067a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80067a8:	4798      	blx	r3
 80067aa:	2800      	cmp	r0, #0
 80067ac:	f43f aedf 	beq.w	800656e <_scanf_float+0x4a>
 80067b0:	e6ea      	b.n	8006588 <_scanf_float+0x64>
 80067b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067b6:	463a      	mov	r2, r7
 80067b8:	4640      	mov	r0, r8
 80067ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067be:	4798      	blx	r3
 80067c0:	6923      	ldr	r3, [r4, #16]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	6123      	str	r3, [r4, #16]
 80067c6:	e6ec      	b.n	80065a2 <_scanf_float+0x7e>
 80067c8:	1e6b      	subs	r3, r5, #1
 80067ca:	2b06      	cmp	r3, #6
 80067cc:	d825      	bhi.n	800681a <_scanf_float+0x2f6>
 80067ce:	2d02      	cmp	r5, #2
 80067d0:	d836      	bhi.n	8006840 <_scanf_float+0x31c>
 80067d2:	455e      	cmp	r6, fp
 80067d4:	f67f aee8 	bls.w	80065a8 <_scanf_float+0x84>
 80067d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067dc:	463a      	mov	r2, r7
 80067de:	4640      	mov	r0, r8
 80067e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067e4:	4798      	blx	r3
 80067e6:	6923      	ldr	r3, [r4, #16]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	6123      	str	r3, [r4, #16]
 80067ec:	e7f1      	b.n	80067d2 <_scanf_float+0x2ae>
 80067ee:	9802      	ldr	r0, [sp, #8]
 80067f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80067f8:	463a      	mov	r2, r7
 80067fa:	9002      	str	r0, [sp, #8]
 80067fc:	4640      	mov	r0, r8
 80067fe:	4798      	blx	r3
 8006800:	6923      	ldr	r3, [r4, #16]
 8006802:	3b01      	subs	r3, #1
 8006804:	6123      	str	r3, [r4, #16]
 8006806:	f10a 3aff 	add.w	sl, sl, #4294967295
 800680a:	fa5f fa8a 	uxtb.w	sl, sl
 800680e:	f1ba 0f02 	cmp.w	sl, #2
 8006812:	d1ec      	bne.n	80067ee <_scanf_float+0x2ca>
 8006814:	3d03      	subs	r5, #3
 8006816:	b2ed      	uxtb	r5, r5
 8006818:	1b76      	subs	r6, r6, r5
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	05da      	lsls	r2, r3, #23
 800681e:	d52f      	bpl.n	8006880 <_scanf_float+0x35c>
 8006820:	055b      	lsls	r3, r3, #21
 8006822:	d510      	bpl.n	8006846 <_scanf_float+0x322>
 8006824:	455e      	cmp	r6, fp
 8006826:	f67f aebf 	bls.w	80065a8 <_scanf_float+0x84>
 800682a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800682e:	463a      	mov	r2, r7
 8006830:	4640      	mov	r0, r8
 8006832:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006836:	4798      	blx	r3
 8006838:	6923      	ldr	r3, [r4, #16]
 800683a:	3b01      	subs	r3, #1
 800683c:	6123      	str	r3, [r4, #16]
 800683e:	e7f1      	b.n	8006824 <_scanf_float+0x300>
 8006840:	46aa      	mov	sl, r5
 8006842:	9602      	str	r6, [sp, #8]
 8006844:	e7df      	b.n	8006806 <_scanf_float+0x2e2>
 8006846:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800684a:	6923      	ldr	r3, [r4, #16]
 800684c:	2965      	cmp	r1, #101	; 0x65
 800684e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006852:	f106 35ff 	add.w	r5, r6, #4294967295
 8006856:	6123      	str	r3, [r4, #16]
 8006858:	d00c      	beq.n	8006874 <_scanf_float+0x350>
 800685a:	2945      	cmp	r1, #69	; 0x45
 800685c:	d00a      	beq.n	8006874 <_scanf_float+0x350>
 800685e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006862:	463a      	mov	r2, r7
 8006864:	4640      	mov	r0, r8
 8006866:	4798      	blx	r3
 8006868:	6923      	ldr	r3, [r4, #16]
 800686a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800686e:	3b01      	subs	r3, #1
 8006870:	1eb5      	subs	r5, r6, #2
 8006872:	6123      	str	r3, [r4, #16]
 8006874:	463a      	mov	r2, r7
 8006876:	4640      	mov	r0, r8
 8006878:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800687c:	4798      	blx	r3
 800687e:	462e      	mov	r6, r5
 8006880:	6825      	ldr	r5, [r4, #0]
 8006882:	f015 0510 	ands.w	r5, r5, #16
 8006886:	d155      	bne.n	8006934 <_scanf_float+0x410>
 8006888:	7035      	strb	r5, [r6, #0]
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006894:	d11b      	bne.n	80068ce <_scanf_float+0x3aa>
 8006896:	9b01      	ldr	r3, [sp, #4]
 8006898:	454b      	cmp	r3, r9
 800689a:	eba3 0209 	sub.w	r2, r3, r9
 800689e:	d123      	bne.n	80068e8 <_scanf_float+0x3c4>
 80068a0:	2200      	movs	r2, #0
 80068a2:	4659      	mov	r1, fp
 80068a4:	4640      	mov	r0, r8
 80068a6:	f000 ff2f 	bl	8007708 <_strtod_r>
 80068aa:	6822      	ldr	r2, [r4, #0]
 80068ac:	9b03      	ldr	r3, [sp, #12]
 80068ae:	f012 0f02 	tst.w	r2, #2
 80068b2:	4606      	mov	r6, r0
 80068b4:	460f      	mov	r7, r1
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	d021      	beq.n	80068fe <_scanf_float+0x3da>
 80068ba:	1d1a      	adds	r2, r3, #4
 80068bc:	9903      	ldr	r1, [sp, #12]
 80068be:	600a      	str	r2, [r1, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	e9c3 6700 	strd	r6, r7, [r3]
 80068c6:	68e3      	ldr	r3, [r4, #12]
 80068c8:	3301      	adds	r3, #1
 80068ca:	60e3      	str	r3, [r4, #12]
 80068cc:	e66d      	b.n	80065aa <_scanf_float+0x86>
 80068ce:	9b04      	ldr	r3, [sp, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d0e5      	beq.n	80068a0 <_scanf_float+0x37c>
 80068d4:	9905      	ldr	r1, [sp, #20]
 80068d6:	230a      	movs	r3, #10
 80068d8:	462a      	mov	r2, r5
 80068da:	4640      	mov	r0, r8
 80068dc:	3101      	adds	r1, #1
 80068de:	f000 ff95 	bl	800780c <_strtol_r>
 80068e2:	9b04      	ldr	r3, [sp, #16]
 80068e4:	9e05      	ldr	r6, [sp, #20]
 80068e6:	1ac2      	subs	r2, r0, r3
 80068e8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80068ec:	429e      	cmp	r6, r3
 80068ee:	bf28      	it	cs
 80068f0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80068f4:	4630      	mov	r0, r6
 80068f6:	4910      	ldr	r1, [pc, #64]	; (8006938 <_scanf_float+0x414>)
 80068f8:	f000 f8c8 	bl	8006a8c <siprintf>
 80068fc:	e7d0      	b.n	80068a0 <_scanf_float+0x37c>
 80068fe:	f012 0f04 	tst.w	r2, #4
 8006902:	f103 0204 	add.w	r2, r3, #4
 8006906:	d1d9      	bne.n	80068bc <_scanf_float+0x398>
 8006908:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800690c:	f8cc 2000 	str.w	r2, [ip]
 8006910:	f8d3 8000 	ldr.w	r8, [r3]
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	f7fa f882 	bl	8000a20 <__aeabi_dcmpun>
 800691c:	b128      	cbz	r0, 800692a <_scanf_float+0x406>
 800691e:	4807      	ldr	r0, [pc, #28]	; (800693c <_scanf_float+0x418>)
 8006920:	f000 f8b0 	bl	8006a84 <nanf>
 8006924:	f8c8 0000 	str.w	r0, [r8]
 8006928:	e7cd      	b.n	80068c6 <_scanf_float+0x3a2>
 800692a:	4630      	mov	r0, r6
 800692c:	4639      	mov	r1, r7
 800692e:	f7fa f8d5 	bl	8000adc <__aeabi_d2f>
 8006932:	e7f7      	b.n	8006924 <_scanf_float+0x400>
 8006934:	2500      	movs	r5, #0
 8006936:	e638      	b.n	80065aa <_scanf_float+0x86>
 8006938:	0800aa74 	.word	0x0800aa74
 800693c:	0800aee8 	.word	0x0800aee8

08006940 <iprintf>:
 8006940:	b40f      	push	{r0, r1, r2, r3}
 8006942:	4b0a      	ldr	r3, [pc, #40]	; (800696c <iprintf+0x2c>)
 8006944:	b513      	push	{r0, r1, r4, lr}
 8006946:	681c      	ldr	r4, [r3, #0]
 8006948:	b124      	cbz	r4, 8006954 <iprintf+0x14>
 800694a:	69a3      	ldr	r3, [r4, #24]
 800694c:	b913      	cbnz	r3, 8006954 <iprintf+0x14>
 800694e:	4620      	mov	r0, r4
 8006950:	f001 ffba 	bl	80088c8 <__sinit>
 8006954:	ab05      	add	r3, sp, #20
 8006956:	4620      	mov	r0, r4
 8006958:	9a04      	ldr	r2, [sp, #16]
 800695a:	68a1      	ldr	r1, [r4, #8]
 800695c:	9301      	str	r3, [sp, #4]
 800695e:	f003 fb85 	bl	800a06c <_vfiprintf_r>
 8006962:	b002      	add	sp, #8
 8006964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006968:	b004      	add	sp, #16
 800696a:	4770      	bx	lr
 800696c:	20000020 	.word	0x20000020

08006970 <putchar>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	4b08      	ldr	r3, [pc, #32]	; (8006994 <putchar+0x24>)
 8006974:	4605      	mov	r5, r0
 8006976:	681c      	ldr	r4, [r3, #0]
 8006978:	b124      	cbz	r4, 8006984 <putchar+0x14>
 800697a:	69a3      	ldr	r3, [r4, #24]
 800697c:	b913      	cbnz	r3, 8006984 <putchar+0x14>
 800697e:	4620      	mov	r0, r4
 8006980:	f001 ffa2 	bl	80088c8 <__sinit>
 8006984:	4629      	mov	r1, r5
 8006986:	4620      	mov	r0, r4
 8006988:	68a2      	ldr	r2, [r4, #8]
 800698a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800698e:	f003 bc9d 	b.w	800a2cc <_putc_r>
 8006992:	bf00      	nop
 8006994:	20000020 	.word	0x20000020

08006998 <_puts_r>:
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	460e      	mov	r6, r1
 800699c:	4605      	mov	r5, r0
 800699e:	b118      	cbz	r0, 80069a8 <_puts_r+0x10>
 80069a0:	6983      	ldr	r3, [r0, #24]
 80069a2:	b90b      	cbnz	r3, 80069a8 <_puts_r+0x10>
 80069a4:	f001 ff90 	bl	80088c8 <__sinit>
 80069a8:	69ab      	ldr	r3, [r5, #24]
 80069aa:	68ac      	ldr	r4, [r5, #8]
 80069ac:	b913      	cbnz	r3, 80069b4 <_puts_r+0x1c>
 80069ae:	4628      	mov	r0, r5
 80069b0:	f001 ff8a 	bl	80088c8 <__sinit>
 80069b4:	4b2c      	ldr	r3, [pc, #176]	; (8006a68 <_puts_r+0xd0>)
 80069b6:	429c      	cmp	r4, r3
 80069b8:	d120      	bne.n	80069fc <_puts_r+0x64>
 80069ba:	686c      	ldr	r4, [r5, #4]
 80069bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069be:	07db      	lsls	r3, r3, #31
 80069c0:	d405      	bmi.n	80069ce <_puts_r+0x36>
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	0598      	lsls	r0, r3, #22
 80069c6:	d402      	bmi.n	80069ce <_puts_r+0x36>
 80069c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069ca:	f002 fb86 	bl	80090da <__retarget_lock_acquire_recursive>
 80069ce:	89a3      	ldrh	r3, [r4, #12]
 80069d0:	0719      	lsls	r1, r3, #28
 80069d2:	d51d      	bpl.n	8006a10 <_puts_r+0x78>
 80069d4:	6923      	ldr	r3, [r4, #16]
 80069d6:	b1db      	cbz	r3, 8006a10 <_puts_r+0x78>
 80069d8:	3e01      	subs	r6, #1
 80069da:	68a3      	ldr	r3, [r4, #8]
 80069dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80069e0:	3b01      	subs	r3, #1
 80069e2:	60a3      	str	r3, [r4, #8]
 80069e4:	bb39      	cbnz	r1, 8006a36 <_puts_r+0x9e>
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	da38      	bge.n	8006a5c <_puts_r+0xc4>
 80069ea:	4622      	mov	r2, r4
 80069ec:	210a      	movs	r1, #10
 80069ee:	4628      	mov	r0, r5
 80069f0:	f000 ff18 	bl	8007824 <__swbuf_r>
 80069f4:	3001      	adds	r0, #1
 80069f6:	d011      	beq.n	8006a1c <_puts_r+0x84>
 80069f8:	250a      	movs	r5, #10
 80069fa:	e011      	b.n	8006a20 <_puts_r+0x88>
 80069fc:	4b1b      	ldr	r3, [pc, #108]	; (8006a6c <_puts_r+0xd4>)
 80069fe:	429c      	cmp	r4, r3
 8006a00:	d101      	bne.n	8006a06 <_puts_r+0x6e>
 8006a02:	68ac      	ldr	r4, [r5, #8]
 8006a04:	e7da      	b.n	80069bc <_puts_r+0x24>
 8006a06:	4b1a      	ldr	r3, [pc, #104]	; (8006a70 <_puts_r+0xd8>)
 8006a08:	429c      	cmp	r4, r3
 8006a0a:	bf08      	it	eq
 8006a0c:	68ec      	ldreq	r4, [r5, #12]
 8006a0e:	e7d5      	b.n	80069bc <_puts_r+0x24>
 8006a10:	4621      	mov	r1, r4
 8006a12:	4628      	mov	r0, r5
 8006a14:	f000 ff58 	bl	80078c8 <__swsetup_r>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	d0dd      	beq.n	80069d8 <_puts_r+0x40>
 8006a1c:	f04f 35ff 	mov.w	r5, #4294967295
 8006a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a22:	07da      	lsls	r2, r3, #31
 8006a24:	d405      	bmi.n	8006a32 <_puts_r+0x9a>
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	059b      	lsls	r3, r3, #22
 8006a2a:	d402      	bmi.n	8006a32 <_puts_r+0x9a>
 8006a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a2e:	f002 fb55 	bl	80090dc <__retarget_lock_release_recursive>
 8006a32:	4628      	mov	r0, r5
 8006a34:	bd70      	pop	{r4, r5, r6, pc}
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	da04      	bge.n	8006a44 <_puts_r+0xac>
 8006a3a:	69a2      	ldr	r2, [r4, #24]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	dc06      	bgt.n	8006a4e <_puts_r+0xb6>
 8006a40:	290a      	cmp	r1, #10
 8006a42:	d004      	beq.n	8006a4e <_puts_r+0xb6>
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	6022      	str	r2, [r4, #0]
 8006a4a:	7019      	strb	r1, [r3, #0]
 8006a4c:	e7c5      	b.n	80069da <_puts_r+0x42>
 8006a4e:	4622      	mov	r2, r4
 8006a50:	4628      	mov	r0, r5
 8006a52:	f000 fee7 	bl	8007824 <__swbuf_r>
 8006a56:	3001      	adds	r0, #1
 8006a58:	d1bf      	bne.n	80069da <_puts_r+0x42>
 8006a5a:	e7df      	b.n	8006a1c <_puts_r+0x84>
 8006a5c:	250a      	movs	r5, #10
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	6022      	str	r2, [r4, #0]
 8006a64:	701d      	strb	r5, [r3, #0]
 8006a66:	e7db      	b.n	8006a20 <_puts_r+0x88>
 8006a68:	0800ac84 	.word	0x0800ac84
 8006a6c:	0800aca4 	.word	0x0800aca4
 8006a70:	0800ac64 	.word	0x0800ac64

08006a74 <puts>:
 8006a74:	4b02      	ldr	r3, [pc, #8]	; (8006a80 <puts+0xc>)
 8006a76:	4601      	mov	r1, r0
 8006a78:	6818      	ldr	r0, [r3, #0]
 8006a7a:	f7ff bf8d 	b.w	8006998 <_puts_r>
 8006a7e:	bf00      	nop
 8006a80:	20000020 	.word	0x20000020

08006a84 <nanf>:
 8006a84:	4800      	ldr	r0, [pc, #0]	; (8006a88 <nanf+0x4>)
 8006a86:	4770      	bx	lr
 8006a88:	7fc00000 	.word	0x7fc00000

08006a8c <siprintf>:
 8006a8c:	b40e      	push	{r1, r2, r3}
 8006a8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a92:	b500      	push	{lr}
 8006a94:	b09c      	sub	sp, #112	; 0x70
 8006a96:	ab1d      	add	r3, sp, #116	; 0x74
 8006a98:	9002      	str	r0, [sp, #8]
 8006a9a:	9006      	str	r0, [sp, #24]
 8006a9c:	9107      	str	r1, [sp, #28]
 8006a9e:	9104      	str	r1, [sp, #16]
 8006aa0:	4808      	ldr	r0, [pc, #32]	; (8006ac4 <siprintf+0x38>)
 8006aa2:	4909      	ldr	r1, [pc, #36]	; (8006ac8 <siprintf+0x3c>)
 8006aa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aa8:	9105      	str	r1, [sp, #20]
 8006aaa:	6800      	ldr	r0, [r0, #0]
 8006aac:	a902      	add	r1, sp, #8
 8006aae:	9301      	str	r3, [sp, #4]
 8006ab0:	f003 f9b4 	bl	8009e1c <_svfiprintf_r>
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	9b02      	ldr	r3, [sp, #8]
 8006ab8:	701a      	strb	r2, [r3, #0]
 8006aba:	b01c      	add	sp, #112	; 0x70
 8006abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ac0:	b003      	add	sp, #12
 8006ac2:	4770      	bx	lr
 8006ac4:	20000020 	.word	0x20000020
 8006ac8:	ffff0208 	.word	0xffff0208

08006acc <strncpy>:
 8006acc:	4603      	mov	r3, r0
 8006ace:	b510      	push	{r4, lr}
 8006ad0:	3901      	subs	r1, #1
 8006ad2:	b132      	cbz	r2, 8006ae2 <strncpy+0x16>
 8006ad4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006ad8:	3a01      	subs	r2, #1
 8006ada:	f803 4b01 	strb.w	r4, [r3], #1
 8006ade:	2c00      	cmp	r4, #0
 8006ae0:	d1f7      	bne.n	8006ad2 <strncpy+0x6>
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	441a      	add	r2, r3
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d100      	bne.n	8006aec <strncpy+0x20>
 8006aea:	bd10      	pop	{r4, pc}
 8006aec:	f803 1b01 	strb.w	r1, [r3], #1
 8006af0:	e7f9      	b.n	8006ae6 <strncpy+0x1a>

08006af2 <sulp>:
 8006af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af6:	460f      	mov	r7, r1
 8006af8:	4690      	mov	r8, r2
 8006afa:	f002 fefb 	bl	80098f4 <__ulp>
 8006afe:	4604      	mov	r4, r0
 8006b00:	460d      	mov	r5, r1
 8006b02:	f1b8 0f00 	cmp.w	r8, #0
 8006b06:	d011      	beq.n	8006b2c <sulp+0x3a>
 8006b08:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006b0c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	dd0b      	ble.n	8006b2c <sulp+0x3a>
 8006b14:	2400      	movs	r4, #0
 8006b16:	051b      	lsls	r3, r3, #20
 8006b18:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006b1c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006b20:	4622      	mov	r2, r4
 8006b22:	462b      	mov	r3, r5
 8006b24:	f7f9 fce2 	bl	80004ec <__aeabi_dmul>
 8006b28:	4604      	mov	r4, r0
 8006b2a:	460d      	mov	r5, r1
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	4629      	mov	r1, r5
 8006b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b34:	0000      	movs	r0, r0
	...

08006b38 <_strtod_l>:
 8006b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3c:	469b      	mov	fp, r3
 8006b3e:	2300      	movs	r3, #0
 8006b40:	b09f      	sub	sp, #124	; 0x7c
 8006b42:	931a      	str	r3, [sp, #104]	; 0x68
 8006b44:	4b9e      	ldr	r3, [pc, #632]	; (8006dc0 <_strtod_l+0x288>)
 8006b46:	4682      	mov	sl, r0
 8006b48:	681f      	ldr	r7, [r3, #0]
 8006b4a:	460e      	mov	r6, r1
 8006b4c:	4638      	mov	r0, r7
 8006b4e:	9215      	str	r2, [sp, #84]	; 0x54
 8006b50:	f7f9 fb08 	bl	8000164 <strlen>
 8006b54:	f04f 0800 	mov.w	r8, #0
 8006b58:	4604      	mov	r4, r0
 8006b5a:	f04f 0900 	mov.w	r9, #0
 8006b5e:	9619      	str	r6, [sp, #100]	; 0x64
 8006b60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b62:	781a      	ldrb	r2, [r3, #0]
 8006b64:	2a2b      	cmp	r2, #43	; 0x2b
 8006b66:	d04c      	beq.n	8006c02 <_strtod_l+0xca>
 8006b68:	d83a      	bhi.n	8006be0 <_strtod_l+0xa8>
 8006b6a:	2a0d      	cmp	r2, #13
 8006b6c:	d833      	bhi.n	8006bd6 <_strtod_l+0x9e>
 8006b6e:	2a08      	cmp	r2, #8
 8006b70:	d833      	bhi.n	8006bda <_strtod_l+0xa2>
 8006b72:	2a00      	cmp	r2, #0
 8006b74:	d03d      	beq.n	8006bf2 <_strtod_l+0xba>
 8006b76:	2300      	movs	r3, #0
 8006b78:	930a      	str	r3, [sp, #40]	; 0x28
 8006b7a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006b7c:	782b      	ldrb	r3, [r5, #0]
 8006b7e:	2b30      	cmp	r3, #48	; 0x30
 8006b80:	f040 80aa 	bne.w	8006cd8 <_strtod_l+0x1a0>
 8006b84:	786b      	ldrb	r3, [r5, #1]
 8006b86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006b8a:	2b58      	cmp	r3, #88	; 0x58
 8006b8c:	d166      	bne.n	8006c5c <_strtod_l+0x124>
 8006b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b90:	4650      	mov	r0, sl
 8006b92:	9301      	str	r3, [sp, #4]
 8006b94:	ab1a      	add	r3, sp, #104	; 0x68
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	4a8a      	ldr	r2, [pc, #552]	; (8006dc4 <_strtod_l+0x28c>)
 8006b9a:	f8cd b008 	str.w	fp, [sp, #8]
 8006b9e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006ba0:	a919      	add	r1, sp, #100	; 0x64
 8006ba2:	f001 ff97 	bl	8008ad4 <__gethex>
 8006ba6:	f010 0607 	ands.w	r6, r0, #7
 8006baa:	4604      	mov	r4, r0
 8006bac:	d005      	beq.n	8006bba <_strtod_l+0x82>
 8006bae:	2e06      	cmp	r6, #6
 8006bb0:	d129      	bne.n	8006c06 <_strtod_l+0xce>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	3501      	adds	r5, #1
 8006bb6:	9519      	str	r5, [sp, #100]	; 0x64
 8006bb8:	930a      	str	r3, [sp, #40]	; 0x28
 8006bba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f040 858a 	bne.w	80076d6 <_strtod_l+0xb9e>
 8006bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc4:	b1d3      	cbz	r3, 8006bfc <_strtod_l+0xc4>
 8006bc6:	4642      	mov	r2, r8
 8006bc8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006bcc:	4610      	mov	r0, r2
 8006bce:	4619      	mov	r1, r3
 8006bd0:	b01f      	add	sp, #124	; 0x7c
 8006bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd6:	2a20      	cmp	r2, #32
 8006bd8:	d1cd      	bne.n	8006b76 <_strtod_l+0x3e>
 8006bda:	3301      	adds	r3, #1
 8006bdc:	9319      	str	r3, [sp, #100]	; 0x64
 8006bde:	e7bf      	b.n	8006b60 <_strtod_l+0x28>
 8006be0:	2a2d      	cmp	r2, #45	; 0x2d
 8006be2:	d1c8      	bne.n	8006b76 <_strtod_l+0x3e>
 8006be4:	2201      	movs	r2, #1
 8006be6:	920a      	str	r2, [sp, #40]	; 0x28
 8006be8:	1c5a      	adds	r2, r3, #1
 8006bea:	9219      	str	r2, [sp, #100]	; 0x64
 8006bec:	785b      	ldrb	r3, [r3, #1]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1c3      	bne.n	8006b7a <_strtod_l+0x42>
 8006bf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006bf4:	9619      	str	r6, [sp, #100]	; 0x64
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f040 856b 	bne.w	80076d2 <_strtod_l+0xb9a>
 8006bfc:	4642      	mov	r2, r8
 8006bfe:	464b      	mov	r3, r9
 8006c00:	e7e4      	b.n	8006bcc <_strtod_l+0x94>
 8006c02:	2200      	movs	r2, #0
 8006c04:	e7ef      	b.n	8006be6 <_strtod_l+0xae>
 8006c06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006c08:	b13a      	cbz	r2, 8006c1a <_strtod_l+0xe2>
 8006c0a:	2135      	movs	r1, #53	; 0x35
 8006c0c:	a81c      	add	r0, sp, #112	; 0x70
 8006c0e:	f002 ff75 	bl	8009afc <__copybits>
 8006c12:	4650      	mov	r0, sl
 8006c14:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006c16:	f002 fb3d 	bl	8009294 <_Bfree>
 8006c1a:	3e01      	subs	r6, #1
 8006c1c:	2e04      	cmp	r6, #4
 8006c1e:	d806      	bhi.n	8006c2e <_strtod_l+0xf6>
 8006c20:	e8df f006 	tbb	[pc, r6]
 8006c24:	1714030a 	.word	0x1714030a
 8006c28:	0a          	.byte	0x0a
 8006c29:	00          	.byte	0x00
 8006c2a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006c2e:	0721      	lsls	r1, r4, #28
 8006c30:	d5c3      	bpl.n	8006bba <_strtod_l+0x82>
 8006c32:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006c36:	e7c0      	b.n	8006bba <_strtod_l+0x82>
 8006c38:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006c3a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006c3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006c42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c46:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006c4a:	e7f0      	b.n	8006c2e <_strtod_l+0xf6>
 8006c4c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006dc8 <_strtod_l+0x290>
 8006c50:	e7ed      	b.n	8006c2e <_strtod_l+0xf6>
 8006c52:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006c56:	f04f 38ff 	mov.w	r8, #4294967295
 8006c5a:	e7e8      	b.n	8006c2e <_strtod_l+0xf6>
 8006c5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006c5e:	1c5a      	adds	r2, r3, #1
 8006c60:	9219      	str	r2, [sp, #100]	; 0x64
 8006c62:	785b      	ldrb	r3, [r3, #1]
 8006c64:	2b30      	cmp	r3, #48	; 0x30
 8006c66:	d0f9      	beq.n	8006c5c <_strtod_l+0x124>
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0a6      	beq.n	8006bba <_strtod_l+0x82>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	9307      	str	r3, [sp, #28]
 8006c70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006c72:	220a      	movs	r2, #10
 8006c74:	9308      	str	r3, [sp, #32]
 8006c76:	2300      	movs	r3, #0
 8006c78:	469b      	mov	fp, r3
 8006c7a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006c7e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006c80:	7805      	ldrb	r5, [r0, #0]
 8006c82:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006c86:	b2d9      	uxtb	r1, r3
 8006c88:	2909      	cmp	r1, #9
 8006c8a:	d927      	bls.n	8006cdc <_strtod_l+0x1a4>
 8006c8c:	4622      	mov	r2, r4
 8006c8e:	4639      	mov	r1, r7
 8006c90:	f003 fbbd 	bl	800a40e <strncmp>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d033      	beq.n	8006d00 <_strtod_l+0x1c8>
 8006c98:	2000      	movs	r0, #0
 8006c9a:	462a      	mov	r2, r5
 8006c9c:	465c      	mov	r4, fp
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	9004      	str	r0, [sp, #16]
 8006ca2:	2a65      	cmp	r2, #101	; 0x65
 8006ca4:	d001      	beq.n	8006caa <_strtod_l+0x172>
 8006ca6:	2a45      	cmp	r2, #69	; 0x45
 8006ca8:	d114      	bne.n	8006cd4 <_strtod_l+0x19c>
 8006caa:	b91c      	cbnz	r4, 8006cb4 <_strtod_l+0x17c>
 8006cac:	9a07      	ldr	r2, [sp, #28]
 8006cae:	4302      	orrs	r2, r0
 8006cb0:	d09f      	beq.n	8006bf2 <_strtod_l+0xba>
 8006cb2:	2400      	movs	r4, #0
 8006cb4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006cb6:	1c72      	adds	r2, r6, #1
 8006cb8:	9219      	str	r2, [sp, #100]	; 0x64
 8006cba:	7872      	ldrb	r2, [r6, #1]
 8006cbc:	2a2b      	cmp	r2, #43	; 0x2b
 8006cbe:	d079      	beq.n	8006db4 <_strtod_l+0x27c>
 8006cc0:	2a2d      	cmp	r2, #45	; 0x2d
 8006cc2:	f000 8083 	beq.w	8006dcc <_strtod_l+0x294>
 8006cc6:	2700      	movs	r7, #0
 8006cc8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006ccc:	2909      	cmp	r1, #9
 8006cce:	f240 8083 	bls.w	8006dd8 <_strtod_l+0x2a0>
 8006cd2:	9619      	str	r6, [sp, #100]	; 0x64
 8006cd4:	2500      	movs	r5, #0
 8006cd6:	e09f      	b.n	8006e18 <_strtod_l+0x2e0>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	e7c8      	b.n	8006c6e <_strtod_l+0x136>
 8006cdc:	f1bb 0f08 	cmp.w	fp, #8
 8006ce0:	bfd5      	itete	le
 8006ce2:	9906      	ldrle	r1, [sp, #24]
 8006ce4:	9905      	ldrgt	r1, [sp, #20]
 8006ce6:	fb02 3301 	mlale	r3, r2, r1, r3
 8006cea:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006cee:	f100 0001 	add.w	r0, r0, #1
 8006cf2:	bfd4      	ite	le
 8006cf4:	9306      	strle	r3, [sp, #24]
 8006cf6:	9305      	strgt	r3, [sp, #20]
 8006cf8:	f10b 0b01 	add.w	fp, fp, #1
 8006cfc:	9019      	str	r0, [sp, #100]	; 0x64
 8006cfe:	e7be      	b.n	8006c7e <_strtod_l+0x146>
 8006d00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d02:	191a      	adds	r2, r3, r4
 8006d04:	9219      	str	r2, [sp, #100]	; 0x64
 8006d06:	5d1a      	ldrb	r2, [r3, r4]
 8006d08:	f1bb 0f00 	cmp.w	fp, #0
 8006d0c:	d036      	beq.n	8006d7c <_strtod_l+0x244>
 8006d0e:	465c      	mov	r4, fp
 8006d10:	9004      	str	r0, [sp, #16]
 8006d12:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006d16:	2b09      	cmp	r3, #9
 8006d18:	d912      	bls.n	8006d40 <_strtod_l+0x208>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e7c1      	b.n	8006ca2 <_strtod_l+0x16a>
 8006d1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d20:	3001      	adds	r0, #1
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	9219      	str	r2, [sp, #100]	; 0x64
 8006d26:	785a      	ldrb	r2, [r3, #1]
 8006d28:	2a30      	cmp	r2, #48	; 0x30
 8006d2a:	d0f8      	beq.n	8006d1e <_strtod_l+0x1e6>
 8006d2c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	f200 84d5 	bhi.w	80076e0 <_strtod_l+0xba8>
 8006d36:	9004      	str	r0, [sp, #16]
 8006d38:	2000      	movs	r0, #0
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d3e:	9308      	str	r3, [sp, #32]
 8006d40:	3a30      	subs	r2, #48	; 0x30
 8006d42:	f100 0301 	add.w	r3, r0, #1
 8006d46:	d013      	beq.n	8006d70 <_strtod_l+0x238>
 8006d48:	9904      	ldr	r1, [sp, #16]
 8006d4a:	1905      	adds	r5, r0, r4
 8006d4c:	4419      	add	r1, r3
 8006d4e:	9104      	str	r1, [sp, #16]
 8006d50:	4623      	mov	r3, r4
 8006d52:	210a      	movs	r1, #10
 8006d54:	42ab      	cmp	r3, r5
 8006d56:	d113      	bne.n	8006d80 <_strtod_l+0x248>
 8006d58:	1823      	adds	r3, r4, r0
 8006d5a:	2b08      	cmp	r3, #8
 8006d5c:	f104 0401 	add.w	r4, r4, #1
 8006d60:	4404      	add	r4, r0
 8006d62:	dc1b      	bgt.n	8006d9c <_strtod_l+0x264>
 8006d64:	230a      	movs	r3, #10
 8006d66:	9906      	ldr	r1, [sp, #24]
 8006d68:	fb03 2301 	mla	r3, r3, r1, r2
 8006d6c:	9306      	str	r3, [sp, #24]
 8006d6e:	2300      	movs	r3, #0
 8006d70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006d72:	4618      	mov	r0, r3
 8006d74:	1c51      	adds	r1, r2, #1
 8006d76:	9119      	str	r1, [sp, #100]	; 0x64
 8006d78:	7852      	ldrb	r2, [r2, #1]
 8006d7a:	e7ca      	b.n	8006d12 <_strtod_l+0x1da>
 8006d7c:	4658      	mov	r0, fp
 8006d7e:	e7d3      	b.n	8006d28 <_strtod_l+0x1f0>
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	dc04      	bgt.n	8006d8e <_strtod_l+0x256>
 8006d84:	9f06      	ldr	r7, [sp, #24]
 8006d86:	434f      	muls	r7, r1
 8006d88:	9706      	str	r7, [sp, #24]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	e7e2      	b.n	8006d54 <_strtod_l+0x21c>
 8006d8e:	1c5f      	adds	r7, r3, #1
 8006d90:	2f10      	cmp	r7, #16
 8006d92:	bfde      	ittt	le
 8006d94:	9f05      	ldrle	r7, [sp, #20]
 8006d96:	434f      	mulle	r7, r1
 8006d98:	9705      	strle	r7, [sp, #20]
 8006d9a:	e7f6      	b.n	8006d8a <_strtod_l+0x252>
 8006d9c:	2c10      	cmp	r4, #16
 8006d9e:	bfdf      	itttt	le
 8006da0:	230a      	movle	r3, #10
 8006da2:	9905      	ldrle	r1, [sp, #20]
 8006da4:	fb03 2301 	mlale	r3, r3, r1, r2
 8006da8:	9305      	strle	r3, [sp, #20]
 8006daa:	e7e0      	b.n	8006d6e <_strtod_l+0x236>
 8006dac:	2300      	movs	r3, #0
 8006dae:	9304      	str	r3, [sp, #16]
 8006db0:	2301      	movs	r3, #1
 8006db2:	e77b      	b.n	8006cac <_strtod_l+0x174>
 8006db4:	2700      	movs	r7, #0
 8006db6:	1cb2      	adds	r2, r6, #2
 8006db8:	9219      	str	r2, [sp, #100]	; 0x64
 8006dba:	78b2      	ldrb	r2, [r6, #2]
 8006dbc:	e784      	b.n	8006cc8 <_strtod_l+0x190>
 8006dbe:	bf00      	nop
 8006dc0:	0800ad2c 	.word	0x0800ad2c
 8006dc4:	0800aa7c 	.word	0x0800aa7c
 8006dc8:	7ff00000 	.word	0x7ff00000
 8006dcc:	2701      	movs	r7, #1
 8006dce:	e7f2      	b.n	8006db6 <_strtod_l+0x27e>
 8006dd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006dd2:	1c51      	adds	r1, r2, #1
 8006dd4:	9119      	str	r1, [sp, #100]	; 0x64
 8006dd6:	7852      	ldrb	r2, [r2, #1]
 8006dd8:	2a30      	cmp	r2, #48	; 0x30
 8006dda:	d0f9      	beq.n	8006dd0 <_strtod_l+0x298>
 8006ddc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006de0:	2908      	cmp	r1, #8
 8006de2:	f63f af77 	bhi.w	8006cd4 <_strtod_l+0x19c>
 8006de6:	f04f 0e0a 	mov.w	lr, #10
 8006dea:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006dee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006df0:	9209      	str	r2, [sp, #36]	; 0x24
 8006df2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006df4:	1c51      	adds	r1, r2, #1
 8006df6:	9119      	str	r1, [sp, #100]	; 0x64
 8006df8:	7852      	ldrb	r2, [r2, #1]
 8006dfa:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006dfe:	2d09      	cmp	r5, #9
 8006e00:	d935      	bls.n	8006e6e <_strtod_l+0x336>
 8006e02:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006e04:	1b49      	subs	r1, r1, r5
 8006e06:	2908      	cmp	r1, #8
 8006e08:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006e0c:	dc02      	bgt.n	8006e14 <_strtod_l+0x2dc>
 8006e0e:	4565      	cmp	r5, ip
 8006e10:	bfa8      	it	ge
 8006e12:	4665      	movge	r5, ip
 8006e14:	b107      	cbz	r7, 8006e18 <_strtod_l+0x2e0>
 8006e16:	426d      	negs	r5, r5
 8006e18:	2c00      	cmp	r4, #0
 8006e1a:	d14c      	bne.n	8006eb6 <_strtod_l+0x37e>
 8006e1c:	9907      	ldr	r1, [sp, #28]
 8006e1e:	4301      	orrs	r1, r0
 8006e20:	f47f aecb 	bne.w	8006bba <_strtod_l+0x82>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f47f aee4 	bne.w	8006bf2 <_strtod_l+0xba>
 8006e2a:	2a69      	cmp	r2, #105	; 0x69
 8006e2c:	d026      	beq.n	8006e7c <_strtod_l+0x344>
 8006e2e:	dc23      	bgt.n	8006e78 <_strtod_l+0x340>
 8006e30:	2a49      	cmp	r2, #73	; 0x49
 8006e32:	d023      	beq.n	8006e7c <_strtod_l+0x344>
 8006e34:	2a4e      	cmp	r2, #78	; 0x4e
 8006e36:	f47f aedc 	bne.w	8006bf2 <_strtod_l+0xba>
 8006e3a:	499d      	ldr	r1, [pc, #628]	; (80070b0 <_strtod_l+0x578>)
 8006e3c:	a819      	add	r0, sp, #100	; 0x64
 8006e3e:	f002 f897 	bl	8008f70 <__match>
 8006e42:	2800      	cmp	r0, #0
 8006e44:	f43f aed5 	beq.w	8006bf2 <_strtod_l+0xba>
 8006e48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	2b28      	cmp	r3, #40	; 0x28
 8006e4e:	d12c      	bne.n	8006eaa <_strtod_l+0x372>
 8006e50:	4998      	ldr	r1, [pc, #608]	; (80070b4 <_strtod_l+0x57c>)
 8006e52:	aa1c      	add	r2, sp, #112	; 0x70
 8006e54:	a819      	add	r0, sp, #100	; 0x64
 8006e56:	f002 f89f 	bl	8008f98 <__hexnan>
 8006e5a:	2805      	cmp	r0, #5
 8006e5c:	d125      	bne.n	8006eaa <_strtod_l+0x372>
 8006e5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e60:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006e64:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006e68:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006e6c:	e6a5      	b.n	8006bba <_strtod_l+0x82>
 8006e6e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8006e72:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006e76:	e7bc      	b.n	8006df2 <_strtod_l+0x2ba>
 8006e78:	2a6e      	cmp	r2, #110	; 0x6e
 8006e7a:	e7dc      	b.n	8006e36 <_strtod_l+0x2fe>
 8006e7c:	498e      	ldr	r1, [pc, #568]	; (80070b8 <_strtod_l+0x580>)
 8006e7e:	a819      	add	r0, sp, #100	; 0x64
 8006e80:	f002 f876 	bl	8008f70 <__match>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	f43f aeb4 	beq.w	8006bf2 <_strtod_l+0xba>
 8006e8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e8c:	498b      	ldr	r1, [pc, #556]	; (80070bc <_strtod_l+0x584>)
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	a819      	add	r0, sp, #100	; 0x64
 8006e92:	9319      	str	r3, [sp, #100]	; 0x64
 8006e94:	f002 f86c 	bl	8008f70 <__match>
 8006e98:	b910      	cbnz	r0, 8006ea0 <_strtod_l+0x368>
 8006e9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	9319      	str	r3, [sp, #100]	; 0x64
 8006ea0:	f04f 0800 	mov.w	r8, #0
 8006ea4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80070c0 <_strtod_l+0x588>
 8006ea8:	e687      	b.n	8006bba <_strtod_l+0x82>
 8006eaa:	4886      	ldr	r0, [pc, #536]	; (80070c4 <_strtod_l+0x58c>)
 8006eac:	f003 fa56 	bl	800a35c <nan>
 8006eb0:	4680      	mov	r8, r0
 8006eb2:	4689      	mov	r9, r1
 8006eb4:	e681      	b.n	8006bba <_strtod_l+0x82>
 8006eb6:	9b04      	ldr	r3, [sp, #16]
 8006eb8:	f1bb 0f00 	cmp.w	fp, #0
 8006ebc:	bf08      	it	eq
 8006ebe:	46a3      	moveq	fp, r4
 8006ec0:	1aeb      	subs	r3, r5, r3
 8006ec2:	2c10      	cmp	r4, #16
 8006ec4:	9806      	ldr	r0, [sp, #24]
 8006ec6:	4626      	mov	r6, r4
 8006ec8:	9307      	str	r3, [sp, #28]
 8006eca:	bfa8      	it	ge
 8006ecc:	2610      	movge	r6, #16
 8006ece:	f7f9 fa93 	bl	80003f8 <__aeabi_ui2d>
 8006ed2:	2c09      	cmp	r4, #9
 8006ed4:	4680      	mov	r8, r0
 8006ed6:	4689      	mov	r9, r1
 8006ed8:	dd13      	ble.n	8006f02 <_strtod_l+0x3ca>
 8006eda:	4b7b      	ldr	r3, [pc, #492]	; (80070c8 <_strtod_l+0x590>)
 8006edc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006ee0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006ee4:	f7f9 fb02 	bl	80004ec <__aeabi_dmul>
 8006ee8:	4680      	mov	r8, r0
 8006eea:	9805      	ldr	r0, [sp, #20]
 8006eec:	4689      	mov	r9, r1
 8006eee:	f7f9 fa83 	bl	80003f8 <__aeabi_ui2d>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4640      	mov	r0, r8
 8006ef8:	4649      	mov	r1, r9
 8006efa:	f7f9 f941 	bl	8000180 <__adddf3>
 8006efe:	4680      	mov	r8, r0
 8006f00:	4689      	mov	r9, r1
 8006f02:	2c0f      	cmp	r4, #15
 8006f04:	dc36      	bgt.n	8006f74 <_strtod_l+0x43c>
 8006f06:	9b07      	ldr	r3, [sp, #28]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f43f ae56 	beq.w	8006bba <_strtod_l+0x82>
 8006f0e:	dd22      	ble.n	8006f56 <_strtod_l+0x41e>
 8006f10:	2b16      	cmp	r3, #22
 8006f12:	dc09      	bgt.n	8006f28 <_strtod_l+0x3f0>
 8006f14:	496c      	ldr	r1, [pc, #432]	; (80070c8 <_strtod_l+0x590>)
 8006f16:	4642      	mov	r2, r8
 8006f18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f1c:	464b      	mov	r3, r9
 8006f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f22:	f7f9 fae3 	bl	80004ec <__aeabi_dmul>
 8006f26:	e7c3      	b.n	8006eb0 <_strtod_l+0x378>
 8006f28:	9a07      	ldr	r2, [sp, #28]
 8006f2a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	db20      	blt.n	8006f74 <_strtod_l+0x43c>
 8006f32:	4d65      	ldr	r5, [pc, #404]	; (80070c8 <_strtod_l+0x590>)
 8006f34:	f1c4 040f 	rsb	r4, r4, #15
 8006f38:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006f3c:	4642      	mov	r2, r8
 8006f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f42:	464b      	mov	r3, r9
 8006f44:	f7f9 fad2 	bl	80004ec <__aeabi_dmul>
 8006f48:	9b07      	ldr	r3, [sp, #28]
 8006f4a:	1b1c      	subs	r4, r3, r4
 8006f4c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006f50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f54:	e7e5      	b.n	8006f22 <_strtod_l+0x3ea>
 8006f56:	9b07      	ldr	r3, [sp, #28]
 8006f58:	3316      	adds	r3, #22
 8006f5a:	db0b      	blt.n	8006f74 <_strtod_l+0x43c>
 8006f5c:	9b04      	ldr	r3, [sp, #16]
 8006f5e:	4640      	mov	r0, r8
 8006f60:	1b5d      	subs	r5, r3, r5
 8006f62:	4b59      	ldr	r3, [pc, #356]	; (80070c8 <_strtod_l+0x590>)
 8006f64:	4649      	mov	r1, r9
 8006f66:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006f6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f6e:	f7f9 fbe7 	bl	8000740 <__aeabi_ddiv>
 8006f72:	e79d      	b.n	8006eb0 <_strtod_l+0x378>
 8006f74:	9b07      	ldr	r3, [sp, #28]
 8006f76:	1ba6      	subs	r6, r4, r6
 8006f78:	441e      	add	r6, r3
 8006f7a:	2e00      	cmp	r6, #0
 8006f7c:	dd74      	ble.n	8007068 <_strtod_l+0x530>
 8006f7e:	f016 030f 	ands.w	r3, r6, #15
 8006f82:	d00a      	beq.n	8006f9a <_strtod_l+0x462>
 8006f84:	4950      	ldr	r1, [pc, #320]	; (80070c8 <_strtod_l+0x590>)
 8006f86:	4642      	mov	r2, r8
 8006f88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f90:	464b      	mov	r3, r9
 8006f92:	f7f9 faab 	bl	80004ec <__aeabi_dmul>
 8006f96:	4680      	mov	r8, r0
 8006f98:	4689      	mov	r9, r1
 8006f9a:	f036 060f 	bics.w	r6, r6, #15
 8006f9e:	d052      	beq.n	8007046 <_strtod_l+0x50e>
 8006fa0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006fa4:	dd27      	ble.n	8006ff6 <_strtod_l+0x4be>
 8006fa6:	f04f 0b00 	mov.w	fp, #0
 8006faa:	f8cd b010 	str.w	fp, [sp, #16]
 8006fae:	f8cd b020 	str.w	fp, [sp, #32]
 8006fb2:	f8cd b018 	str.w	fp, [sp, #24]
 8006fb6:	2322      	movs	r3, #34	; 0x22
 8006fb8:	f04f 0800 	mov.w	r8, #0
 8006fbc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80070c0 <_strtod_l+0x588>
 8006fc0:	f8ca 3000 	str.w	r3, [sl]
 8006fc4:	9b08      	ldr	r3, [sp, #32]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f43f adf7 	beq.w	8006bba <_strtod_l+0x82>
 8006fcc:	4650      	mov	r0, sl
 8006fce:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006fd0:	f002 f960 	bl	8009294 <_Bfree>
 8006fd4:	4650      	mov	r0, sl
 8006fd6:	9906      	ldr	r1, [sp, #24]
 8006fd8:	f002 f95c 	bl	8009294 <_Bfree>
 8006fdc:	4650      	mov	r0, sl
 8006fde:	9904      	ldr	r1, [sp, #16]
 8006fe0:	f002 f958 	bl	8009294 <_Bfree>
 8006fe4:	4650      	mov	r0, sl
 8006fe6:	9908      	ldr	r1, [sp, #32]
 8006fe8:	f002 f954 	bl	8009294 <_Bfree>
 8006fec:	4659      	mov	r1, fp
 8006fee:	4650      	mov	r0, sl
 8006ff0:	f002 f950 	bl	8009294 <_Bfree>
 8006ff4:	e5e1      	b.n	8006bba <_strtod_l+0x82>
 8006ff6:	4b35      	ldr	r3, [pc, #212]	; (80070cc <_strtod_l+0x594>)
 8006ff8:	4640      	mov	r0, r8
 8006ffa:	9305      	str	r3, [sp, #20]
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	4649      	mov	r1, r9
 8007000:	461f      	mov	r7, r3
 8007002:	1136      	asrs	r6, r6, #4
 8007004:	2e01      	cmp	r6, #1
 8007006:	dc21      	bgt.n	800704c <_strtod_l+0x514>
 8007008:	b10b      	cbz	r3, 800700e <_strtod_l+0x4d6>
 800700a:	4680      	mov	r8, r0
 800700c:	4689      	mov	r9, r1
 800700e:	4b2f      	ldr	r3, [pc, #188]	; (80070cc <_strtod_l+0x594>)
 8007010:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007014:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007018:	4642      	mov	r2, r8
 800701a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800701e:	464b      	mov	r3, r9
 8007020:	f7f9 fa64 	bl	80004ec <__aeabi_dmul>
 8007024:	4b26      	ldr	r3, [pc, #152]	; (80070c0 <_strtod_l+0x588>)
 8007026:	460a      	mov	r2, r1
 8007028:	400b      	ands	r3, r1
 800702a:	4929      	ldr	r1, [pc, #164]	; (80070d0 <_strtod_l+0x598>)
 800702c:	4680      	mov	r8, r0
 800702e:	428b      	cmp	r3, r1
 8007030:	d8b9      	bhi.n	8006fa6 <_strtod_l+0x46e>
 8007032:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007036:	428b      	cmp	r3, r1
 8007038:	bf86      	itte	hi
 800703a:	f04f 38ff 	movhi.w	r8, #4294967295
 800703e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80070d4 <_strtod_l+0x59c>
 8007042:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007046:	2300      	movs	r3, #0
 8007048:	9305      	str	r3, [sp, #20]
 800704a:	e07f      	b.n	800714c <_strtod_l+0x614>
 800704c:	07f2      	lsls	r2, r6, #31
 800704e:	d505      	bpl.n	800705c <_strtod_l+0x524>
 8007050:	9b05      	ldr	r3, [sp, #20]
 8007052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007056:	f7f9 fa49 	bl	80004ec <__aeabi_dmul>
 800705a:	2301      	movs	r3, #1
 800705c:	9a05      	ldr	r2, [sp, #20]
 800705e:	3701      	adds	r7, #1
 8007060:	3208      	adds	r2, #8
 8007062:	1076      	asrs	r6, r6, #1
 8007064:	9205      	str	r2, [sp, #20]
 8007066:	e7cd      	b.n	8007004 <_strtod_l+0x4cc>
 8007068:	d0ed      	beq.n	8007046 <_strtod_l+0x50e>
 800706a:	4276      	negs	r6, r6
 800706c:	f016 020f 	ands.w	r2, r6, #15
 8007070:	d00a      	beq.n	8007088 <_strtod_l+0x550>
 8007072:	4b15      	ldr	r3, [pc, #84]	; (80070c8 <_strtod_l+0x590>)
 8007074:	4640      	mov	r0, r8
 8007076:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800707a:	4649      	mov	r1, r9
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	f7f9 fb5e 	bl	8000740 <__aeabi_ddiv>
 8007084:	4680      	mov	r8, r0
 8007086:	4689      	mov	r9, r1
 8007088:	1136      	asrs	r6, r6, #4
 800708a:	d0dc      	beq.n	8007046 <_strtod_l+0x50e>
 800708c:	2e1f      	cmp	r6, #31
 800708e:	dd23      	ble.n	80070d8 <_strtod_l+0x5a0>
 8007090:	f04f 0b00 	mov.w	fp, #0
 8007094:	f8cd b010 	str.w	fp, [sp, #16]
 8007098:	f8cd b020 	str.w	fp, [sp, #32]
 800709c:	f8cd b018 	str.w	fp, [sp, #24]
 80070a0:	2322      	movs	r3, #34	; 0x22
 80070a2:	f04f 0800 	mov.w	r8, #0
 80070a6:	f04f 0900 	mov.w	r9, #0
 80070aa:	f8ca 3000 	str.w	r3, [sl]
 80070ae:	e789      	b.n	8006fc4 <_strtod_l+0x48c>
 80070b0:	0800aa4d 	.word	0x0800aa4d
 80070b4:	0800aa90 	.word	0x0800aa90
 80070b8:	0800aa45 	.word	0x0800aa45
 80070bc:	0800abd4 	.word	0x0800abd4
 80070c0:	7ff00000 	.word	0x7ff00000
 80070c4:	0800aee8 	.word	0x0800aee8
 80070c8:	0800adc8 	.word	0x0800adc8
 80070cc:	0800ada0 	.word	0x0800ada0
 80070d0:	7ca00000 	.word	0x7ca00000
 80070d4:	7fefffff 	.word	0x7fefffff
 80070d8:	f016 0310 	ands.w	r3, r6, #16
 80070dc:	bf18      	it	ne
 80070de:	236a      	movne	r3, #106	; 0x6a
 80070e0:	4640      	mov	r0, r8
 80070e2:	9305      	str	r3, [sp, #20]
 80070e4:	4649      	mov	r1, r9
 80070e6:	2300      	movs	r3, #0
 80070e8:	4fb0      	ldr	r7, [pc, #704]	; (80073ac <_strtod_l+0x874>)
 80070ea:	07f2      	lsls	r2, r6, #31
 80070ec:	d504      	bpl.n	80070f8 <_strtod_l+0x5c0>
 80070ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070f2:	f7f9 f9fb 	bl	80004ec <__aeabi_dmul>
 80070f6:	2301      	movs	r3, #1
 80070f8:	1076      	asrs	r6, r6, #1
 80070fa:	f107 0708 	add.w	r7, r7, #8
 80070fe:	d1f4      	bne.n	80070ea <_strtod_l+0x5b2>
 8007100:	b10b      	cbz	r3, 8007106 <_strtod_l+0x5ce>
 8007102:	4680      	mov	r8, r0
 8007104:	4689      	mov	r9, r1
 8007106:	9b05      	ldr	r3, [sp, #20]
 8007108:	b1c3      	cbz	r3, 800713c <_strtod_l+0x604>
 800710a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800710e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007112:	2b00      	cmp	r3, #0
 8007114:	4649      	mov	r1, r9
 8007116:	dd11      	ble.n	800713c <_strtod_l+0x604>
 8007118:	2b1f      	cmp	r3, #31
 800711a:	f340 8127 	ble.w	800736c <_strtod_l+0x834>
 800711e:	2b34      	cmp	r3, #52	; 0x34
 8007120:	bfd8      	it	le
 8007122:	f04f 33ff 	movle.w	r3, #4294967295
 8007126:	f04f 0800 	mov.w	r8, #0
 800712a:	bfcf      	iteee	gt
 800712c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007130:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007134:	fa03 f202 	lslle.w	r2, r3, r2
 8007138:	ea02 0901 	andle.w	r9, r2, r1
 800713c:	2200      	movs	r2, #0
 800713e:	2300      	movs	r3, #0
 8007140:	4640      	mov	r0, r8
 8007142:	4649      	mov	r1, r9
 8007144:	f7f9 fc3a 	bl	80009bc <__aeabi_dcmpeq>
 8007148:	2800      	cmp	r0, #0
 800714a:	d1a1      	bne.n	8007090 <_strtod_l+0x558>
 800714c:	9b06      	ldr	r3, [sp, #24]
 800714e:	465a      	mov	r2, fp
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	4650      	mov	r0, sl
 8007154:	4623      	mov	r3, r4
 8007156:	9908      	ldr	r1, [sp, #32]
 8007158:	f002 f904 	bl	8009364 <__s2b>
 800715c:	9008      	str	r0, [sp, #32]
 800715e:	2800      	cmp	r0, #0
 8007160:	f43f af21 	beq.w	8006fa6 <_strtod_l+0x46e>
 8007164:	9b04      	ldr	r3, [sp, #16]
 8007166:	f04f 0b00 	mov.w	fp, #0
 800716a:	1b5d      	subs	r5, r3, r5
 800716c:	9b07      	ldr	r3, [sp, #28]
 800716e:	f8cd b010 	str.w	fp, [sp, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	bfb4      	ite	lt
 8007176:	462b      	movlt	r3, r5
 8007178:	2300      	movge	r3, #0
 800717a:	930e      	str	r3, [sp, #56]	; 0x38
 800717c:	9b07      	ldr	r3, [sp, #28]
 800717e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007182:	9314      	str	r3, [sp, #80]	; 0x50
 8007184:	9b08      	ldr	r3, [sp, #32]
 8007186:	4650      	mov	r0, sl
 8007188:	6859      	ldr	r1, [r3, #4]
 800718a:	f002 f843 	bl	8009214 <_Balloc>
 800718e:	9006      	str	r0, [sp, #24]
 8007190:	2800      	cmp	r0, #0
 8007192:	f43f af10 	beq.w	8006fb6 <_strtod_l+0x47e>
 8007196:	9b08      	ldr	r3, [sp, #32]
 8007198:	300c      	adds	r0, #12
 800719a:	691a      	ldr	r2, [r3, #16]
 800719c:	f103 010c 	add.w	r1, r3, #12
 80071a0:	3202      	adds	r2, #2
 80071a2:	0092      	lsls	r2, r2, #2
 80071a4:	f002 f828 	bl	80091f8 <memcpy>
 80071a8:	ab1c      	add	r3, sp, #112	; 0x70
 80071aa:	9301      	str	r3, [sp, #4]
 80071ac:	ab1b      	add	r3, sp, #108	; 0x6c
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	4642      	mov	r2, r8
 80071b2:	464b      	mov	r3, r9
 80071b4:	4650      	mov	r0, sl
 80071b6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80071ba:	f002 fc15 	bl	80099e8 <__d2b>
 80071be:	901a      	str	r0, [sp, #104]	; 0x68
 80071c0:	2800      	cmp	r0, #0
 80071c2:	f43f aef8 	beq.w	8006fb6 <_strtod_l+0x47e>
 80071c6:	2101      	movs	r1, #1
 80071c8:	4650      	mov	r0, sl
 80071ca:	f002 f963 	bl	8009494 <__i2b>
 80071ce:	4603      	mov	r3, r0
 80071d0:	9004      	str	r0, [sp, #16]
 80071d2:	2800      	cmp	r0, #0
 80071d4:	f43f aeef 	beq.w	8006fb6 <_strtod_l+0x47e>
 80071d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80071da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80071dc:	2d00      	cmp	r5, #0
 80071de:	bfab      	itete	ge
 80071e0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80071e2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80071e4:	18ee      	addge	r6, r5, r3
 80071e6:	1b5c      	sublt	r4, r3, r5
 80071e8:	9b05      	ldr	r3, [sp, #20]
 80071ea:	bfa8      	it	ge
 80071ec:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80071ee:	eba5 0503 	sub.w	r5, r5, r3
 80071f2:	4415      	add	r5, r2
 80071f4:	4b6e      	ldr	r3, [pc, #440]	; (80073b0 <_strtod_l+0x878>)
 80071f6:	f105 35ff 	add.w	r5, r5, #4294967295
 80071fa:	bfb8      	it	lt
 80071fc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80071fe:	429d      	cmp	r5, r3
 8007200:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007204:	f280 80c4 	bge.w	8007390 <_strtod_l+0x858>
 8007208:	1b5b      	subs	r3, r3, r5
 800720a:	2b1f      	cmp	r3, #31
 800720c:	f04f 0701 	mov.w	r7, #1
 8007210:	eba2 0203 	sub.w	r2, r2, r3
 8007214:	f300 80b1 	bgt.w	800737a <_strtod_l+0x842>
 8007218:	2500      	movs	r5, #0
 800721a:	fa07 f303 	lsl.w	r3, r7, r3
 800721e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007220:	18b7      	adds	r7, r6, r2
 8007222:	9b05      	ldr	r3, [sp, #20]
 8007224:	42be      	cmp	r6, r7
 8007226:	4414      	add	r4, r2
 8007228:	441c      	add	r4, r3
 800722a:	4633      	mov	r3, r6
 800722c:	bfa8      	it	ge
 800722e:	463b      	movge	r3, r7
 8007230:	42a3      	cmp	r3, r4
 8007232:	bfa8      	it	ge
 8007234:	4623      	movge	r3, r4
 8007236:	2b00      	cmp	r3, #0
 8007238:	bfc2      	ittt	gt
 800723a:	1aff      	subgt	r7, r7, r3
 800723c:	1ae4      	subgt	r4, r4, r3
 800723e:	1af6      	subgt	r6, r6, r3
 8007240:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007242:	2b00      	cmp	r3, #0
 8007244:	dd17      	ble.n	8007276 <_strtod_l+0x73e>
 8007246:	461a      	mov	r2, r3
 8007248:	4650      	mov	r0, sl
 800724a:	9904      	ldr	r1, [sp, #16]
 800724c:	f002 f9e0 	bl	8009610 <__pow5mult>
 8007250:	9004      	str	r0, [sp, #16]
 8007252:	2800      	cmp	r0, #0
 8007254:	f43f aeaf 	beq.w	8006fb6 <_strtod_l+0x47e>
 8007258:	4601      	mov	r1, r0
 800725a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800725c:	4650      	mov	r0, sl
 800725e:	f002 f92f 	bl	80094c0 <__multiply>
 8007262:	9009      	str	r0, [sp, #36]	; 0x24
 8007264:	2800      	cmp	r0, #0
 8007266:	f43f aea6 	beq.w	8006fb6 <_strtod_l+0x47e>
 800726a:	4650      	mov	r0, sl
 800726c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800726e:	f002 f811 	bl	8009294 <_Bfree>
 8007272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007274:	931a      	str	r3, [sp, #104]	; 0x68
 8007276:	2f00      	cmp	r7, #0
 8007278:	f300 808e 	bgt.w	8007398 <_strtod_l+0x860>
 800727c:	9b07      	ldr	r3, [sp, #28]
 800727e:	2b00      	cmp	r3, #0
 8007280:	dd08      	ble.n	8007294 <_strtod_l+0x75c>
 8007282:	4650      	mov	r0, sl
 8007284:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007286:	9906      	ldr	r1, [sp, #24]
 8007288:	f002 f9c2 	bl	8009610 <__pow5mult>
 800728c:	9006      	str	r0, [sp, #24]
 800728e:	2800      	cmp	r0, #0
 8007290:	f43f ae91 	beq.w	8006fb6 <_strtod_l+0x47e>
 8007294:	2c00      	cmp	r4, #0
 8007296:	dd08      	ble.n	80072aa <_strtod_l+0x772>
 8007298:	4622      	mov	r2, r4
 800729a:	4650      	mov	r0, sl
 800729c:	9906      	ldr	r1, [sp, #24]
 800729e:	f002 fa11 	bl	80096c4 <__lshift>
 80072a2:	9006      	str	r0, [sp, #24]
 80072a4:	2800      	cmp	r0, #0
 80072a6:	f43f ae86 	beq.w	8006fb6 <_strtod_l+0x47e>
 80072aa:	2e00      	cmp	r6, #0
 80072ac:	dd08      	ble.n	80072c0 <_strtod_l+0x788>
 80072ae:	4632      	mov	r2, r6
 80072b0:	4650      	mov	r0, sl
 80072b2:	9904      	ldr	r1, [sp, #16]
 80072b4:	f002 fa06 	bl	80096c4 <__lshift>
 80072b8:	9004      	str	r0, [sp, #16]
 80072ba:	2800      	cmp	r0, #0
 80072bc:	f43f ae7b 	beq.w	8006fb6 <_strtod_l+0x47e>
 80072c0:	4650      	mov	r0, sl
 80072c2:	9a06      	ldr	r2, [sp, #24]
 80072c4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80072c6:	f002 fa89 	bl	80097dc <__mdiff>
 80072ca:	4683      	mov	fp, r0
 80072cc:	2800      	cmp	r0, #0
 80072ce:	f43f ae72 	beq.w	8006fb6 <_strtod_l+0x47e>
 80072d2:	2400      	movs	r4, #0
 80072d4:	68c3      	ldr	r3, [r0, #12]
 80072d6:	9904      	ldr	r1, [sp, #16]
 80072d8:	60c4      	str	r4, [r0, #12]
 80072da:	930b      	str	r3, [sp, #44]	; 0x2c
 80072dc:	f002 fa62 	bl	80097a4 <__mcmp>
 80072e0:	42a0      	cmp	r0, r4
 80072e2:	da6b      	bge.n	80073bc <_strtod_l+0x884>
 80072e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072e6:	ea53 0308 	orrs.w	r3, r3, r8
 80072ea:	f040 8091 	bne.w	8007410 <_strtod_l+0x8d8>
 80072ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f040 808c 	bne.w	8007410 <_strtod_l+0x8d8>
 80072f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80072fc:	0d1b      	lsrs	r3, r3, #20
 80072fe:	051b      	lsls	r3, r3, #20
 8007300:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007304:	f240 8084 	bls.w	8007410 <_strtod_l+0x8d8>
 8007308:	f8db 3014 	ldr.w	r3, [fp, #20]
 800730c:	b91b      	cbnz	r3, 8007316 <_strtod_l+0x7de>
 800730e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007312:	2b01      	cmp	r3, #1
 8007314:	dd7c      	ble.n	8007410 <_strtod_l+0x8d8>
 8007316:	4659      	mov	r1, fp
 8007318:	2201      	movs	r2, #1
 800731a:	4650      	mov	r0, sl
 800731c:	f002 f9d2 	bl	80096c4 <__lshift>
 8007320:	9904      	ldr	r1, [sp, #16]
 8007322:	4683      	mov	fp, r0
 8007324:	f002 fa3e 	bl	80097a4 <__mcmp>
 8007328:	2800      	cmp	r0, #0
 800732a:	dd71      	ble.n	8007410 <_strtod_l+0x8d8>
 800732c:	9905      	ldr	r1, [sp, #20]
 800732e:	464b      	mov	r3, r9
 8007330:	4a20      	ldr	r2, [pc, #128]	; (80073b4 <_strtod_l+0x87c>)
 8007332:	2900      	cmp	r1, #0
 8007334:	f000 808c 	beq.w	8007450 <_strtod_l+0x918>
 8007338:	ea02 0109 	and.w	r1, r2, r9
 800733c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007340:	f300 8086 	bgt.w	8007450 <_strtod_l+0x918>
 8007344:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007348:	f77f aeaa 	ble.w	80070a0 <_strtod_l+0x568>
 800734c:	4640      	mov	r0, r8
 800734e:	4649      	mov	r1, r9
 8007350:	4b19      	ldr	r3, [pc, #100]	; (80073b8 <_strtod_l+0x880>)
 8007352:	2200      	movs	r2, #0
 8007354:	f7f9 f8ca 	bl	80004ec <__aeabi_dmul>
 8007358:	460b      	mov	r3, r1
 800735a:	4303      	orrs	r3, r0
 800735c:	bf08      	it	eq
 800735e:	2322      	moveq	r3, #34	; 0x22
 8007360:	4680      	mov	r8, r0
 8007362:	4689      	mov	r9, r1
 8007364:	bf08      	it	eq
 8007366:	f8ca 3000 	streq.w	r3, [sl]
 800736a:	e62f      	b.n	8006fcc <_strtod_l+0x494>
 800736c:	f04f 32ff 	mov.w	r2, #4294967295
 8007370:	fa02 f303 	lsl.w	r3, r2, r3
 8007374:	ea03 0808 	and.w	r8, r3, r8
 8007378:	e6e0      	b.n	800713c <_strtod_l+0x604>
 800737a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800737e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007382:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007386:	35e2      	adds	r5, #226	; 0xe2
 8007388:	fa07 f505 	lsl.w	r5, r7, r5
 800738c:	970f      	str	r7, [sp, #60]	; 0x3c
 800738e:	e747      	b.n	8007220 <_strtod_l+0x6e8>
 8007390:	2301      	movs	r3, #1
 8007392:	2500      	movs	r5, #0
 8007394:	930f      	str	r3, [sp, #60]	; 0x3c
 8007396:	e743      	b.n	8007220 <_strtod_l+0x6e8>
 8007398:	463a      	mov	r2, r7
 800739a:	4650      	mov	r0, sl
 800739c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800739e:	f002 f991 	bl	80096c4 <__lshift>
 80073a2:	901a      	str	r0, [sp, #104]	; 0x68
 80073a4:	2800      	cmp	r0, #0
 80073a6:	f47f af69 	bne.w	800727c <_strtod_l+0x744>
 80073aa:	e604      	b.n	8006fb6 <_strtod_l+0x47e>
 80073ac:	0800aaa8 	.word	0x0800aaa8
 80073b0:	fffffc02 	.word	0xfffffc02
 80073b4:	7ff00000 	.word	0x7ff00000
 80073b8:	39500000 	.word	0x39500000
 80073bc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80073c0:	d165      	bne.n	800748e <_strtod_l+0x956>
 80073c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073c8:	b35a      	cbz	r2, 8007422 <_strtod_l+0x8ea>
 80073ca:	4a99      	ldr	r2, [pc, #612]	; (8007630 <_strtod_l+0xaf8>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d12b      	bne.n	8007428 <_strtod_l+0x8f0>
 80073d0:	9b05      	ldr	r3, [sp, #20]
 80073d2:	4641      	mov	r1, r8
 80073d4:	b303      	cbz	r3, 8007418 <_strtod_l+0x8e0>
 80073d6:	464a      	mov	r2, r9
 80073d8:	4b96      	ldr	r3, [pc, #600]	; (8007634 <_strtod_l+0xafc>)
 80073da:	4013      	ands	r3, r2
 80073dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80073e0:	f04f 32ff 	mov.w	r2, #4294967295
 80073e4:	d81b      	bhi.n	800741e <_strtod_l+0x8e6>
 80073e6:	0d1b      	lsrs	r3, r3, #20
 80073e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80073ec:	fa02 f303 	lsl.w	r3, r2, r3
 80073f0:	4299      	cmp	r1, r3
 80073f2:	d119      	bne.n	8007428 <_strtod_l+0x8f0>
 80073f4:	4b90      	ldr	r3, [pc, #576]	; (8007638 <_strtod_l+0xb00>)
 80073f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d102      	bne.n	8007402 <_strtod_l+0x8ca>
 80073fc:	3101      	adds	r1, #1
 80073fe:	f43f adda 	beq.w	8006fb6 <_strtod_l+0x47e>
 8007402:	f04f 0800 	mov.w	r8, #0
 8007406:	4b8b      	ldr	r3, [pc, #556]	; (8007634 <_strtod_l+0xafc>)
 8007408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800740a:	401a      	ands	r2, r3
 800740c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007410:	9b05      	ldr	r3, [sp, #20]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d19a      	bne.n	800734c <_strtod_l+0x814>
 8007416:	e5d9      	b.n	8006fcc <_strtod_l+0x494>
 8007418:	f04f 33ff 	mov.w	r3, #4294967295
 800741c:	e7e8      	b.n	80073f0 <_strtod_l+0x8b8>
 800741e:	4613      	mov	r3, r2
 8007420:	e7e6      	b.n	80073f0 <_strtod_l+0x8b8>
 8007422:	ea53 0308 	orrs.w	r3, r3, r8
 8007426:	d081      	beq.n	800732c <_strtod_l+0x7f4>
 8007428:	b1e5      	cbz	r5, 8007464 <_strtod_l+0x92c>
 800742a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800742c:	421d      	tst	r5, r3
 800742e:	d0ef      	beq.n	8007410 <_strtod_l+0x8d8>
 8007430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007432:	4640      	mov	r0, r8
 8007434:	4649      	mov	r1, r9
 8007436:	9a05      	ldr	r2, [sp, #20]
 8007438:	b1c3      	cbz	r3, 800746c <_strtod_l+0x934>
 800743a:	f7ff fb5a 	bl	8006af2 <sulp>
 800743e:	4602      	mov	r2, r0
 8007440:	460b      	mov	r3, r1
 8007442:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007446:	f7f8 fe9b 	bl	8000180 <__adddf3>
 800744a:	4680      	mov	r8, r0
 800744c:	4689      	mov	r9, r1
 800744e:	e7df      	b.n	8007410 <_strtod_l+0x8d8>
 8007450:	4013      	ands	r3, r2
 8007452:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007456:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800745a:	f04f 38ff 	mov.w	r8, #4294967295
 800745e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007462:	e7d5      	b.n	8007410 <_strtod_l+0x8d8>
 8007464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007466:	ea13 0f08 	tst.w	r3, r8
 800746a:	e7e0      	b.n	800742e <_strtod_l+0x8f6>
 800746c:	f7ff fb41 	bl	8006af2 <sulp>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007478:	f7f8 fe80 	bl	800017c <__aeabi_dsub>
 800747c:	2200      	movs	r2, #0
 800747e:	2300      	movs	r3, #0
 8007480:	4680      	mov	r8, r0
 8007482:	4689      	mov	r9, r1
 8007484:	f7f9 fa9a 	bl	80009bc <__aeabi_dcmpeq>
 8007488:	2800      	cmp	r0, #0
 800748a:	d0c1      	beq.n	8007410 <_strtod_l+0x8d8>
 800748c:	e608      	b.n	80070a0 <_strtod_l+0x568>
 800748e:	4658      	mov	r0, fp
 8007490:	9904      	ldr	r1, [sp, #16]
 8007492:	f002 fb05 	bl	8009aa0 <__ratio>
 8007496:	2200      	movs	r2, #0
 8007498:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800749c:	4606      	mov	r6, r0
 800749e:	460f      	mov	r7, r1
 80074a0:	f7f9 faa0 	bl	80009e4 <__aeabi_dcmple>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d070      	beq.n	800758a <_strtod_l+0xa52>
 80074a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d042      	beq.n	8007534 <_strtod_l+0x9fc>
 80074ae:	2600      	movs	r6, #0
 80074b0:	4f62      	ldr	r7, [pc, #392]	; (800763c <_strtod_l+0xb04>)
 80074b2:	4d62      	ldr	r5, [pc, #392]	; (800763c <_strtod_l+0xb04>)
 80074b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074ba:	0d1b      	lsrs	r3, r3, #20
 80074bc:	051b      	lsls	r3, r3, #20
 80074be:	930f      	str	r3, [sp, #60]	; 0x3c
 80074c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80074c2:	4b5f      	ldr	r3, [pc, #380]	; (8007640 <_strtod_l+0xb08>)
 80074c4:	429a      	cmp	r2, r3
 80074c6:	f040 80c3 	bne.w	8007650 <_strtod_l+0xb18>
 80074ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074cc:	4640      	mov	r0, r8
 80074ce:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80074d2:	4649      	mov	r1, r9
 80074d4:	f002 fa0e 	bl	80098f4 <__ulp>
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	4630      	mov	r0, r6
 80074de:	4639      	mov	r1, r7
 80074e0:	f7f9 f804 	bl	80004ec <__aeabi_dmul>
 80074e4:	4642      	mov	r2, r8
 80074e6:	464b      	mov	r3, r9
 80074e8:	f7f8 fe4a 	bl	8000180 <__adddf3>
 80074ec:	460b      	mov	r3, r1
 80074ee:	4951      	ldr	r1, [pc, #324]	; (8007634 <_strtod_l+0xafc>)
 80074f0:	4a54      	ldr	r2, [pc, #336]	; (8007644 <_strtod_l+0xb0c>)
 80074f2:	4019      	ands	r1, r3
 80074f4:	4291      	cmp	r1, r2
 80074f6:	4680      	mov	r8, r0
 80074f8:	d95d      	bls.n	80075b6 <_strtod_l+0xa7e>
 80074fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074fc:	4b4e      	ldr	r3, [pc, #312]	; (8007638 <_strtod_l+0xb00>)
 80074fe:	429a      	cmp	r2, r3
 8007500:	d103      	bne.n	800750a <_strtod_l+0x9d2>
 8007502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007504:	3301      	adds	r3, #1
 8007506:	f43f ad56 	beq.w	8006fb6 <_strtod_l+0x47e>
 800750a:	f04f 38ff 	mov.w	r8, #4294967295
 800750e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007638 <_strtod_l+0xb00>
 8007512:	4650      	mov	r0, sl
 8007514:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007516:	f001 febd 	bl	8009294 <_Bfree>
 800751a:	4650      	mov	r0, sl
 800751c:	9906      	ldr	r1, [sp, #24]
 800751e:	f001 feb9 	bl	8009294 <_Bfree>
 8007522:	4650      	mov	r0, sl
 8007524:	9904      	ldr	r1, [sp, #16]
 8007526:	f001 feb5 	bl	8009294 <_Bfree>
 800752a:	4659      	mov	r1, fp
 800752c:	4650      	mov	r0, sl
 800752e:	f001 feb1 	bl	8009294 <_Bfree>
 8007532:	e627      	b.n	8007184 <_strtod_l+0x64c>
 8007534:	f1b8 0f00 	cmp.w	r8, #0
 8007538:	d119      	bne.n	800756e <_strtod_l+0xa36>
 800753a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800753c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007540:	b9e3      	cbnz	r3, 800757c <_strtod_l+0xa44>
 8007542:	2200      	movs	r2, #0
 8007544:	4630      	mov	r0, r6
 8007546:	4639      	mov	r1, r7
 8007548:	4b3c      	ldr	r3, [pc, #240]	; (800763c <_strtod_l+0xb04>)
 800754a:	f7f9 fa41 	bl	80009d0 <__aeabi_dcmplt>
 800754e:	b9c8      	cbnz	r0, 8007584 <_strtod_l+0xa4c>
 8007550:	2200      	movs	r2, #0
 8007552:	4630      	mov	r0, r6
 8007554:	4639      	mov	r1, r7
 8007556:	4b3c      	ldr	r3, [pc, #240]	; (8007648 <_strtod_l+0xb10>)
 8007558:	f7f8 ffc8 	bl	80004ec <__aeabi_dmul>
 800755c:	4604      	mov	r4, r0
 800755e:	460d      	mov	r5, r1
 8007560:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007564:	9416      	str	r4, [sp, #88]	; 0x58
 8007566:	9317      	str	r3, [sp, #92]	; 0x5c
 8007568:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800756c:	e7a2      	b.n	80074b4 <_strtod_l+0x97c>
 800756e:	f1b8 0f01 	cmp.w	r8, #1
 8007572:	d103      	bne.n	800757c <_strtod_l+0xa44>
 8007574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007576:	2b00      	cmp	r3, #0
 8007578:	f43f ad92 	beq.w	80070a0 <_strtod_l+0x568>
 800757c:	2600      	movs	r6, #0
 800757e:	2400      	movs	r4, #0
 8007580:	4f32      	ldr	r7, [pc, #200]	; (800764c <_strtod_l+0xb14>)
 8007582:	e796      	b.n	80074b2 <_strtod_l+0x97a>
 8007584:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007586:	4d30      	ldr	r5, [pc, #192]	; (8007648 <_strtod_l+0xb10>)
 8007588:	e7ea      	b.n	8007560 <_strtod_l+0xa28>
 800758a:	4b2f      	ldr	r3, [pc, #188]	; (8007648 <_strtod_l+0xb10>)
 800758c:	2200      	movs	r2, #0
 800758e:	4630      	mov	r0, r6
 8007590:	4639      	mov	r1, r7
 8007592:	f7f8 ffab 	bl	80004ec <__aeabi_dmul>
 8007596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007598:	4604      	mov	r4, r0
 800759a:	460d      	mov	r5, r1
 800759c:	b933      	cbnz	r3, 80075ac <_strtod_l+0xa74>
 800759e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075a2:	9010      	str	r0, [sp, #64]	; 0x40
 80075a4:	9311      	str	r3, [sp, #68]	; 0x44
 80075a6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80075aa:	e783      	b.n	80074b4 <_strtod_l+0x97c>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80075b4:	e7f7      	b.n	80075a6 <_strtod_l+0xa6e>
 80075b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80075ba:	9b05      	ldr	r3, [sp, #20]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1a8      	bne.n	8007512 <_strtod_l+0x9da>
 80075c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80075c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80075c6:	0d1b      	lsrs	r3, r3, #20
 80075c8:	051b      	lsls	r3, r3, #20
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d1a1      	bne.n	8007512 <_strtod_l+0x9da>
 80075ce:	4620      	mov	r0, r4
 80075d0:	4629      	mov	r1, r5
 80075d2:	f7f9 fbe1 	bl	8000d98 <__aeabi_d2lz>
 80075d6:	f7f8 ff5b 	bl	8000490 <__aeabi_l2d>
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	4620      	mov	r0, r4
 80075e0:	4629      	mov	r1, r5
 80075e2:	f7f8 fdcb 	bl	800017c <__aeabi_dsub>
 80075e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075ec:	ea43 0308 	orr.w	r3, r3, r8
 80075f0:	4313      	orrs	r3, r2
 80075f2:	4604      	mov	r4, r0
 80075f4:	460d      	mov	r5, r1
 80075f6:	d066      	beq.n	80076c6 <_strtod_l+0xb8e>
 80075f8:	a309      	add	r3, pc, #36	; (adr r3, 8007620 <_strtod_l+0xae8>)
 80075fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fe:	f7f9 f9e7 	bl	80009d0 <__aeabi_dcmplt>
 8007602:	2800      	cmp	r0, #0
 8007604:	f47f ace2 	bne.w	8006fcc <_strtod_l+0x494>
 8007608:	a307      	add	r3, pc, #28	; (adr r3, 8007628 <_strtod_l+0xaf0>)
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	4620      	mov	r0, r4
 8007610:	4629      	mov	r1, r5
 8007612:	f7f9 f9fb 	bl	8000a0c <__aeabi_dcmpgt>
 8007616:	2800      	cmp	r0, #0
 8007618:	f43f af7b 	beq.w	8007512 <_strtod_l+0x9da>
 800761c:	e4d6      	b.n	8006fcc <_strtod_l+0x494>
 800761e:	bf00      	nop
 8007620:	94a03595 	.word	0x94a03595
 8007624:	3fdfffff 	.word	0x3fdfffff
 8007628:	35afe535 	.word	0x35afe535
 800762c:	3fe00000 	.word	0x3fe00000
 8007630:	000fffff 	.word	0x000fffff
 8007634:	7ff00000 	.word	0x7ff00000
 8007638:	7fefffff 	.word	0x7fefffff
 800763c:	3ff00000 	.word	0x3ff00000
 8007640:	7fe00000 	.word	0x7fe00000
 8007644:	7c9fffff 	.word	0x7c9fffff
 8007648:	3fe00000 	.word	0x3fe00000
 800764c:	bff00000 	.word	0xbff00000
 8007650:	9b05      	ldr	r3, [sp, #20]
 8007652:	b313      	cbz	r3, 800769a <_strtod_l+0xb62>
 8007654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007656:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800765a:	d81e      	bhi.n	800769a <_strtod_l+0xb62>
 800765c:	a326      	add	r3, pc, #152	; (adr r3, 80076f8 <_strtod_l+0xbc0>)
 800765e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007662:	4620      	mov	r0, r4
 8007664:	4629      	mov	r1, r5
 8007666:	f7f9 f9bd 	bl	80009e4 <__aeabi_dcmple>
 800766a:	b190      	cbz	r0, 8007692 <_strtod_l+0xb5a>
 800766c:	4629      	mov	r1, r5
 800766e:	4620      	mov	r0, r4
 8007670:	f7f9 fa14 	bl	8000a9c <__aeabi_d2uiz>
 8007674:	2801      	cmp	r0, #1
 8007676:	bf38      	it	cc
 8007678:	2001      	movcc	r0, #1
 800767a:	f7f8 febd 	bl	80003f8 <__aeabi_ui2d>
 800767e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007680:	4604      	mov	r4, r0
 8007682:	460d      	mov	r5, r1
 8007684:	b9d3      	cbnz	r3, 80076bc <_strtod_l+0xb84>
 8007686:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800768a:	9012      	str	r0, [sp, #72]	; 0x48
 800768c:	9313      	str	r3, [sp, #76]	; 0x4c
 800768e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007692:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007694:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007698:	1a9f      	subs	r7, r3, r2
 800769a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800769e:	f002 f929 	bl	80098f4 <__ulp>
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	4630      	mov	r0, r6
 80076a8:	4639      	mov	r1, r7
 80076aa:	f7f8 ff1f 	bl	80004ec <__aeabi_dmul>
 80076ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80076b2:	f7f8 fd65 	bl	8000180 <__adddf3>
 80076b6:	4680      	mov	r8, r0
 80076b8:	4689      	mov	r9, r1
 80076ba:	e77e      	b.n	80075ba <_strtod_l+0xa82>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80076c4:	e7e3      	b.n	800768e <_strtod_l+0xb56>
 80076c6:	a30e      	add	r3, pc, #56	; (adr r3, 8007700 <_strtod_l+0xbc8>)
 80076c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076cc:	f7f9 f980 	bl	80009d0 <__aeabi_dcmplt>
 80076d0:	e7a1      	b.n	8007616 <_strtod_l+0xade>
 80076d2:	2300      	movs	r3, #0
 80076d4:	930a      	str	r3, [sp, #40]	; 0x28
 80076d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80076da:	6013      	str	r3, [r2, #0]
 80076dc:	f7ff ba71 	b.w	8006bc2 <_strtod_l+0x8a>
 80076e0:	2a65      	cmp	r2, #101	; 0x65
 80076e2:	f43f ab63 	beq.w	8006dac <_strtod_l+0x274>
 80076e6:	2a45      	cmp	r2, #69	; 0x45
 80076e8:	f43f ab60 	beq.w	8006dac <_strtod_l+0x274>
 80076ec:	2301      	movs	r3, #1
 80076ee:	f7ff bb95 	b.w	8006e1c <_strtod_l+0x2e4>
 80076f2:	bf00      	nop
 80076f4:	f3af 8000 	nop.w
 80076f8:	ffc00000 	.word	0xffc00000
 80076fc:	41dfffff 	.word	0x41dfffff
 8007700:	94a03595 	.word	0x94a03595
 8007704:	3fcfffff 	.word	0x3fcfffff

08007708 <_strtod_r>:
 8007708:	4b01      	ldr	r3, [pc, #4]	; (8007710 <_strtod_r+0x8>)
 800770a:	f7ff ba15 	b.w	8006b38 <_strtod_l>
 800770e:	bf00      	nop
 8007710:	20000088 	.word	0x20000088

08007714 <_strtol_l.constprop.0>:
 8007714:	2b01      	cmp	r3, #1
 8007716:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800771a:	4680      	mov	r8, r0
 800771c:	d001      	beq.n	8007722 <_strtol_l.constprop.0+0xe>
 800771e:	2b24      	cmp	r3, #36	; 0x24
 8007720:	d906      	bls.n	8007730 <_strtol_l.constprop.0+0x1c>
 8007722:	f7fe fa6d 	bl	8005c00 <__errno>
 8007726:	2316      	movs	r3, #22
 8007728:	6003      	str	r3, [r0, #0]
 800772a:	2000      	movs	r0, #0
 800772c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007730:	460d      	mov	r5, r1
 8007732:	4f35      	ldr	r7, [pc, #212]	; (8007808 <_strtol_l.constprop.0+0xf4>)
 8007734:	4628      	mov	r0, r5
 8007736:	f815 4b01 	ldrb.w	r4, [r5], #1
 800773a:	5de6      	ldrb	r6, [r4, r7]
 800773c:	f016 0608 	ands.w	r6, r6, #8
 8007740:	d1f8      	bne.n	8007734 <_strtol_l.constprop.0+0x20>
 8007742:	2c2d      	cmp	r4, #45	; 0x2d
 8007744:	d12f      	bne.n	80077a6 <_strtol_l.constprop.0+0x92>
 8007746:	2601      	movs	r6, #1
 8007748:	782c      	ldrb	r4, [r5, #0]
 800774a:	1c85      	adds	r5, r0, #2
 800774c:	2b00      	cmp	r3, #0
 800774e:	d057      	beq.n	8007800 <_strtol_l.constprop.0+0xec>
 8007750:	2b10      	cmp	r3, #16
 8007752:	d109      	bne.n	8007768 <_strtol_l.constprop.0+0x54>
 8007754:	2c30      	cmp	r4, #48	; 0x30
 8007756:	d107      	bne.n	8007768 <_strtol_l.constprop.0+0x54>
 8007758:	7828      	ldrb	r0, [r5, #0]
 800775a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800775e:	2858      	cmp	r0, #88	; 0x58
 8007760:	d149      	bne.n	80077f6 <_strtol_l.constprop.0+0xe2>
 8007762:	2310      	movs	r3, #16
 8007764:	786c      	ldrb	r4, [r5, #1]
 8007766:	3502      	adds	r5, #2
 8007768:	2700      	movs	r7, #0
 800776a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800776e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007772:	fbbe f9f3 	udiv	r9, lr, r3
 8007776:	4638      	mov	r0, r7
 8007778:	fb03 ea19 	mls	sl, r3, r9, lr
 800777c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007780:	f1bc 0f09 	cmp.w	ip, #9
 8007784:	d814      	bhi.n	80077b0 <_strtol_l.constprop.0+0x9c>
 8007786:	4664      	mov	r4, ip
 8007788:	42a3      	cmp	r3, r4
 800778a:	dd22      	ble.n	80077d2 <_strtol_l.constprop.0+0xbe>
 800778c:	2f00      	cmp	r7, #0
 800778e:	db1d      	blt.n	80077cc <_strtol_l.constprop.0+0xb8>
 8007790:	4581      	cmp	r9, r0
 8007792:	d31b      	bcc.n	80077cc <_strtol_l.constprop.0+0xb8>
 8007794:	d101      	bne.n	800779a <_strtol_l.constprop.0+0x86>
 8007796:	45a2      	cmp	sl, r4
 8007798:	db18      	blt.n	80077cc <_strtol_l.constprop.0+0xb8>
 800779a:	2701      	movs	r7, #1
 800779c:	fb00 4003 	mla	r0, r0, r3, r4
 80077a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077a4:	e7ea      	b.n	800777c <_strtol_l.constprop.0+0x68>
 80077a6:	2c2b      	cmp	r4, #43	; 0x2b
 80077a8:	bf04      	itt	eq
 80077aa:	782c      	ldrbeq	r4, [r5, #0]
 80077ac:	1c85      	addeq	r5, r0, #2
 80077ae:	e7cd      	b.n	800774c <_strtol_l.constprop.0+0x38>
 80077b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80077b4:	f1bc 0f19 	cmp.w	ip, #25
 80077b8:	d801      	bhi.n	80077be <_strtol_l.constprop.0+0xaa>
 80077ba:	3c37      	subs	r4, #55	; 0x37
 80077bc:	e7e4      	b.n	8007788 <_strtol_l.constprop.0+0x74>
 80077be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80077c2:	f1bc 0f19 	cmp.w	ip, #25
 80077c6:	d804      	bhi.n	80077d2 <_strtol_l.constprop.0+0xbe>
 80077c8:	3c57      	subs	r4, #87	; 0x57
 80077ca:	e7dd      	b.n	8007788 <_strtol_l.constprop.0+0x74>
 80077cc:	f04f 37ff 	mov.w	r7, #4294967295
 80077d0:	e7e6      	b.n	80077a0 <_strtol_l.constprop.0+0x8c>
 80077d2:	2f00      	cmp	r7, #0
 80077d4:	da07      	bge.n	80077e6 <_strtol_l.constprop.0+0xd2>
 80077d6:	2322      	movs	r3, #34	; 0x22
 80077d8:	4670      	mov	r0, lr
 80077da:	f8c8 3000 	str.w	r3, [r8]
 80077de:	2a00      	cmp	r2, #0
 80077e0:	d0a4      	beq.n	800772c <_strtol_l.constprop.0+0x18>
 80077e2:	1e69      	subs	r1, r5, #1
 80077e4:	e005      	b.n	80077f2 <_strtol_l.constprop.0+0xde>
 80077e6:	b106      	cbz	r6, 80077ea <_strtol_l.constprop.0+0xd6>
 80077e8:	4240      	negs	r0, r0
 80077ea:	2a00      	cmp	r2, #0
 80077ec:	d09e      	beq.n	800772c <_strtol_l.constprop.0+0x18>
 80077ee:	2f00      	cmp	r7, #0
 80077f0:	d1f7      	bne.n	80077e2 <_strtol_l.constprop.0+0xce>
 80077f2:	6011      	str	r1, [r2, #0]
 80077f4:	e79a      	b.n	800772c <_strtol_l.constprop.0+0x18>
 80077f6:	2430      	movs	r4, #48	; 0x30
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1b5      	bne.n	8007768 <_strtol_l.constprop.0+0x54>
 80077fc:	2308      	movs	r3, #8
 80077fe:	e7b3      	b.n	8007768 <_strtol_l.constprop.0+0x54>
 8007800:	2c30      	cmp	r4, #48	; 0x30
 8007802:	d0a9      	beq.n	8007758 <_strtol_l.constprop.0+0x44>
 8007804:	230a      	movs	r3, #10
 8007806:	e7af      	b.n	8007768 <_strtol_l.constprop.0+0x54>
 8007808:	0800aad1 	.word	0x0800aad1

0800780c <_strtol_r>:
 800780c:	f7ff bf82 	b.w	8007714 <_strtol_l.constprop.0>

08007810 <strtol>:
 8007810:	4613      	mov	r3, r2
 8007812:	460a      	mov	r2, r1
 8007814:	4601      	mov	r1, r0
 8007816:	4802      	ldr	r0, [pc, #8]	; (8007820 <strtol+0x10>)
 8007818:	6800      	ldr	r0, [r0, #0]
 800781a:	f7ff bf7b 	b.w	8007714 <_strtol_l.constprop.0>
 800781e:	bf00      	nop
 8007820:	20000020 	.word	0x20000020

08007824 <__swbuf_r>:
 8007824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007826:	460e      	mov	r6, r1
 8007828:	4614      	mov	r4, r2
 800782a:	4605      	mov	r5, r0
 800782c:	b118      	cbz	r0, 8007836 <__swbuf_r+0x12>
 800782e:	6983      	ldr	r3, [r0, #24]
 8007830:	b90b      	cbnz	r3, 8007836 <__swbuf_r+0x12>
 8007832:	f001 f849 	bl	80088c8 <__sinit>
 8007836:	4b21      	ldr	r3, [pc, #132]	; (80078bc <__swbuf_r+0x98>)
 8007838:	429c      	cmp	r4, r3
 800783a:	d12b      	bne.n	8007894 <__swbuf_r+0x70>
 800783c:	686c      	ldr	r4, [r5, #4]
 800783e:	69a3      	ldr	r3, [r4, #24]
 8007840:	60a3      	str	r3, [r4, #8]
 8007842:	89a3      	ldrh	r3, [r4, #12]
 8007844:	071a      	lsls	r2, r3, #28
 8007846:	d52f      	bpl.n	80078a8 <__swbuf_r+0x84>
 8007848:	6923      	ldr	r3, [r4, #16]
 800784a:	b36b      	cbz	r3, 80078a8 <__swbuf_r+0x84>
 800784c:	6923      	ldr	r3, [r4, #16]
 800784e:	6820      	ldr	r0, [r4, #0]
 8007850:	b2f6      	uxtb	r6, r6
 8007852:	1ac0      	subs	r0, r0, r3
 8007854:	6963      	ldr	r3, [r4, #20]
 8007856:	4637      	mov	r7, r6
 8007858:	4283      	cmp	r3, r0
 800785a:	dc04      	bgt.n	8007866 <__swbuf_r+0x42>
 800785c:	4621      	mov	r1, r4
 800785e:	4628      	mov	r0, r5
 8007860:	f000 ff9e 	bl	80087a0 <_fflush_r>
 8007864:	bb30      	cbnz	r0, 80078b4 <__swbuf_r+0x90>
 8007866:	68a3      	ldr	r3, [r4, #8]
 8007868:	3001      	adds	r0, #1
 800786a:	3b01      	subs	r3, #1
 800786c:	60a3      	str	r3, [r4, #8]
 800786e:	6823      	ldr	r3, [r4, #0]
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	6022      	str	r2, [r4, #0]
 8007874:	701e      	strb	r6, [r3, #0]
 8007876:	6963      	ldr	r3, [r4, #20]
 8007878:	4283      	cmp	r3, r0
 800787a:	d004      	beq.n	8007886 <__swbuf_r+0x62>
 800787c:	89a3      	ldrh	r3, [r4, #12]
 800787e:	07db      	lsls	r3, r3, #31
 8007880:	d506      	bpl.n	8007890 <__swbuf_r+0x6c>
 8007882:	2e0a      	cmp	r6, #10
 8007884:	d104      	bne.n	8007890 <__swbuf_r+0x6c>
 8007886:	4621      	mov	r1, r4
 8007888:	4628      	mov	r0, r5
 800788a:	f000 ff89 	bl	80087a0 <_fflush_r>
 800788e:	b988      	cbnz	r0, 80078b4 <__swbuf_r+0x90>
 8007890:	4638      	mov	r0, r7
 8007892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007894:	4b0a      	ldr	r3, [pc, #40]	; (80078c0 <__swbuf_r+0x9c>)
 8007896:	429c      	cmp	r4, r3
 8007898:	d101      	bne.n	800789e <__swbuf_r+0x7a>
 800789a:	68ac      	ldr	r4, [r5, #8]
 800789c:	e7cf      	b.n	800783e <__swbuf_r+0x1a>
 800789e:	4b09      	ldr	r3, [pc, #36]	; (80078c4 <__swbuf_r+0xa0>)
 80078a0:	429c      	cmp	r4, r3
 80078a2:	bf08      	it	eq
 80078a4:	68ec      	ldreq	r4, [r5, #12]
 80078a6:	e7ca      	b.n	800783e <__swbuf_r+0x1a>
 80078a8:	4621      	mov	r1, r4
 80078aa:	4628      	mov	r0, r5
 80078ac:	f000 f80c 	bl	80078c8 <__swsetup_r>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d0cb      	beq.n	800784c <__swbuf_r+0x28>
 80078b4:	f04f 37ff 	mov.w	r7, #4294967295
 80078b8:	e7ea      	b.n	8007890 <__swbuf_r+0x6c>
 80078ba:	bf00      	nop
 80078bc:	0800ac84 	.word	0x0800ac84
 80078c0:	0800aca4 	.word	0x0800aca4
 80078c4:	0800ac64 	.word	0x0800ac64

080078c8 <__swsetup_r>:
 80078c8:	4b32      	ldr	r3, [pc, #200]	; (8007994 <__swsetup_r+0xcc>)
 80078ca:	b570      	push	{r4, r5, r6, lr}
 80078cc:	681d      	ldr	r5, [r3, #0]
 80078ce:	4606      	mov	r6, r0
 80078d0:	460c      	mov	r4, r1
 80078d2:	b125      	cbz	r5, 80078de <__swsetup_r+0x16>
 80078d4:	69ab      	ldr	r3, [r5, #24]
 80078d6:	b913      	cbnz	r3, 80078de <__swsetup_r+0x16>
 80078d8:	4628      	mov	r0, r5
 80078da:	f000 fff5 	bl	80088c8 <__sinit>
 80078de:	4b2e      	ldr	r3, [pc, #184]	; (8007998 <__swsetup_r+0xd0>)
 80078e0:	429c      	cmp	r4, r3
 80078e2:	d10f      	bne.n	8007904 <__swsetup_r+0x3c>
 80078e4:	686c      	ldr	r4, [r5, #4]
 80078e6:	89a3      	ldrh	r3, [r4, #12]
 80078e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078ec:	0719      	lsls	r1, r3, #28
 80078ee:	d42c      	bmi.n	800794a <__swsetup_r+0x82>
 80078f0:	06dd      	lsls	r5, r3, #27
 80078f2:	d411      	bmi.n	8007918 <__swsetup_r+0x50>
 80078f4:	2309      	movs	r3, #9
 80078f6:	6033      	str	r3, [r6, #0]
 80078f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007900:	81a3      	strh	r3, [r4, #12]
 8007902:	e03e      	b.n	8007982 <__swsetup_r+0xba>
 8007904:	4b25      	ldr	r3, [pc, #148]	; (800799c <__swsetup_r+0xd4>)
 8007906:	429c      	cmp	r4, r3
 8007908:	d101      	bne.n	800790e <__swsetup_r+0x46>
 800790a:	68ac      	ldr	r4, [r5, #8]
 800790c:	e7eb      	b.n	80078e6 <__swsetup_r+0x1e>
 800790e:	4b24      	ldr	r3, [pc, #144]	; (80079a0 <__swsetup_r+0xd8>)
 8007910:	429c      	cmp	r4, r3
 8007912:	bf08      	it	eq
 8007914:	68ec      	ldreq	r4, [r5, #12]
 8007916:	e7e6      	b.n	80078e6 <__swsetup_r+0x1e>
 8007918:	0758      	lsls	r0, r3, #29
 800791a:	d512      	bpl.n	8007942 <__swsetup_r+0x7a>
 800791c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800791e:	b141      	cbz	r1, 8007932 <__swsetup_r+0x6a>
 8007920:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007924:	4299      	cmp	r1, r3
 8007926:	d002      	beq.n	800792e <__swsetup_r+0x66>
 8007928:	4630      	mov	r0, r6
 800792a:	f002 f93f 	bl	8009bac <_free_r>
 800792e:	2300      	movs	r3, #0
 8007930:	6363      	str	r3, [r4, #52]	; 0x34
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007938:	81a3      	strh	r3, [r4, #12]
 800793a:	2300      	movs	r3, #0
 800793c:	6063      	str	r3, [r4, #4]
 800793e:	6923      	ldr	r3, [r4, #16]
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	89a3      	ldrh	r3, [r4, #12]
 8007944:	f043 0308 	orr.w	r3, r3, #8
 8007948:	81a3      	strh	r3, [r4, #12]
 800794a:	6923      	ldr	r3, [r4, #16]
 800794c:	b94b      	cbnz	r3, 8007962 <__swsetup_r+0x9a>
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007958:	d003      	beq.n	8007962 <__swsetup_r+0x9a>
 800795a:	4621      	mov	r1, r4
 800795c:	4630      	mov	r0, r6
 800795e:	f001 fbe3 	bl	8009128 <__smakebuf_r>
 8007962:	89a0      	ldrh	r0, [r4, #12]
 8007964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007968:	f010 0301 	ands.w	r3, r0, #1
 800796c:	d00a      	beq.n	8007984 <__swsetup_r+0xbc>
 800796e:	2300      	movs	r3, #0
 8007970:	60a3      	str	r3, [r4, #8]
 8007972:	6963      	ldr	r3, [r4, #20]
 8007974:	425b      	negs	r3, r3
 8007976:	61a3      	str	r3, [r4, #24]
 8007978:	6923      	ldr	r3, [r4, #16]
 800797a:	b943      	cbnz	r3, 800798e <__swsetup_r+0xc6>
 800797c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007980:	d1ba      	bne.n	80078f8 <__swsetup_r+0x30>
 8007982:	bd70      	pop	{r4, r5, r6, pc}
 8007984:	0781      	lsls	r1, r0, #30
 8007986:	bf58      	it	pl
 8007988:	6963      	ldrpl	r3, [r4, #20]
 800798a:	60a3      	str	r3, [r4, #8]
 800798c:	e7f4      	b.n	8007978 <__swsetup_r+0xb0>
 800798e:	2000      	movs	r0, #0
 8007990:	e7f7      	b.n	8007982 <__swsetup_r+0xba>
 8007992:	bf00      	nop
 8007994:	20000020 	.word	0x20000020
 8007998:	0800ac84 	.word	0x0800ac84
 800799c:	0800aca4 	.word	0x0800aca4
 80079a0:	0800ac64 	.word	0x0800ac64

080079a4 <quorem>:
 80079a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a8:	6903      	ldr	r3, [r0, #16]
 80079aa:	690c      	ldr	r4, [r1, #16]
 80079ac:	4607      	mov	r7, r0
 80079ae:	42a3      	cmp	r3, r4
 80079b0:	f2c0 8082 	blt.w	8007ab8 <quorem+0x114>
 80079b4:	3c01      	subs	r4, #1
 80079b6:	f100 0514 	add.w	r5, r0, #20
 80079ba:	f101 0814 	add.w	r8, r1, #20
 80079be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079c2:	9301      	str	r3, [sp, #4]
 80079c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079cc:	3301      	adds	r3, #1
 80079ce:	429a      	cmp	r2, r3
 80079d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80079d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80079d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079dc:	d331      	bcc.n	8007a42 <quorem+0x9e>
 80079de:	f04f 0e00 	mov.w	lr, #0
 80079e2:	4640      	mov	r0, r8
 80079e4:	46ac      	mov	ip, r5
 80079e6:	46f2      	mov	sl, lr
 80079e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80079ec:	b293      	uxth	r3, r2
 80079ee:	fb06 e303 	mla	r3, r6, r3, lr
 80079f2:	0c12      	lsrs	r2, r2, #16
 80079f4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	fb06 e202 	mla	r2, r6, r2, lr
 80079fe:	ebaa 0303 	sub.w	r3, sl, r3
 8007a02:	f8dc a000 	ldr.w	sl, [ip]
 8007a06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a0a:	fa1f fa8a 	uxth.w	sl, sl
 8007a0e:	4453      	add	r3, sl
 8007a10:	f8dc a000 	ldr.w	sl, [ip]
 8007a14:	b292      	uxth	r2, r2
 8007a16:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a24:	4581      	cmp	r9, r0
 8007a26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a2a:	f84c 3b04 	str.w	r3, [ip], #4
 8007a2e:	d2db      	bcs.n	80079e8 <quorem+0x44>
 8007a30:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a34:	b92b      	cbnz	r3, 8007a42 <quorem+0x9e>
 8007a36:	9b01      	ldr	r3, [sp, #4]
 8007a38:	3b04      	subs	r3, #4
 8007a3a:	429d      	cmp	r5, r3
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	d32f      	bcc.n	8007aa0 <quorem+0xfc>
 8007a40:	613c      	str	r4, [r7, #16]
 8007a42:	4638      	mov	r0, r7
 8007a44:	f001 feae 	bl	80097a4 <__mcmp>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	db25      	blt.n	8007a98 <quorem+0xf4>
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	f04f 0c00 	mov.w	ip, #0
 8007a52:	3601      	adds	r6, #1
 8007a54:	f858 1b04 	ldr.w	r1, [r8], #4
 8007a58:	f8d0 e000 	ldr.w	lr, [r0]
 8007a5c:	b28b      	uxth	r3, r1
 8007a5e:	ebac 0303 	sub.w	r3, ip, r3
 8007a62:	fa1f f28e 	uxth.w	r2, lr
 8007a66:	4413      	add	r3, r2
 8007a68:	0c0a      	lsrs	r2, r1, #16
 8007a6a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a78:	45c1      	cmp	r9, r8
 8007a7a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a7e:	f840 3b04 	str.w	r3, [r0], #4
 8007a82:	d2e7      	bcs.n	8007a54 <quorem+0xb0>
 8007a84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a8c:	b922      	cbnz	r2, 8007a98 <quorem+0xf4>
 8007a8e:	3b04      	subs	r3, #4
 8007a90:	429d      	cmp	r5, r3
 8007a92:	461a      	mov	r2, r3
 8007a94:	d30a      	bcc.n	8007aac <quorem+0x108>
 8007a96:	613c      	str	r4, [r7, #16]
 8007a98:	4630      	mov	r0, r6
 8007a9a:	b003      	add	sp, #12
 8007a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa0:	6812      	ldr	r2, [r2, #0]
 8007aa2:	3b04      	subs	r3, #4
 8007aa4:	2a00      	cmp	r2, #0
 8007aa6:	d1cb      	bne.n	8007a40 <quorem+0x9c>
 8007aa8:	3c01      	subs	r4, #1
 8007aaa:	e7c6      	b.n	8007a3a <quorem+0x96>
 8007aac:	6812      	ldr	r2, [r2, #0]
 8007aae:	3b04      	subs	r3, #4
 8007ab0:	2a00      	cmp	r2, #0
 8007ab2:	d1f0      	bne.n	8007a96 <quorem+0xf2>
 8007ab4:	3c01      	subs	r4, #1
 8007ab6:	e7eb      	b.n	8007a90 <quorem+0xec>
 8007ab8:	2000      	movs	r0, #0
 8007aba:	e7ee      	b.n	8007a9a <quorem+0xf6>
 8007abc:	0000      	movs	r0, r0
	...

08007ac0 <_dtoa_r>:
 8007ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac4:	4616      	mov	r6, r2
 8007ac6:	461f      	mov	r7, r3
 8007ac8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007aca:	b099      	sub	sp, #100	; 0x64
 8007acc:	4605      	mov	r5, r0
 8007ace:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007ad2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007ad6:	b974      	cbnz	r4, 8007af6 <_dtoa_r+0x36>
 8007ad8:	2010      	movs	r0, #16
 8007ada:	f001 fb65 	bl	80091a8 <malloc>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	6268      	str	r0, [r5, #36]	; 0x24
 8007ae2:	b920      	cbnz	r0, 8007aee <_dtoa_r+0x2e>
 8007ae4:	21ea      	movs	r1, #234	; 0xea
 8007ae6:	4ba8      	ldr	r3, [pc, #672]	; (8007d88 <_dtoa_r+0x2c8>)
 8007ae8:	48a8      	ldr	r0, [pc, #672]	; (8007d8c <_dtoa_r+0x2cc>)
 8007aea:	f002 fcc3 	bl	800a474 <__assert_func>
 8007aee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007af2:	6004      	str	r4, [r0, #0]
 8007af4:	60c4      	str	r4, [r0, #12]
 8007af6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007af8:	6819      	ldr	r1, [r3, #0]
 8007afa:	b151      	cbz	r1, 8007b12 <_dtoa_r+0x52>
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	2301      	movs	r3, #1
 8007b00:	4093      	lsls	r3, r2
 8007b02:	604a      	str	r2, [r1, #4]
 8007b04:	608b      	str	r3, [r1, #8]
 8007b06:	4628      	mov	r0, r5
 8007b08:	f001 fbc4 	bl	8009294 <_Bfree>
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b10:	601a      	str	r2, [r3, #0]
 8007b12:	1e3b      	subs	r3, r7, #0
 8007b14:	bfaf      	iteee	ge
 8007b16:	2300      	movge	r3, #0
 8007b18:	2201      	movlt	r2, #1
 8007b1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b1e:	9305      	strlt	r3, [sp, #20]
 8007b20:	bfa8      	it	ge
 8007b22:	f8c8 3000 	strge.w	r3, [r8]
 8007b26:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007b2a:	4b99      	ldr	r3, [pc, #612]	; (8007d90 <_dtoa_r+0x2d0>)
 8007b2c:	bfb8      	it	lt
 8007b2e:	f8c8 2000 	strlt.w	r2, [r8]
 8007b32:	ea33 0309 	bics.w	r3, r3, r9
 8007b36:	d119      	bne.n	8007b6c <_dtoa_r+0xac>
 8007b38:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b44:	4333      	orrs	r3, r6
 8007b46:	f000 857f 	beq.w	8008648 <_dtoa_r+0xb88>
 8007b4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b4c:	b953      	cbnz	r3, 8007b64 <_dtoa_r+0xa4>
 8007b4e:	4b91      	ldr	r3, [pc, #580]	; (8007d94 <_dtoa_r+0x2d4>)
 8007b50:	e022      	b.n	8007b98 <_dtoa_r+0xd8>
 8007b52:	4b91      	ldr	r3, [pc, #580]	; (8007d98 <_dtoa_r+0x2d8>)
 8007b54:	9303      	str	r3, [sp, #12]
 8007b56:	3308      	adds	r3, #8
 8007b58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007b5a:	6013      	str	r3, [r2, #0]
 8007b5c:	9803      	ldr	r0, [sp, #12]
 8007b5e:	b019      	add	sp, #100	; 0x64
 8007b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b64:	4b8b      	ldr	r3, [pc, #556]	; (8007d94 <_dtoa_r+0x2d4>)
 8007b66:	9303      	str	r3, [sp, #12]
 8007b68:	3303      	adds	r3, #3
 8007b6a:	e7f5      	b.n	8007b58 <_dtoa_r+0x98>
 8007b6c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007b70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007b74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b78:	2200      	movs	r2, #0
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	f7f8 ff1e 	bl	80009bc <__aeabi_dcmpeq>
 8007b80:	4680      	mov	r8, r0
 8007b82:	b158      	cbz	r0, 8007b9c <_dtoa_r+0xdc>
 8007b84:	2301      	movs	r3, #1
 8007b86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b88:	6013      	str	r3, [r2, #0]
 8007b8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 8558 	beq.w	8008642 <_dtoa_r+0xb82>
 8007b92:	4882      	ldr	r0, [pc, #520]	; (8007d9c <_dtoa_r+0x2dc>)
 8007b94:	6018      	str	r0, [r3, #0]
 8007b96:	1e43      	subs	r3, r0, #1
 8007b98:	9303      	str	r3, [sp, #12]
 8007b9a:	e7df      	b.n	8007b5c <_dtoa_r+0x9c>
 8007b9c:	ab16      	add	r3, sp, #88	; 0x58
 8007b9e:	9301      	str	r3, [sp, #4]
 8007ba0:	ab17      	add	r3, sp, #92	; 0x5c
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007baa:	f001 ff1d 	bl	80099e8 <__d2b>
 8007bae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007bb2:	4683      	mov	fp, r0
 8007bb4:	2c00      	cmp	r4, #0
 8007bb6:	d07f      	beq.n	8007cb8 <_dtoa_r+0x1f8>
 8007bb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bbe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007bc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bc6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007bca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007bce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	4b72      	ldr	r3, [pc, #456]	; (8007da0 <_dtoa_r+0x2e0>)
 8007bd6:	f7f8 fad1 	bl	800017c <__aeabi_dsub>
 8007bda:	a365      	add	r3, pc, #404	; (adr r3, 8007d70 <_dtoa_r+0x2b0>)
 8007bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be0:	f7f8 fc84 	bl	80004ec <__aeabi_dmul>
 8007be4:	a364      	add	r3, pc, #400	; (adr r3, 8007d78 <_dtoa_r+0x2b8>)
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	f7f8 fac9 	bl	8000180 <__adddf3>
 8007bee:	4606      	mov	r6, r0
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	460f      	mov	r7, r1
 8007bf4:	f7f8 fc10 	bl	8000418 <__aeabi_i2d>
 8007bf8:	a361      	add	r3, pc, #388	; (adr r3, 8007d80 <_dtoa_r+0x2c0>)
 8007bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfe:	f7f8 fc75 	bl	80004ec <__aeabi_dmul>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	4630      	mov	r0, r6
 8007c08:	4639      	mov	r1, r7
 8007c0a:	f7f8 fab9 	bl	8000180 <__adddf3>
 8007c0e:	4606      	mov	r6, r0
 8007c10:	460f      	mov	r7, r1
 8007c12:	f7f8 ff1b 	bl	8000a4c <__aeabi_d2iz>
 8007c16:	2200      	movs	r2, #0
 8007c18:	4682      	mov	sl, r0
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	4639      	mov	r1, r7
 8007c20:	f7f8 fed6 	bl	80009d0 <__aeabi_dcmplt>
 8007c24:	b148      	cbz	r0, 8007c3a <_dtoa_r+0x17a>
 8007c26:	4650      	mov	r0, sl
 8007c28:	f7f8 fbf6 	bl	8000418 <__aeabi_i2d>
 8007c2c:	4632      	mov	r2, r6
 8007c2e:	463b      	mov	r3, r7
 8007c30:	f7f8 fec4 	bl	80009bc <__aeabi_dcmpeq>
 8007c34:	b908      	cbnz	r0, 8007c3a <_dtoa_r+0x17a>
 8007c36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c3a:	f1ba 0f16 	cmp.w	sl, #22
 8007c3e:	d858      	bhi.n	8007cf2 <_dtoa_r+0x232>
 8007c40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c44:	4b57      	ldr	r3, [pc, #348]	; (8007da4 <_dtoa_r+0x2e4>)
 8007c46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4e:	f7f8 febf 	bl	80009d0 <__aeabi_dcmplt>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	d04f      	beq.n	8007cf6 <_dtoa_r+0x236>
 8007c56:	2300      	movs	r3, #0
 8007c58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007c60:	1b1c      	subs	r4, r3, r4
 8007c62:	1e63      	subs	r3, r4, #1
 8007c64:	9309      	str	r3, [sp, #36]	; 0x24
 8007c66:	bf49      	itett	mi
 8007c68:	f1c4 0301 	rsbmi	r3, r4, #1
 8007c6c:	2300      	movpl	r3, #0
 8007c6e:	9306      	strmi	r3, [sp, #24]
 8007c70:	2300      	movmi	r3, #0
 8007c72:	bf54      	ite	pl
 8007c74:	9306      	strpl	r3, [sp, #24]
 8007c76:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007c78:	f1ba 0f00 	cmp.w	sl, #0
 8007c7c:	db3d      	blt.n	8007cfa <_dtoa_r+0x23a>
 8007c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c80:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007c84:	4453      	add	r3, sl
 8007c86:	9309      	str	r3, [sp, #36]	; 0x24
 8007c88:	2300      	movs	r3, #0
 8007c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8007c8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c8e:	2b09      	cmp	r3, #9
 8007c90:	f200 808c 	bhi.w	8007dac <_dtoa_r+0x2ec>
 8007c94:	2b05      	cmp	r3, #5
 8007c96:	bfc4      	itt	gt
 8007c98:	3b04      	subgt	r3, #4
 8007c9a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007c9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c9e:	bfc8      	it	gt
 8007ca0:	2400      	movgt	r4, #0
 8007ca2:	f1a3 0302 	sub.w	r3, r3, #2
 8007ca6:	bfd8      	it	le
 8007ca8:	2401      	movle	r4, #1
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	f200 808a 	bhi.w	8007dc4 <_dtoa_r+0x304>
 8007cb0:	e8df f003 	tbb	[pc, r3]
 8007cb4:	5b4d4f2d 	.word	0x5b4d4f2d
 8007cb8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007cbc:	441c      	add	r4, r3
 8007cbe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007cc2:	2b20      	cmp	r3, #32
 8007cc4:	bfc3      	ittte	gt
 8007cc6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007cca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007cce:	fa09 f303 	lslgt.w	r3, r9, r3
 8007cd2:	f1c3 0320 	rsble	r3, r3, #32
 8007cd6:	bfc6      	itte	gt
 8007cd8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007cdc:	4318      	orrgt	r0, r3
 8007cde:	fa06 f003 	lslle.w	r0, r6, r3
 8007ce2:	f7f8 fb89 	bl	80003f8 <__aeabi_ui2d>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007cec:	3c01      	subs	r4, #1
 8007cee:	9313      	str	r3, [sp, #76]	; 0x4c
 8007cf0:	e76f      	b.n	8007bd2 <_dtoa_r+0x112>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e7b2      	b.n	8007c5c <_dtoa_r+0x19c>
 8007cf6:	900f      	str	r0, [sp, #60]	; 0x3c
 8007cf8:	e7b1      	b.n	8007c5e <_dtoa_r+0x19e>
 8007cfa:	9b06      	ldr	r3, [sp, #24]
 8007cfc:	eba3 030a 	sub.w	r3, r3, sl
 8007d00:	9306      	str	r3, [sp, #24]
 8007d02:	f1ca 0300 	rsb	r3, sl, #0
 8007d06:	930a      	str	r3, [sp, #40]	; 0x28
 8007d08:	2300      	movs	r3, #0
 8007d0a:	930e      	str	r3, [sp, #56]	; 0x38
 8007d0c:	e7be      	b.n	8007c8c <_dtoa_r+0x1cc>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	dc58      	bgt.n	8007dca <_dtoa_r+0x30a>
 8007d18:	f04f 0901 	mov.w	r9, #1
 8007d1c:	464b      	mov	r3, r9
 8007d1e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007d22:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007d26:	2200      	movs	r2, #0
 8007d28:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007d2a:	6042      	str	r2, [r0, #4]
 8007d2c:	2204      	movs	r2, #4
 8007d2e:	f102 0614 	add.w	r6, r2, #20
 8007d32:	429e      	cmp	r6, r3
 8007d34:	6841      	ldr	r1, [r0, #4]
 8007d36:	d94e      	bls.n	8007dd6 <_dtoa_r+0x316>
 8007d38:	4628      	mov	r0, r5
 8007d3a:	f001 fa6b 	bl	8009214 <_Balloc>
 8007d3e:	9003      	str	r0, [sp, #12]
 8007d40:	2800      	cmp	r0, #0
 8007d42:	d14c      	bne.n	8007dde <_dtoa_r+0x31e>
 8007d44:	4602      	mov	r2, r0
 8007d46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d4a:	4b17      	ldr	r3, [pc, #92]	; (8007da8 <_dtoa_r+0x2e8>)
 8007d4c:	e6cc      	b.n	8007ae8 <_dtoa_r+0x28>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e7de      	b.n	8007d10 <_dtoa_r+0x250>
 8007d52:	2300      	movs	r3, #0
 8007d54:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d58:	eb0a 0903 	add.w	r9, sl, r3
 8007d5c:	f109 0301 	add.w	r3, r9, #1
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	9308      	str	r3, [sp, #32]
 8007d64:	bfb8      	it	lt
 8007d66:	2301      	movlt	r3, #1
 8007d68:	e7dd      	b.n	8007d26 <_dtoa_r+0x266>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e7f2      	b.n	8007d54 <_dtoa_r+0x294>
 8007d6e:	bf00      	nop
 8007d70:	636f4361 	.word	0x636f4361
 8007d74:	3fd287a7 	.word	0x3fd287a7
 8007d78:	8b60c8b3 	.word	0x8b60c8b3
 8007d7c:	3fc68a28 	.word	0x3fc68a28
 8007d80:	509f79fb 	.word	0x509f79fb
 8007d84:	3fd34413 	.word	0x3fd34413
 8007d88:	0800abde 	.word	0x0800abde
 8007d8c:	0800abf5 	.word	0x0800abf5
 8007d90:	7ff00000 	.word	0x7ff00000
 8007d94:	0800abda 	.word	0x0800abda
 8007d98:	0800abd1 	.word	0x0800abd1
 8007d9c:	0800aa51 	.word	0x0800aa51
 8007da0:	3ff80000 	.word	0x3ff80000
 8007da4:	0800adc8 	.word	0x0800adc8
 8007da8:	0800ac50 	.word	0x0800ac50
 8007dac:	2401      	movs	r4, #1
 8007dae:	2300      	movs	r3, #0
 8007db0:	940b      	str	r4, [sp, #44]	; 0x2c
 8007db2:	9322      	str	r3, [sp, #136]	; 0x88
 8007db4:	f04f 39ff 	mov.w	r9, #4294967295
 8007db8:	2200      	movs	r2, #0
 8007dba:	2312      	movs	r3, #18
 8007dbc:	f8cd 9020 	str.w	r9, [sp, #32]
 8007dc0:	9223      	str	r2, [sp, #140]	; 0x8c
 8007dc2:	e7b0      	b.n	8007d26 <_dtoa_r+0x266>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dc8:	e7f4      	b.n	8007db4 <_dtoa_r+0x2f4>
 8007dca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007dce:	464b      	mov	r3, r9
 8007dd0:	f8cd 9020 	str.w	r9, [sp, #32]
 8007dd4:	e7a7      	b.n	8007d26 <_dtoa_r+0x266>
 8007dd6:	3101      	adds	r1, #1
 8007dd8:	6041      	str	r1, [r0, #4]
 8007dda:	0052      	lsls	r2, r2, #1
 8007ddc:	e7a7      	b.n	8007d2e <_dtoa_r+0x26e>
 8007dde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007de0:	9a03      	ldr	r2, [sp, #12]
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	9b08      	ldr	r3, [sp, #32]
 8007de6:	2b0e      	cmp	r3, #14
 8007de8:	f200 80a8 	bhi.w	8007f3c <_dtoa_r+0x47c>
 8007dec:	2c00      	cmp	r4, #0
 8007dee:	f000 80a5 	beq.w	8007f3c <_dtoa_r+0x47c>
 8007df2:	f1ba 0f00 	cmp.w	sl, #0
 8007df6:	dd34      	ble.n	8007e62 <_dtoa_r+0x3a2>
 8007df8:	4a9a      	ldr	r2, [pc, #616]	; (8008064 <_dtoa_r+0x5a4>)
 8007dfa:	f00a 030f 	and.w	r3, sl, #15
 8007dfe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e02:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007e06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007e0e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007e12:	d016      	beq.n	8007e42 <_dtoa_r+0x382>
 8007e14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e18:	4b93      	ldr	r3, [pc, #588]	; (8008068 <_dtoa_r+0x5a8>)
 8007e1a:	2703      	movs	r7, #3
 8007e1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e20:	f7f8 fc8e 	bl	8000740 <__aeabi_ddiv>
 8007e24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e28:	f004 040f 	and.w	r4, r4, #15
 8007e2c:	4e8e      	ldr	r6, [pc, #568]	; (8008068 <_dtoa_r+0x5a8>)
 8007e2e:	b954      	cbnz	r4, 8007e46 <_dtoa_r+0x386>
 8007e30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e38:	f7f8 fc82 	bl	8000740 <__aeabi_ddiv>
 8007e3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e40:	e029      	b.n	8007e96 <_dtoa_r+0x3d6>
 8007e42:	2702      	movs	r7, #2
 8007e44:	e7f2      	b.n	8007e2c <_dtoa_r+0x36c>
 8007e46:	07e1      	lsls	r1, r4, #31
 8007e48:	d508      	bpl.n	8007e5c <_dtoa_r+0x39c>
 8007e4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e4e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e52:	f7f8 fb4b 	bl	80004ec <__aeabi_dmul>
 8007e56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e5a:	3701      	adds	r7, #1
 8007e5c:	1064      	asrs	r4, r4, #1
 8007e5e:	3608      	adds	r6, #8
 8007e60:	e7e5      	b.n	8007e2e <_dtoa_r+0x36e>
 8007e62:	f000 80a5 	beq.w	8007fb0 <_dtoa_r+0x4f0>
 8007e66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e6a:	f1ca 0400 	rsb	r4, sl, #0
 8007e6e:	4b7d      	ldr	r3, [pc, #500]	; (8008064 <_dtoa_r+0x5a4>)
 8007e70:	f004 020f 	and.w	r2, r4, #15
 8007e74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7c:	f7f8 fb36 	bl	80004ec <__aeabi_dmul>
 8007e80:	2702      	movs	r7, #2
 8007e82:	2300      	movs	r3, #0
 8007e84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e88:	4e77      	ldr	r6, [pc, #476]	; (8008068 <_dtoa_r+0x5a8>)
 8007e8a:	1124      	asrs	r4, r4, #4
 8007e8c:	2c00      	cmp	r4, #0
 8007e8e:	f040 8084 	bne.w	8007f9a <_dtoa_r+0x4da>
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1d2      	bne.n	8007e3c <_dtoa_r+0x37c>
 8007e96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 808b 	beq.w	8007fb4 <_dtoa_r+0x4f4>
 8007e9e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007ea2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007ea6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007eaa:	2200      	movs	r2, #0
 8007eac:	4b6f      	ldr	r3, [pc, #444]	; (800806c <_dtoa_r+0x5ac>)
 8007eae:	f7f8 fd8f 	bl	80009d0 <__aeabi_dcmplt>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d07e      	beq.n	8007fb4 <_dtoa_r+0x4f4>
 8007eb6:	9b08      	ldr	r3, [sp, #32]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d07b      	beq.n	8007fb4 <_dtoa_r+0x4f4>
 8007ebc:	f1b9 0f00 	cmp.w	r9, #0
 8007ec0:	dd38      	ble.n	8007f34 <_dtoa_r+0x474>
 8007ec2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	4b69      	ldr	r3, [pc, #420]	; (8008070 <_dtoa_r+0x5b0>)
 8007eca:	f7f8 fb0f 	bl	80004ec <__aeabi_dmul>
 8007ece:	464c      	mov	r4, r9
 8007ed0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ed4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007ed8:	3701      	adds	r7, #1
 8007eda:	4638      	mov	r0, r7
 8007edc:	f7f8 fa9c 	bl	8000418 <__aeabi_i2d>
 8007ee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ee4:	f7f8 fb02 	bl	80004ec <__aeabi_dmul>
 8007ee8:	2200      	movs	r2, #0
 8007eea:	4b62      	ldr	r3, [pc, #392]	; (8008074 <_dtoa_r+0x5b4>)
 8007eec:	f7f8 f948 	bl	8000180 <__adddf3>
 8007ef0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007ef4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ef8:	9611      	str	r6, [sp, #68]	; 0x44
 8007efa:	2c00      	cmp	r4, #0
 8007efc:	d15d      	bne.n	8007fba <_dtoa_r+0x4fa>
 8007efe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f02:	2200      	movs	r2, #0
 8007f04:	4b5c      	ldr	r3, [pc, #368]	; (8008078 <_dtoa_r+0x5b8>)
 8007f06:	f7f8 f939 	bl	800017c <__aeabi_dsub>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f12:	4633      	mov	r3, r6
 8007f14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f16:	f7f8 fd79 	bl	8000a0c <__aeabi_dcmpgt>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	f040 829c 	bne.w	8008458 <_dtoa_r+0x998>
 8007f20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f26:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007f2a:	f7f8 fd51 	bl	80009d0 <__aeabi_dcmplt>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	f040 8290 	bne.w	8008454 <_dtoa_r+0x994>
 8007f34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007f38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007f3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f2c0 8152 	blt.w	80081e8 <_dtoa_r+0x728>
 8007f44:	f1ba 0f0e 	cmp.w	sl, #14
 8007f48:	f300 814e 	bgt.w	80081e8 <_dtoa_r+0x728>
 8007f4c:	4b45      	ldr	r3, [pc, #276]	; (8008064 <_dtoa_r+0x5a4>)
 8007f4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f56:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007f5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f280 80db 	bge.w	8008118 <_dtoa_r+0x658>
 8007f62:	9b08      	ldr	r3, [sp, #32]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f300 80d7 	bgt.w	8008118 <_dtoa_r+0x658>
 8007f6a:	f040 8272 	bne.w	8008452 <_dtoa_r+0x992>
 8007f6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f72:	2200      	movs	r2, #0
 8007f74:	4b40      	ldr	r3, [pc, #256]	; (8008078 <_dtoa_r+0x5b8>)
 8007f76:	f7f8 fab9 	bl	80004ec <__aeabi_dmul>
 8007f7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f7e:	f7f8 fd3b 	bl	80009f8 <__aeabi_dcmpge>
 8007f82:	9c08      	ldr	r4, [sp, #32]
 8007f84:	4626      	mov	r6, r4
 8007f86:	2800      	cmp	r0, #0
 8007f88:	f040 8248 	bne.w	800841c <_dtoa_r+0x95c>
 8007f8c:	2331      	movs	r3, #49	; 0x31
 8007f8e:	9f03      	ldr	r7, [sp, #12]
 8007f90:	f10a 0a01 	add.w	sl, sl, #1
 8007f94:	f807 3b01 	strb.w	r3, [r7], #1
 8007f98:	e244      	b.n	8008424 <_dtoa_r+0x964>
 8007f9a:	07e2      	lsls	r2, r4, #31
 8007f9c:	d505      	bpl.n	8007faa <_dtoa_r+0x4ea>
 8007f9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007fa2:	f7f8 faa3 	bl	80004ec <__aeabi_dmul>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	3701      	adds	r7, #1
 8007faa:	1064      	asrs	r4, r4, #1
 8007fac:	3608      	adds	r6, #8
 8007fae:	e76d      	b.n	8007e8c <_dtoa_r+0x3cc>
 8007fb0:	2702      	movs	r7, #2
 8007fb2:	e770      	b.n	8007e96 <_dtoa_r+0x3d6>
 8007fb4:	46d0      	mov	r8, sl
 8007fb6:	9c08      	ldr	r4, [sp, #32]
 8007fb8:	e78f      	b.n	8007eda <_dtoa_r+0x41a>
 8007fba:	9903      	ldr	r1, [sp, #12]
 8007fbc:	4b29      	ldr	r3, [pc, #164]	; (8008064 <_dtoa_r+0x5a4>)
 8007fbe:	4421      	add	r1, r4
 8007fc0:	9112      	str	r1, [sp, #72]	; 0x48
 8007fc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fc8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007fcc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fd0:	2900      	cmp	r1, #0
 8007fd2:	d055      	beq.n	8008080 <_dtoa_r+0x5c0>
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	4929      	ldr	r1, [pc, #164]	; (800807c <_dtoa_r+0x5bc>)
 8007fd8:	f7f8 fbb2 	bl	8000740 <__aeabi_ddiv>
 8007fdc:	463b      	mov	r3, r7
 8007fde:	4632      	mov	r2, r6
 8007fe0:	f7f8 f8cc 	bl	800017c <__aeabi_dsub>
 8007fe4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007fe8:	9f03      	ldr	r7, [sp, #12]
 8007fea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fee:	f7f8 fd2d 	bl	8000a4c <__aeabi_d2iz>
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	f7f8 fa10 	bl	8000418 <__aeabi_i2d>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008000:	f7f8 f8bc 	bl	800017c <__aeabi_dsub>
 8008004:	4602      	mov	r2, r0
 8008006:	460b      	mov	r3, r1
 8008008:	3430      	adds	r4, #48	; 0x30
 800800a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800800e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008012:	f807 4b01 	strb.w	r4, [r7], #1
 8008016:	f7f8 fcdb 	bl	80009d0 <__aeabi_dcmplt>
 800801a:	2800      	cmp	r0, #0
 800801c:	d174      	bne.n	8008108 <_dtoa_r+0x648>
 800801e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008022:	2000      	movs	r0, #0
 8008024:	4911      	ldr	r1, [pc, #68]	; (800806c <_dtoa_r+0x5ac>)
 8008026:	f7f8 f8a9 	bl	800017c <__aeabi_dsub>
 800802a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800802e:	f7f8 fccf 	bl	80009d0 <__aeabi_dcmplt>
 8008032:	2800      	cmp	r0, #0
 8008034:	f040 80b7 	bne.w	80081a6 <_dtoa_r+0x6e6>
 8008038:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800803a:	429f      	cmp	r7, r3
 800803c:	f43f af7a 	beq.w	8007f34 <_dtoa_r+0x474>
 8008040:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008044:	2200      	movs	r2, #0
 8008046:	4b0a      	ldr	r3, [pc, #40]	; (8008070 <_dtoa_r+0x5b0>)
 8008048:	f7f8 fa50 	bl	80004ec <__aeabi_dmul>
 800804c:	2200      	movs	r2, #0
 800804e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008052:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008056:	4b06      	ldr	r3, [pc, #24]	; (8008070 <_dtoa_r+0x5b0>)
 8008058:	f7f8 fa48 	bl	80004ec <__aeabi_dmul>
 800805c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008060:	e7c3      	b.n	8007fea <_dtoa_r+0x52a>
 8008062:	bf00      	nop
 8008064:	0800adc8 	.word	0x0800adc8
 8008068:	0800ada0 	.word	0x0800ada0
 800806c:	3ff00000 	.word	0x3ff00000
 8008070:	40240000 	.word	0x40240000
 8008074:	401c0000 	.word	0x401c0000
 8008078:	40140000 	.word	0x40140000
 800807c:	3fe00000 	.word	0x3fe00000
 8008080:	4630      	mov	r0, r6
 8008082:	4639      	mov	r1, r7
 8008084:	f7f8 fa32 	bl	80004ec <__aeabi_dmul>
 8008088:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800808a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800808e:	9c03      	ldr	r4, [sp, #12]
 8008090:	9314      	str	r3, [sp, #80]	; 0x50
 8008092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008096:	f7f8 fcd9 	bl	8000a4c <__aeabi_d2iz>
 800809a:	9015      	str	r0, [sp, #84]	; 0x54
 800809c:	f7f8 f9bc 	bl	8000418 <__aeabi_i2d>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080a8:	f7f8 f868 	bl	800017c <__aeabi_dsub>
 80080ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080ae:	4606      	mov	r6, r0
 80080b0:	3330      	adds	r3, #48	; 0x30
 80080b2:	f804 3b01 	strb.w	r3, [r4], #1
 80080b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080b8:	460f      	mov	r7, r1
 80080ba:	429c      	cmp	r4, r3
 80080bc:	f04f 0200 	mov.w	r2, #0
 80080c0:	d124      	bne.n	800810c <_dtoa_r+0x64c>
 80080c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080c6:	4bb0      	ldr	r3, [pc, #704]	; (8008388 <_dtoa_r+0x8c8>)
 80080c8:	f7f8 f85a 	bl	8000180 <__adddf3>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	4630      	mov	r0, r6
 80080d2:	4639      	mov	r1, r7
 80080d4:	f7f8 fc9a 	bl	8000a0c <__aeabi_dcmpgt>
 80080d8:	2800      	cmp	r0, #0
 80080da:	d163      	bne.n	80081a4 <_dtoa_r+0x6e4>
 80080dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80080e0:	2000      	movs	r0, #0
 80080e2:	49a9      	ldr	r1, [pc, #676]	; (8008388 <_dtoa_r+0x8c8>)
 80080e4:	f7f8 f84a 	bl	800017c <__aeabi_dsub>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	4630      	mov	r0, r6
 80080ee:	4639      	mov	r1, r7
 80080f0:	f7f8 fc6e 	bl	80009d0 <__aeabi_dcmplt>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	f43f af1d 	beq.w	8007f34 <_dtoa_r+0x474>
 80080fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80080fc:	1e7b      	subs	r3, r7, #1
 80080fe:	9314      	str	r3, [sp, #80]	; 0x50
 8008100:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008104:	2b30      	cmp	r3, #48	; 0x30
 8008106:	d0f8      	beq.n	80080fa <_dtoa_r+0x63a>
 8008108:	46c2      	mov	sl, r8
 800810a:	e03b      	b.n	8008184 <_dtoa_r+0x6c4>
 800810c:	4b9f      	ldr	r3, [pc, #636]	; (800838c <_dtoa_r+0x8cc>)
 800810e:	f7f8 f9ed 	bl	80004ec <__aeabi_dmul>
 8008112:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008116:	e7bc      	b.n	8008092 <_dtoa_r+0x5d2>
 8008118:	9f03      	ldr	r7, [sp, #12]
 800811a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800811e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008122:	4640      	mov	r0, r8
 8008124:	4649      	mov	r1, r9
 8008126:	f7f8 fb0b 	bl	8000740 <__aeabi_ddiv>
 800812a:	f7f8 fc8f 	bl	8000a4c <__aeabi_d2iz>
 800812e:	4604      	mov	r4, r0
 8008130:	f7f8 f972 	bl	8000418 <__aeabi_i2d>
 8008134:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008138:	f7f8 f9d8 	bl	80004ec <__aeabi_dmul>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4640      	mov	r0, r8
 8008142:	4649      	mov	r1, r9
 8008144:	f7f8 f81a 	bl	800017c <__aeabi_dsub>
 8008148:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800814c:	f807 6b01 	strb.w	r6, [r7], #1
 8008150:	9e03      	ldr	r6, [sp, #12]
 8008152:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008156:	1bbe      	subs	r6, r7, r6
 8008158:	45b4      	cmp	ip, r6
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	d136      	bne.n	80081ce <_dtoa_r+0x70e>
 8008160:	f7f8 f80e 	bl	8000180 <__adddf3>
 8008164:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008168:	4680      	mov	r8, r0
 800816a:	4689      	mov	r9, r1
 800816c:	f7f8 fc4e 	bl	8000a0c <__aeabi_dcmpgt>
 8008170:	bb58      	cbnz	r0, 80081ca <_dtoa_r+0x70a>
 8008172:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008176:	4640      	mov	r0, r8
 8008178:	4649      	mov	r1, r9
 800817a:	f7f8 fc1f 	bl	80009bc <__aeabi_dcmpeq>
 800817e:	b108      	cbz	r0, 8008184 <_dtoa_r+0x6c4>
 8008180:	07e1      	lsls	r1, r4, #31
 8008182:	d422      	bmi.n	80081ca <_dtoa_r+0x70a>
 8008184:	4628      	mov	r0, r5
 8008186:	4659      	mov	r1, fp
 8008188:	f001 f884 	bl	8009294 <_Bfree>
 800818c:	2300      	movs	r3, #0
 800818e:	703b      	strb	r3, [r7, #0]
 8008190:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008192:	f10a 0001 	add.w	r0, sl, #1
 8008196:	6018      	str	r0, [r3, #0]
 8008198:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800819a:	2b00      	cmp	r3, #0
 800819c:	f43f acde 	beq.w	8007b5c <_dtoa_r+0x9c>
 80081a0:	601f      	str	r7, [r3, #0]
 80081a2:	e4db      	b.n	8007b5c <_dtoa_r+0x9c>
 80081a4:	4627      	mov	r7, r4
 80081a6:	463b      	mov	r3, r7
 80081a8:	461f      	mov	r7, r3
 80081aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081ae:	2a39      	cmp	r2, #57	; 0x39
 80081b0:	d107      	bne.n	80081c2 <_dtoa_r+0x702>
 80081b2:	9a03      	ldr	r2, [sp, #12]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d1f7      	bne.n	80081a8 <_dtoa_r+0x6e8>
 80081b8:	2230      	movs	r2, #48	; 0x30
 80081ba:	9903      	ldr	r1, [sp, #12]
 80081bc:	f108 0801 	add.w	r8, r8, #1
 80081c0:	700a      	strb	r2, [r1, #0]
 80081c2:	781a      	ldrb	r2, [r3, #0]
 80081c4:	3201      	adds	r2, #1
 80081c6:	701a      	strb	r2, [r3, #0]
 80081c8:	e79e      	b.n	8008108 <_dtoa_r+0x648>
 80081ca:	46d0      	mov	r8, sl
 80081cc:	e7eb      	b.n	80081a6 <_dtoa_r+0x6e6>
 80081ce:	2200      	movs	r2, #0
 80081d0:	4b6e      	ldr	r3, [pc, #440]	; (800838c <_dtoa_r+0x8cc>)
 80081d2:	f7f8 f98b 	bl	80004ec <__aeabi_dmul>
 80081d6:	2200      	movs	r2, #0
 80081d8:	2300      	movs	r3, #0
 80081da:	4680      	mov	r8, r0
 80081dc:	4689      	mov	r9, r1
 80081de:	f7f8 fbed 	bl	80009bc <__aeabi_dcmpeq>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d09b      	beq.n	800811e <_dtoa_r+0x65e>
 80081e6:	e7cd      	b.n	8008184 <_dtoa_r+0x6c4>
 80081e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081ea:	2a00      	cmp	r2, #0
 80081ec:	f000 80d0 	beq.w	8008390 <_dtoa_r+0x8d0>
 80081f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80081f2:	2a01      	cmp	r2, #1
 80081f4:	f300 80ae 	bgt.w	8008354 <_dtoa_r+0x894>
 80081f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80081fa:	2a00      	cmp	r2, #0
 80081fc:	f000 80a6 	beq.w	800834c <_dtoa_r+0x88c>
 8008200:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008204:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008206:	9f06      	ldr	r7, [sp, #24]
 8008208:	9a06      	ldr	r2, [sp, #24]
 800820a:	2101      	movs	r1, #1
 800820c:	441a      	add	r2, r3
 800820e:	9206      	str	r2, [sp, #24]
 8008210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008212:	4628      	mov	r0, r5
 8008214:	441a      	add	r2, r3
 8008216:	9209      	str	r2, [sp, #36]	; 0x24
 8008218:	f001 f93c 	bl	8009494 <__i2b>
 800821c:	4606      	mov	r6, r0
 800821e:	2f00      	cmp	r7, #0
 8008220:	dd0c      	ble.n	800823c <_dtoa_r+0x77c>
 8008222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008224:	2b00      	cmp	r3, #0
 8008226:	dd09      	ble.n	800823c <_dtoa_r+0x77c>
 8008228:	42bb      	cmp	r3, r7
 800822a:	bfa8      	it	ge
 800822c:	463b      	movge	r3, r7
 800822e:	9a06      	ldr	r2, [sp, #24]
 8008230:	1aff      	subs	r7, r7, r3
 8008232:	1ad2      	subs	r2, r2, r3
 8008234:	9206      	str	r2, [sp, #24]
 8008236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	9309      	str	r3, [sp, #36]	; 0x24
 800823c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800823e:	b1f3      	cbz	r3, 800827e <_dtoa_r+0x7be>
 8008240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 80a8 	beq.w	8008398 <_dtoa_r+0x8d8>
 8008248:	2c00      	cmp	r4, #0
 800824a:	dd10      	ble.n	800826e <_dtoa_r+0x7ae>
 800824c:	4631      	mov	r1, r6
 800824e:	4622      	mov	r2, r4
 8008250:	4628      	mov	r0, r5
 8008252:	f001 f9dd 	bl	8009610 <__pow5mult>
 8008256:	465a      	mov	r2, fp
 8008258:	4601      	mov	r1, r0
 800825a:	4606      	mov	r6, r0
 800825c:	4628      	mov	r0, r5
 800825e:	f001 f92f 	bl	80094c0 <__multiply>
 8008262:	4680      	mov	r8, r0
 8008264:	4659      	mov	r1, fp
 8008266:	4628      	mov	r0, r5
 8008268:	f001 f814 	bl	8009294 <_Bfree>
 800826c:	46c3      	mov	fp, r8
 800826e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008270:	1b1a      	subs	r2, r3, r4
 8008272:	d004      	beq.n	800827e <_dtoa_r+0x7be>
 8008274:	4659      	mov	r1, fp
 8008276:	4628      	mov	r0, r5
 8008278:	f001 f9ca 	bl	8009610 <__pow5mult>
 800827c:	4683      	mov	fp, r0
 800827e:	2101      	movs	r1, #1
 8008280:	4628      	mov	r0, r5
 8008282:	f001 f907 	bl	8009494 <__i2b>
 8008286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008288:	4604      	mov	r4, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	f340 8086 	ble.w	800839c <_dtoa_r+0x8dc>
 8008290:	461a      	mov	r2, r3
 8008292:	4601      	mov	r1, r0
 8008294:	4628      	mov	r0, r5
 8008296:	f001 f9bb 	bl	8009610 <__pow5mult>
 800829a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800829c:	4604      	mov	r4, r0
 800829e:	2b01      	cmp	r3, #1
 80082a0:	dd7f      	ble.n	80083a2 <_dtoa_r+0x8e2>
 80082a2:	f04f 0800 	mov.w	r8, #0
 80082a6:	6923      	ldr	r3, [r4, #16]
 80082a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082ac:	6918      	ldr	r0, [r3, #16]
 80082ae:	f001 f8a3 	bl	80093f8 <__hi0bits>
 80082b2:	f1c0 0020 	rsb	r0, r0, #32
 80082b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b8:	4418      	add	r0, r3
 80082ba:	f010 001f 	ands.w	r0, r0, #31
 80082be:	f000 8092 	beq.w	80083e6 <_dtoa_r+0x926>
 80082c2:	f1c0 0320 	rsb	r3, r0, #32
 80082c6:	2b04      	cmp	r3, #4
 80082c8:	f340 808a 	ble.w	80083e0 <_dtoa_r+0x920>
 80082cc:	f1c0 001c 	rsb	r0, r0, #28
 80082d0:	9b06      	ldr	r3, [sp, #24]
 80082d2:	4407      	add	r7, r0
 80082d4:	4403      	add	r3, r0
 80082d6:	9306      	str	r3, [sp, #24]
 80082d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082da:	4403      	add	r3, r0
 80082dc:	9309      	str	r3, [sp, #36]	; 0x24
 80082de:	9b06      	ldr	r3, [sp, #24]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	dd05      	ble.n	80082f0 <_dtoa_r+0x830>
 80082e4:	4659      	mov	r1, fp
 80082e6:	461a      	mov	r2, r3
 80082e8:	4628      	mov	r0, r5
 80082ea:	f001 f9eb 	bl	80096c4 <__lshift>
 80082ee:	4683      	mov	fp, r0
 80082f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	dd05      	ble.n	8008302 <_dtoa_r+0x842>
 80082f6:	4621      	mov	r1, r4
 80082f8:	461a      	mov	r2, r3
 80082fa:	4628      	mov	r0, r5
 80082fc:	f001 f9e2 	bl	80096c4 <__lshift>
 8008300:	4604      	mov	r4, r0
 8008302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d070      	beq.n	80083ea <_dtoa_r+0x92a>
 8008308:	4621      	mov	r1, r4
 800830a:	4658      	mov	r0, fp
 800830c:	f001 fa4a 	bl	80097a4 <__mcmp>
 8008310:	2800      	cmp	r0, #0
 8008312:	da6a      	bge.n	80083ea <_dtoa_r+0x92a>
 8008314:	2300      	movs	r3, #0
 8008316:	4659      	mov	r1, fp
 8008318:	220a      	movs	r2, #10
 800831a:	4628      	mov	r0, r5
 800831c:	f000 ffdc 	bl	80092d8 <__multadd>
 8008320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008322:	4683      	mov	fp, r0
 8008324:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 8194 	beq.w	8008656 <_dtoa_r+0xb96>
 800832e:	4631      	mov	r1, r6
 8008330:	2300      	movs	r3, #0
 8008332:	220a      	movs	r2, #10
 8008334:	4628      	mov	r0, r5
 8008336:	f000 ffcf 	bl	80092d8 <__multadd>
 800833a:	f1b9 0f00 	cmp.w	r9, #0
 800833e:	4606      	mov	r6, r0
 8008340:	f300 8093 	bgt.w	800846a <_dtoa_r+0x9aa>
 8008344:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008346:	2b02      	cmp	r3, #2
 8008348:	dc57      	bgt.n	80083fa <_dtoa_r+0x93a>
 800834a:	e08e      	b.n	800846a <_dtoa_r+0x9aa>
 800834c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800834e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008352:	e757      	b.n	8008204 <_dtoa_r+0x744>
 8008354:	9b08      	ldr	r3, [sp, #32]
 8008356:	1e5c      	subs	r4, r3, #1
 8008358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800835a:	42a3      	cmp	r3, r4
 800835c:	bfb7      	itett	lt
 800835e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008360:	1b1c      	subge	r4, r3, r4
 8008362:	1ae2      	sublt	r2, r4, r3
 8008364:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008366:	bfbe      	ittt	lt
 8008368:	940a      	strlt	r4, [sp, #40]	; 0x28
 800836a:	189b      	addlt	r3, r3, r2
 800836c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800836e:	9b08      	ldr	r3, [sp, #32]
 8008370:	bfb8      	it	lt
 8008372:	2400      	movlt	r4, #0
 8008374:	2b00      	cmp	r3, #0
 8008376:	bfbb      	ittet	lt
 8008378:	9b06      	ldrlt	r3, [sp, #24]
 800837a:	9a08      	ldrlt	r2, [sp, #32]
 800837c:	9f06      	ldrge	r7, [sp, #24]
 800837e:	1a9f      	sublt	r7, r3, r2
 8008380:	bfac      	ite	ge
 8008382:	9b08      	ldrge	r3, [sp, #32]
 8008384:	2300      	movlt	r3, #0
 8008386:	e73f      	b.n	8008208 <_dtoa_r+0x748>
 8008388:	3fe00000 	.word	0x3fe00000
 800838c:	40240000 	.word	0x40240000
 8008390:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008392:	9f06      	ldr	r7, [sp, #24]
 8008394:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008396:	e742      	b.n	800821e <_dtoa_r+0x75e>
 8008398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800839a:	e76b      	b.n	8008274 <_dtoa_r+0x7b4>
 800839c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800839e:	2b01      	cmp	r3, #1
 80083a0:	dc19      	bgt.n	80083d6 <_dtoa_r+0x916>
 80083a2:	9b04      	ldr	r3, [sp, #16]
 80083a4:	b9bb      	cbnz	r3, 80083d6 <_dtoa_r+0x916>
 80083a6:	9b05      	ldr	r3, [sp, #20]
 80083a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083ac:	b99b      	cbnz	r3, 80083d6 <_dtoa_r+0x916>
 80083ae:	9b05      	ldr	r3, [sp, #20]
 80083b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083b4:	0d1b      	lsrs	r3, r3, #20
 80083b6:	051b      	lsls	r3, r3, #20
 80083b8:	b183      	cbz	r3, 80083dc <_dtoa_r+0x91c>
 80083ba:	f04f 0801 	mov.w	r8, #1
 80083be:	9b06      	ldr	r3, [sp, #24]
 80083c0:	3301      	adds	r3, #1
 80083c2:	9306      	str	r3, [sp, #24]
 80083c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083c6:	3301      	adds	r3, #1
 80083c8:	9309      	str	r3, [sp, #36]	; 0x24
 80083ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f47f af6a 	bne.w	80082a6 <_dtoa_r+0x7e6>
 80083d2:	2001      	movs	r0, #1
 80083d4:	e76f      	b.n	80082b6 <_dtoa_r+0x7f6>
 80083d6:	f04f 0800 	mov.w	r8, #0
 80083da:	e7f6      	b.n	80083ca <_dtoa_r+0x90a>
 80083dc:	4698      	mov	r8, r3
 80083de:	e7f4      	b.n	80083ca <_dtoa_r+0x90a>
 80083e0:	f43f af7d 	beq.w	80082de <_dtoa_r+0x81e>
 80083e4:	4618      	mov	r0, r3
 80083e6:	301c      	adds	r0, #28
 80083e8:	e772      	b.n	80082d0 <_dtoa_r+0x810>
 80083ea:	9b08      	ldr	r3, [sp, #32]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	dc36      	bgt.n	800845e <_dtoa_r+0x99e>
 80083f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	dd33      	ble.n	800845e <_dtoa_r+0x99e>
 80083f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083fa:	f1b9 0f00 	cmp.w	r9, #0
 80083fe:	d10d      	bne.n	800841c <_dtoa_r+0x95c>
 8008400:	4621      	mov	r1, r4
 8008402:	464b      	mov	r3, r9
 8008404:	2205      	movs	r2, #5
 8008406:	4628      	mov	r0, r5
 8008408:	f000 ff66 	bl	80092d8 <__multadd>
 800840c:	4601      	mov	r1, r0
 800840e:	4604      	mov	r4, r0
 8008410:	4658      	mov	r0, fp
 8008412:	f001 f9c7 	bl	80097a4 <__mcmp>
 8008416:	2800      	cmp	r0, #0
 8008418:	f73f adb8 	bgt.w	8007f8c <_dtoa_r+0x4cc>
 800841c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800841e:	9f03      	ldr	r7, [sp, #12]
 8008420:	ea6f 0a03 	mvn.w	sl, r3
 8008424:	f04f 0800 	mov.w	r8, #0
 8008428:	4621      	mov	r1, r4
 800842a:	4628      	mov	r0, r5
 800842c:	f000 ff32 	bl	8009294 <_Bfree>
 8008430:	2e00      	cmp	r6, #0
 8008432:	f43f aea7 	beq.w	8008184 <_dtoa_r+0x6c4>
 8008436:	f1b8 0f00 	cmp.w	r8, #0
 800843a:	d005      	beq.n	8008448 <_dtoa_r+0x988>
 800843c:	45b0      	cmp	r8, r6
 800843e:	d003      	beq.n	8008448 <_dtoa_r+0x988>
 8008440:	4641      	mov	r1, r8
 8008442:	4628      	mov	r0, r5
 8008444:	f000 ff26 	bl	8009294 <_Bfree>
 8008448:	4631      	mov	r1, r6
 800844a:	4628      	mov	r0, r5
 800844c:	f000 ff22 	bl	8009294 <_Bfree>
 8008450:	e698      	b.n	8008184 <_dtoa_r+0x6c4>
 8008452:	2400      	movs	r4, #0
 8008454:	4626      	mov	r6, r4
 8008456:	e7e1      	b.n	800841c <_dtoa_r+0x95c>
 8008458:	46c2      	mov	sl, r8
 800845a:	4626      	mov	r6, r4
 800845c:	e596      	b.n	8007f8c <_dtoa_r+0x4cc>
 800845e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008460:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008464:	2b00      	cmp	r3, #0
 8008466:	f000 80fd 	beq.w	8008664 <_dtoa_r+0xba4>
 800846a:	2f00      	cmp	r7, #0
 800846c:	dd05      	ble.n	800847a <_dtoa_r+0x9ba>
 800846e:	4631      	mov	r1, r6
 8008470:	463a      	mov	r2, r7
 8008472:	4628      	mov	r0, r5
 8008474:	f001 f926 	bl	80096c4 <__lshift>
 8008478:	4606      	mov	r6, r0
 800847a:	f1b8 0f00 	cmp.w	r8, #0
 800847e:	d05c      	beq.n	800853a <_dtoa_r+0xa7a>
 8008480:	4628      	mov	r0, r5
 8008482:	6871      	ldr	r1, [r6, #4]
 8008484:	f000 fec6 	bl	8009214 <_Balloc>
 8008488:	4607      	mov	r7, r0
 800848a:	b928      	cbnz	r0, 8008498 <_dtoa_r+0x9d8>
 800848c:	4602      	mov	r2, r0
 800848e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008492:	4b7f      	ldr	r3, [pc, #508]	; (8008690 <_dtoa_r+0xbd0>)
 8008494:	f7ff bb28 	b.w	8007ae8 <_dtoa_r+0x28>
 8008498:	6932      	ldr	r2, [r6, #16]
 800849a:	f106 010c 	add.w	r1, r6, #12
 800849e:	3202      	adds	r2, #2
 80084a0:	0092      	lsls	r2, r2, #2
 80084a2:	300c      	adds	r0, #12
 80084a4:	f000 fea8 	bl	80091f8 <memcpy>
 80084a8:	2201      	movs	r2, #1
 80084aa:	4639      	mov	r1, r7
 80084ac:	4628      	mov	r0, r5
 80084ae:	f001 f909 	bl	80096c4 <__lshift>
 80084b2:	46b0      	mov	r8, r6
 80084b4:	4606      	mov	r6, r0
 80084b6:	9b03      	ldr	r3, [sp, #12]
 80084b8:	3301      	adds	r3, #1
 80084ba:	9308      	str	r3, [sp, #32]
 80084bc:	9b03      	ldr	r3, [sp, #12]
 80084be:	444b      	add	r3, r9
 80084c0:	930a      	str	r3, [sp, #40]	; 0x28
 80084c2:	9b04      	ldr	r3, [sp, #16]
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	9309      	str	r3, [sp, #36]	; 0x24
 80084ca:	9b08      	ldr	r3, [sp, #32]
 80084cc:	4621      	mov	r1, r4
 80084ce:	3b01      	subs	r3, #1
 80084d0:	4658      	mov	r0, fp
 80084d2:	9304      	str	r3, [sp, #16]
 80084d4:	f7ff fa66 	bl	80079a4 <quorem>
 80084d8:	4603      	mov	r3, r0
 80084da:	4641      	mov	r1, r8
 80084dc:	3330      	adds	r3, #48	; 0x30
 80084de:	9006      	str	r0, [sp, #24]
 80084e0:	4658      	mov	r0, fp
 80084e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80084e4:	f001 f95e 	bl	80097a4 <__mcmp>
 80084e8:	4632      	mov	r2, r6
 80084ea:	4681      	mov	r9, r0
 80084ec:	4621      	mov	r1, r4
 80084ee:	4628      	mov	r0, r5
 80084f0:	f001 f974 	bl	80097dc <__mdiff>
 80084f4:	68c2      	ldr	r2, [r0, #12]
 80084f6:	4607      	mov	r7, r0
 80084f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084fa:	bb02      	cbnz	r2, 800853e <_dtoa_r+0xa7e>
 80084fc:	4601      	mov	r1, r0
 80084fe:	4658      	mov	r0, fp
 8008500:	f001 f950 	bl	80097a4 <__mcmp>
 8008504:	4602      	mov	r2, r0
 8008506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008508:	4639      	mov	r1, r7
 800850a:	4628      	mov	r0, r5
 800850c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008510:	f000 fec0 	bl	8009294 <_Bfree>
 8008514:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008516:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008518:	9f08      	ldr	r7, [sp, #32]
 800851a:	ea43 0102 	orr.w	r1, r3, r2
 800851e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008520:	430b      	orrs	r3, r1
 8008522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008524:	d10d      	bne.n	8008542 <_dtoa_r+0xa82>
 8008526:	2b39      	cmp	r3, #57	; 0x39
 8008528:	d029      	beq.n	800857e <_dtoa_r+0xabe>
 800852a:	f1b9 0f00 	cmp.w	r9, #0
 800852e:	dd01      	ble.n	8008534 <_dtoa_r+0xa74>
 8008530:	9b06      	ldr	r3, [sp, #24]
 8008532:	3331      	adds	r3, #49	; 0x31
 8008534:	9a04      	ldr	r2, [sp, #16]
 8008536:	7013      	strb	r3, [r2, #0]
 8008538:	e776      	b.n	8008428 <_dtoa_r+0x968>
 800853a:	4630      	mov	r0, r6
 800853c:	e7b9      	b.n	80084b2 <_dtoa_r+0x9f2>
 800853e:	2201      	movs	r2, #1
 8008540:	e7e2      	b.n	8008508 <_dtoa_r+0xa48>
 8008542:	f1b9 0f00 	cmp.w	r9, #0
 8008546:	db06      	blt.n	8008556 <_dtoa_r+0xa96>
 8008548:	9922      	ldr	r1, [sp, #136]	; 0x88
 800854a:	ea41 0909 	orr.w	r9, r1, r9
 800854e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008550:	ea59 0101 	orrs.w	r1, r9, r1
 8008554:	d120      	bne.n	8008598 <_dtoa_r+0xad8>
 8008556:	2a00      	cmp	r2, #0
 8008558:	ddec      	ble.n	8008534 <_dtoa_r+0xa74>
 800855a:	4659      	mov	r1, fp
 800855c:	2201      	movs	r2, #1
 800855e:	4628      	mov	r0, r5
 8008560:	9308      	str	r3, [sp, #32]
 8008562:	f001 f8af 	bl	80096c4 <__lshift>
 8008566:	4621      	mov	r1, r4
 8008568:	4683      	mov	fp, r0
 800856a:	f001 f91b 	bl	80097a4 <__mcmp>
 800856e:	2800      	cmp	r0, #0
 8008570:	9b08      	ldr	r3, [sp, #32]
 8008572:	dc02      	bgt.n	800857a <_dtoa_r+0xaba>
 8008574:	d1de      	bne.n	8008534 <_dtoa_r+0xa74>
 8008576:	07da      	lsls	r2, r3, #31
 8008578:	d5dc      	bpl.n	8008534 <_dtoa_r+0xa74>
 800857a:	2b39      	cmp	r3, #57	; 0x39
 800857c:	d1d8      	bne.n	8008530 <_dtoa_r+0xa70>
 800857e:	2339      	movs	r3, #57	; 0x39
 8008580:	9a04      	ldr	r2, [sp, #16]
 8008582:	7013      	strb	r3, [r2, #0]
 8008584:	463b      	mov	r3, r7
 8008586:	461f      	mov	r7, r3
 8008588:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800858c:	3b01      	subs	r3, #1
 800858e:	2a39      	cmp	r2, #57	; 0x39
 8008590:	d050      	beq.n	8008634 <_dtoa_r+0xb74>
 8008592:	3201      	adds	r2, #1
 8008594:	701a      	strb	r2, [r3, #0]
 8008596:	e747      	b.n	8008428 <_dtoa_r+0x968>
 8008598:	2a00      	cmp	r2, #0
 800859a:	dd03      	ble.n	80085a4 <_dtoa_r+0xae4>
 800859c:	2b39      	cmp	r3, #57	; 0x39
 800859e:	d0ee      	beq.n	800857e <_dtoa_r+0xabe>
 80085a0:	3301      	adds	r3, #1
 80085a2:	e7c7      	b.n	8008534 <_dtoa_r+0xa74>
 80085a4:	9a08      	ldr	r2, [sp, #32]
 80085a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80085a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80085ac:	428a      	cmp	r2, r1
 80085ae:	d02a      	beq.n	8008606 <_dtoa_r+0xb46>
 80085b0:	4659      	mov	r1, fp
 80085b2:	2300      	movs	r3, #0
 80085b4:	220a      	movs	r2, #10
 80085b6:	4628      	mov	r0, r5
 80085b8:	f000 fe8e 	bl	80092d8 <__multadd>
 80085bc:	45b0      	cmp	r8, r6
 80085be:	4683      	mov	fp, r0
 80085c0:	f04f 0300 	mov.w	r3, #0
 80085c4:	f04f 020a 	mov.w	r2, #10
 80085c8:	4641      	mov	r1, r8
 80085ca:	4628      	mov	r0, r5
 80085cc:	d107      	bne.n	80085de <_dtoa_r+0xb1e>
 80085ce:	f000 fe83 	bl	80092d8 <__multadd>
 80085d2:	4680      	mov	r8, r0
 80085d4:	4606      	mov	r6, r0
 80085d6:	9b08      	ldr	r3, [sp, #32]
 80085d8:	3301      	adds	r3, #1
 80085da:	9308      	str	r3, [sp, #32]
 80085dc:	e775      	b.n	80084ca <_dtoa_r+0xa0a>
 80085de:	f000 fe7b 	bl	80092d8 <__multadd>
 80085e2:	4631      	mov	r1, r6
 80085e4:	4680      	mov	r8, r0
 80085e6:	2300      	movs	r3, #0
 80085e8:	220a      	movs	r2, #10
 80085ea:	4628      	mov	r0, r5
 80085ec:	f000 fe74 	bl	80092d8 <__multadd>
 80085f0:	4606      	mov	r6, r0
 80085f2:	e7f0      	b.n	80085d6 <_dtoa_r+0xb16>
 80085f4:	f1b9 0f00 	cmp.w	r9, #0
 80085f8:	bfcc      	ite	gt
 80085fa:	464f      	movgt	r7, r9
 80085fc:	2701      	movle	r7, #1
 80085fe:	f04f 0800 	mov.w	r8, #0
 8008602:	9a03      	ldr	r2, [sp, #12]
 8008604:	4417      	add	r7, r2
 8008606:	4659      	mov	r1, fp
 8008608:	2201      	movs	r2, #1
 800860a:	4628      	mov	r0, r5
 800860c:	9308      	str	r3, [sp, #32]
 800860e:	f001 f859 	bl	80096c4 <__lshift>
 8008612:	4621      	mov	r1, r4
 8008614:	4683      	mov	fp, r0
 8008616:	f001 f8c5 	bl	80097a4 <__mcmp>
 800861a:	2800      	cmp	r0, #0
 800861c:	dcb2      	bgt.n	8008584 <_dtoa_r+0xac4>
 800861e:	d102      	bne.n	8008626 <_dtoa_r+0xb66>
 8008620:	9b08      	ldr	r3, [sp, #32]
 8008622:	07db      	lsls	r3, r3, #31
 8008624:	d4ae      	bmi.n	8008584 <_dtoa_r+0xac4>
 8008626:	463b      	mov	r3, r7
 8008628:	461f      	mov	r7, r3
 800862a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800862e:	2a30      	cmp	r2, #48	; 0x30
 8008630:	d0fa      	beq.n	8008628 <_dtoa_r+0xb68>
 8008632:	e6f9      	b.n	8008428 <_dtoa_r+0x968>
 8008634:	9a03      	ldr	r2, [sp, #12]
 8008636:	429a      	cmp	r2, r3
 8008638:	d1a5      	bne.n	8008586 <_dtoa_r+0xac6>
 800863a:	2331      	movs	r3, #49	; 0x31
 800863c:	f10a 0a01 	add.w	sl, sl, #1
 8008640:	e779      	b.n	8008536 <_dtoa_r+0xa76>
 8008642:	4b14      	ldr	r3, [pc, #80]	; (8008694 <_dtoa_r+0xbd4>)
 8008644:	f7ff baa8 	b.w	8007b98 <_dtoa_r+0xd8>
 8008648:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800864a:	2b00      	cmp	r3, #0
 800864c:	f47f aa81 	bne.w	8007b52 <_dtoa_r+0x92>
 8008650:	4b11      	ldr	r3, [pc, #68]	; (8008698 <_dtoa_r+0xbd8>)
 8008652:	f7ff baa1 	b.w	8007b98 <_dtoa_r+0xd8>
 8008656:	f1b9 0f00 	cmp.w	r9, #0
 800865a:	dc03      	bgt.n	8008664 <_dtoa_r+0xba4>
 800865c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800865e:	2b02      	cmp	r3, #2
 8008660:	f73f aecb 	bgt.w	80083fa <_dtoa_r+0x93a>
 8008664:	9f03      	ldr	r7, [sp, #12]
 8008666:	4621      	mov	r1, r4
 8008668:	4658      	mov	r0, fp
 800866a:	f7ff f99b 	bl	80079a4 <quorem>
 800866e:	9a03      	ldr	r2, [sp, #12]
 8008670:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008674:	f807 3b01 	strb.w	r3, [r7], #1
 8008678:	1aba      	subs	r2, r7, r2
 800867a:	4591      	cmp	r9, r2
 800867c:	ddba      	ble.n	80085f4 <_dtoa_r+0xb34>
 800867e:	4659      	mov	r1, fp
 8008680:	2300      	movs	r3, #0
 8008682:	220a      	movs	r2, #10
 8008684:	4628      	mov	r0, r5
 8008686:	f000 fe27 	bl	80092d8 <__multadd>
 800868a:	4683      	mov	fp, r0
 800868c:	e7eb      	b.n	8008666 <_dtoa_r+0xba6>
 800868e:	bf00      	nop
 8008690:	0800ac50 	.word	0x0800ac50
 8008694:	0800aa50 	.word	0x0800aa50
 8008698:	0800abd1 	.word	0x0800abd1

0800869c <__sflush_r>:
 800869c:	898a      	ldrh	r2, [r1, #12]
 800869e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a0:	4605      	mov	r5, r0
 80086a2:	0710      	lsls	r0, r2, #28
 80086a4:	460c      	mov	r4, r1
 80086a6:	d457      	bmi.n	8008758 <__sflush_r+0xbc>
 80086a8:	684b      	ldr	r3, [r1, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	dc04      	bgt.n	80086b8 <__sflush_r+0x1c>
 80086ae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	dc01      	bgt.n	80086b8 <__sflush_r+0x1c>
 80086b4:	2000      	movs	r0, #0
 80086b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086ba:	2e00      	cmp	r6, #0
 80086bc:	d0fa      	beq.n	80086b4 <__sflush_r+0x18>
 80086be:	2300      	movs	r3, #0
 80086c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086c4:	682f      	ldr	r7, [r5, #0]
 80086c6:	602b      	str	r3, [r5, #0]
 80086c8:	d032      	beq.n	8008730 <__sflush_r+0x94>
 80086ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086cc:	89a3      	ldrh	r3, [r4, #12]
 80086ce:	075a      	lsls	r2, r3, #29
 80086d0:	d505      	bpl.n	80086de <__sflush_r+0x42>
 80086d2:	6863      	ldr	r3, [r4, #4]
 80086d4:	1ac0      	subs	r0, r0, r3
 80086d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086d8:	b10b      	cbz	r3, 80086de <__sflush_r+0x42>
 80086da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086dc:	1ac0      	subs	r0, r0, r3
 80086de:	2300      	movs	r3, #0
 80086e0:	4602      	mov	r2, r0
 80086e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086e4:	4628      	mov	r0, r5
 80086e6:	6a21      	ldr	r1, [r4, #32]
 80086e8:	47b0      	blx	r6
 80086ea:	1c43      	adds	r3, r0, #1
 80086ec:	89a3      	ldrh	r3, [r4, #12]
 80086ee:	d106      	bne.n	80086fe <__sflush_r+0x62>
 80086f0:	6829      	ldr	r1, [r5, #0]
 80086f2:	291d      	cmp	r1, #29
 80086f4:	d82c      	bhi.n	8008750 <__sflush_r+0xb4>
 80086f6:	4a29      	ldr	r2, [pc, #164]	; (800879c <__sflush_r+0x100>)
 80086f8:	40ca      	lsrs	r2, r1
 80086fa:	07d6      	lsls	r6, r2, #31
 80086fc:	d528      	bpl.n	8008750 <__sflush_r+0xb4>
 80086fe:	2200      	movs	r2, #0
 8008700:	6062      	str	r2, [r4, #4]
 8008702:	6922      	ldr	r2, [r4, #16]
 8008704:	04d9      	lsls	r1, r3, #19
 8008706:	6022      	str	r2, [r4, #0]
 8008708:	d504      	bpl.n	8008714 <__sflush_r+0x78>
 800870a:	1c42      	adds	r2, r0, #1
 800870c:	d101      	bne.n	8008712 <__sflush_r+0x76>
 800870e:	682b      	ldr	r3, [r5, #0]
 8008710:	b903      	cbnz	r3, 8008714 <__sflush_r+0x78>
 8008712:	6560      	str	r0, [r4, #84]	; 0x54
 8008714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008716:	602f      	str	r7, [r5, #0]
 8008718:	2900      	cmp	r1, #0
 800871a:	d0cb      	beq.n	80086b4 <__sflush_r+0x18>
 800871c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008720:	4299      	cmp	r1, r3
 8008722:	d002      	beq.n	800872a <__sflush_r+0x8e>
 8008724:	4628      	mov	r0, r5
 8008726:	f001 fa41 	bl	8009bac <_free_r>
 800872a:	2000      	movs	r0, #0
 800872c:	6360      	str	r0, [r4, #52]	; 0x34
 800872e:	e7c2      	b.n	80086b6 <__sflush_r+0x1a>
 8008730:	6a21      	ldr	r1, [r4, #32]
 8008732:	2301      	movs	r3, #1
 8008734:	4628      	mov	r0, r5
 8008736:	47b0      	blx	r6
 8008738:	1c41      	adds	r1, r0, #1
 800873a:	d1c7      	bne.n	80086cc <__sflush_r+0x30>
 800873c:	682b      	ldr	r3, [r5, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0c4      	beq.n	80086cc <__sflush_r+0x30>
 8008742:	2b1d      	cmp	r3, #29
 8008744:	d001      	beq.n	800874a <__sflush_r+0xae>
 8008746:	2b16      	cmp	r3, #22
 8008748:	d101      	bne.n	800874e <__sflush_r+0xb2>
 800874a:	602f      	str	r7, [r5, #0]
 800874c:	e7b2      	b.n	80086b4 <__sflush_r+0x18>
 800874e:	89a3      	ldrh	r3, [r4, #12]
 8008750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008754:	81a3      	strh	r3, [r4, #12]
 8008756:	e7ae      	b.n	80086b6 <__sflush_r+0x1a>
 8008758:	690f      	ldr	r7, [r1, #16]
 800875a:	2f00      	cmp	r7, #0
 800875c:	d0aa      	beq.n	80086b4 <__sflush_r+0x18>
 800875e:	0793      	lsls	r3, r2, #30
 8008760:	bf18      	it	ne
 8008762:	2300      	movne	r3, #0
 8008764:	680e      	ldr	r6, [r1, #0]
 8008766:	bf08      	it	eq
 8008768:	694b      	ldreq	r3, [r1, #20]
 800876a:	1bf6      	subs	r6, r6, r7
 800876c:	600f      	str	r7, [r1, #0]
 800876e:	608b      	str	r3, [r1, #8]
 8008770:	2e00      	cmp	r6, #0
 8008772:	dd9f      	ble.n	80086b4 <__sflush_r+0x18>
 8008774:	4633      	mov	r3, r6
 8008776:	463a      	mov	r2, r7
 8008778:	4628      	mov	r0, r5
 800877a:	6a21      	ldr	r1, [r4, #32]
 800877c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008780:	47e0      	blx	ip
 8008782:	2800      	cmp	r0, #0
 8008784:	dc06      	bgt.n	8008794 <__sflush_r+0xf8>
 8008786:	89a3      	ldrh	r3, [r4, #12]
 8008788:	f04f 30ff 	mov.w	r0, #4294967295
 800878c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008790:	81a3      	strh	r3, [r4, #12]
 8008792:	e790      	b.n	80086b6 <__sflush_r+0x1a>
 8008794:	4407      	add	r7, r0
 8008796:	1a36      	subs	r6, r6, r0
 8008798:	e7ea      	b.n	8008770 <__sflush_r+0xd4>
 800879a:	bf00      	nop
 800879c:	20400001 	.word	0x20400001

080087a0 <_fflush_r>:
 80087a0:	b538      	push	{r3, r4, r5, lr}
 80087a2:	690b      	ldr	r3, [r1, #16]
 80087a4:	4605      	mov	r5, r0
 80087a6:	460c      	mov	r4, r1
 80087a8:	b913      	cbnz	r3, 80087b0 <_fflush_r+0x10>
 80087aa:	2500      	movs	r5, #0
 80087ac:	4628      	mov	r0, r5
 80087ae:	bd38      	pop	{r3, r4, r5, pc}
 80087b0:	b118      	cbz	r0, 80087ba <_fflush_r+0x1a>
 80087b2:	6983      	ldr	r3, [r0, #24]
 80087b4:	b90b      	cbnz	r3, 80087ba <_fflush_r+0x1a>
 80087b6:	f000 f887 	bl	80088c8 <__sinit>
 80087ba:	4b14      	ldr	r3, [pc, #80]	; (800880c <_fflush_r+0x6c>)
 80087bc:	429c      	cmp	r4, r3
 80087be:	d11b      	bne.n	80087f8 <_fflush_r+0x58>
 80087c0:	686c      	ldr	r4, [r5, #4]
 80087c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d0ef      	beq.n	80087aa <_fflush_r+0xa>
 80087ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087cc:	07d0      	lsls	r0, r2, #31
 80087ce:	d404      	bmi.n	80087da <_fflush_r+0x3a>
 80087d0:	0599      	lsls	r1, r3, #22
 80087d2:	d402      	bmi.n	80087da <_fflush_r+0x3a>
 80087d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087d6:	f000 fc80 	bl	80090da <__retarget_lock_acquire_recursive>
 80087da:	4628      	mov	r0, r5
 80087dc:	4621      	mov	r1, r4
 80087de:	f7ff ff5d 	bl	800869c <__sflush_r>
 80087e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087e4:	4605      	mov	r5, r0
 80087e6:	07da      	lsls	r2, r3, #31
 80087e8:	d4e0      	bmi.n	80087ac <_fflush_r+0xc>
 80087ea:	89a3      	ldrh	r3, [r4, #12]
 80087ec:	059b      	lsls	r3, r3, #22
 80087ee:	d4dd      	bmi.n	80087ac <_fflush_r+0xc>
 80087f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087f2:	f000 fc73 	bl	80090dc <__retarget_lock_release_recursive>
 80087f6:	e7d9      	b.n	80087ac <_fflush_r+0xc>
 80087f8:	4b05      	ldr	r3, [pc, #20]	; (8008810 <_fflush_r+0x70>)
 80087fa:	429c      	cmp	r4, r3
 80087fc:	d101      	bne.n	8008802 <_fflush_r+0x62>
 80087fe:	68ac      	ldr	r4, [r5, #8]
 8008800:	e7df      	b.n	80087c2 <_fflush_r+0x22>
 8008802:	4b04      	ldr	r3, [pc, #16]	; (8008814 <_fflush_r+0x74>)
 8008804:	429c      	cmp	r4, r3
 8008806:	bf08      	it	eq
 8008808:	68ec      	ldreq	r4, [r5, #12]
 800880a:	e7da      	b.n	80087c2 <_fflush_r+0x22>
 800880c:	0800ac84 	.word	0x0800ac84
 8008810:	0800aca4 	.word	0x0800aca4
 8008814:	0800ac64 	.word	0x0800ac64

08008818 <std>:
 8008818:	2300      	movs	r3, #0
 800881a:	b510      	push	{r4, lr}
 800881c:	4604      	mov	r4, r0
 800881e:	e9c0 3300 	strd	r3, r3, [r0]
 8008822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008826:	6083      	str	r3, [r0, #8]
 8008828:	8181      	strh	r1, [r0, #12]
 800882a:	6643      	str	r3, [r0, #100]	; 0x64
 800882c:	81c2      	strh	r2, [r0, #14]
 800882e:	6183      	str	r3, [r0, #24]
 8008830:	4619      	mov	r1, r3
 8008832:	2208      	movs	r2, #8
 8008834:	305c      	adds	r0, #92	; 0x5c
 8008836:	f7fd fa0d 	bl	8005c54 <memset>
 800883a:	4b05      	ldr	r3, [pc, #20]	; (8008850 <std+0x38>)
 800883c:	6224      	str	r4, [r4, #32]
 800883e:	6263      	str	r3, [r4, #36]	; 0x24
 8008840:	4b04      	ldr	r3, [pc, #16]	; (8008854 <std+0x3c>)
 8008842:	62a3      	str	r3, [r4, #40]	; 0x28
 8008844:	4b04      	ldr	r3, [pc, #16]	; (8008858 <std+0x40>)
 8008846:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008848:	4b04      	ldr	r3, [pc, #16]	; (800885c <std+0x44>)
 800884a:	6323      	str	r3, [r4, #48]	; 0x30
 800884c:	bd10      	pop	{r4, pc}
 800884e:	bf00      	nop
 8008850:	0800a389 	.word	0x0800a389
 8008854:	0800a3ab 	.word	0x0800a3ab
 8008858:	0800a3e3 	.word	0x0800a3e3
 800885c:	0800a407 	.word	0x0800a407

08008860 <_cleanup_r>:
 8008860:	4901      	ldr	r1, [pc, #4]	; (8008868 <_cleanup_r+0x8>)
 8008862:	f000 b8af 	b.w	80089c4 <_fwalk_reent>
 8008866:	bf00      	nop
 8008868:	080087a1 	.word	0x080087a1

0800886c <__sfmoreglue>:
 800886c:	2268      	movs	r2, #104	; 0x68
 800886e:	b570      	push	{r4, r5, r6, lr}
 8008870:	1e4d      	subs	r5, r1, #1
 8008872:	4355      	muls	r5, r2
 8008874:	460e      	mov	r6, r1
 8008876:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800887a:	f001 f9ff 	bl	8009c7c <_malloc_r>
 800887e:	4604      	mov	r4, r0
 8008880:	b140      	cbz	r0, 8008894 <__sfmoreglue+0x28>
 8008882:	2100      	movs	r1, #0
 8008884:	e9c0 1600 	strd	r1, r6, [r0]
 8008888:	300c      	adds	r0, #12
 800888a:	60a0      	str	r0, [r4, #8]
 800888c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008890:	f7fd f9e0 	bl	8005c54 <memset>
 8008894:	4620      	mov	r0, r4
 8008896:	bd70      	pop	{r4, r5, r6, pc}

08008898 <__sfp_lock_acquire>:
 8008898:	4801      	ldr	r0, [pc, #4]	; (80088a0 <__sfp_lock_acquire+0x8>)
 800889a:	f000 bc1e 	b.w	80090da <__retarget_lock_acquire_recursive>
 800889e:	bf00      	nop
 80088a0:	200003e1 	.word	0x200003e1

080088a4 <__sfp_lock_release>:
 80088a4:	4801      	ldr	r0, [pc, #4]	; (80088ac <__sfp_lock_release+0x8>)
 80088a6:	f000 bc19 	b.w	80090dc <__retarget_lock_release_recursive>
 80088aa:	bf00      	nop
 80088ac:	200003e1 	.word	0x200003e1

080088b0 <__sinit_lock_acquire>:
 80088b0:	4801      	ldr	r0, [pc, #4]	; (80088b8 <__sinit_lock_acquire+0x8>)
 80088b2:	f000 bc12 	b.w	80090da <__retarget_lock_acquire_recursive>
 80088b6:	bf00      	nop
 80088b8:	200003e2 	.word	0x200003e2

080088bc <__sinit_lock_release>:
 80088bc:	4801      	ldr	r0, [pc, #4]	; (80088c4 <__sinit_lock_release+0x8>)
 80088be:	f000 bc0d 	b.w	80090dc <__retarget_lock_release_recursive>
 80088c2:	bf00      	nop
 80088c4:	200003e2 	.word	0x200003e2

080088c8 <__sinit>:
 80088c8:	b510      	push	{r4, lr}
 80088ca:	4604      	mov	r4, r0
 80088cc:	f7ff fff0 	bl	80088b0 <__sinit_lock_acquire>
 80088d0:	69a3      	ldr	r3, [r4, #24]
 80088d2:	b11b      	cbz	r3, 80088dc <__sinit+0x14>
 80088d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088d8:	f7ff bff0 	b.w	80088bc <__sinit_lock_release>
 80088dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80088e0:	6523      	str	r3, [r4, #80]	; 0x50
 80088e2:	4b13      	ldr	r3, [pc, #76]	; (8008930 <__sinit+0x68>)
 80088e4:	4a13      	ldr	r2, [pc, #76]	; (8008934 <__sinit+0x6c>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80088ea:	42a3      	cmp	r3, r4
 80088ec:	bf08      	it	eq
 80088ee:	2301      	moveq	r3, #1
 80088f0:	4620      	mov	r0, r4
 80088f2:	bf08      	it	eq
 80088f4:	61a3      	streq	r3, [r4, #24]
 80088f6:	f000 f81f 	bl	8008938 <__sfp>
 80088fa:	6060      	str	r0, [r4, #4]
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 f81b 	bl	8008938 <__sfp>
 8008902:	60a0      	str	r0, [r4, #8]
 8008904:	4620      	mov	r0, r4
 8008906:	f000 f817 	bl	8008938 <__sfp>
 800890a:	2200      	movs	r2, #0
 800890c:	2104      	movs	r1, #4
 800890e:	60e0      	str	r0, [r4, #12]
 8008910:	6860      	ldr	r0, [r4, #4]
 8008912:	f7ff ff81 	bl	8008818 <std>
 8008916:	2201      	movs	r2, #1
 8008918:	2109      	movs	r1, #9
 800891a:	68a0      	ldr	r0, [r4, #8]
 800891c:	f7ff ff7c 	bl	8008818 <std>
 8008920:	2202      	movs	r2, #2
 8008922:	2112      	movs	r1, #18
 8008924:	68e0      	ldr	r0, [r4, #12]
 8008926:	f7ff ff77 	bl	8008818 <std>
 800892a:	2301      	movs	r3, #1
 800892c:	61a3      	str	r3, [r4, #24]
 800892e:	e7d1      	b.n	80088d4 <__sinit+0xc>
 8008930:	0800aa3c 	.word	0x0800aa3c
 8008934:	08008861 	.word	0x08008861

08008938 <__sfp>:
 8008938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800893a:	4607      	mov	r7, r0
 800893c:	f7ff ffac 	bl	8008898 <__sfp_lock_acquire>
 8008940:	4b1e      	ldr	r3, [pc, #120]	; (80089bc <__sfp+0x84>)
 8008942:	681e      	ldr	r6, [r3, #0]
 8008944:	69b3      	ldr	r3, [r6, #24]
 8008946:	b913      	cbnz	r3, 800894e <__sfp+0x16>
 8008948:	4630      	mov	r0, r6
 800894a:	f7ff ffbd 	bl	80088c8 <__sinit>
 800894e:	3648      	adds	r6, #72	; 0x48
 8008950:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008954:	3b01      	subs	r3, #1
 8008956:	d503      	bpl.n	8008960 <__sfp+0x28>
 8008958:	6833      	ldr	r3, [r6, #0]
 800895a:	b30b      	cbz	r3, 80089a0 <__sfp+0x68>
 800895c:	6836      	ldr	r6, [r6, #0]
 800895e:	e7f7      	b.n	8008950 <__sfp+0x18>
 8008960:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008964:	b9d5      	cbnz	r5, 800899c <__sfp+0x64>
 8008966:	4b16      	ldr	r3, [pc, #88]	; (80089c0 <__sfp+0x88>)
 8008968:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800896c:	60e3      	str	r3, [r4, #12]
 800896e:	6665      	str	r5, [r4, #100]	; 0x64
 8008970:	f000 fbb2 	bl	80090d8 <__retarget_lock_init_recursive>
 8008974:	f7ff ff96 	bl	80088a4 <__sfp_lock_release>
 8008978:	2208      	movs	r2, #8
 800897a:	4629      	mov	r1, r5
 800897c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008980:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008984:	6025      	str	r5, [r4, #0]
 8008986:	61a5      	str	r5, [r4, #24]
 8008988:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800898c:	f7fd f962 	bl	8005c54 <memset>
 8008990:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008994:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008998:	4620      	mov	r0, r4
 800899a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800899c:	3468      	adds	r4, #104	; 0x68
 800899e:	e7d9      	b.n	8008954 <__sfp+0x1c>
 80089a0:	2104      	movs	r1, #4
 80089a2:	4638      	mov	r0, r7
 80089a4:	f7ff ff62 	bl	800886c <__sfmoreglue>
 80089a8:	4604      	mov	r4, r0
 80089aa:	6030      	str	r0, [r6, #0]
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d1d5      	bne.n	800895c <__sfp+0x24>
 80089b0:	f7ff ff78 	bl	80088a4 <__sfp_lock_release>
 80089b4:	230c      	movs	r3, #12
 80089b6:	603b      	str	r3, [r7, #0]
 80089b8:	e7ee      	b.n	8008998 <__sfp+0x60>
 80089ba:	bf00      	nop
 80089bc:	0800aa3c 	.word	0x0800aa3c
 80089c0:	ffff0001 	.word	0xffff0001

080089c4 <_fwalk_reent>:
 80089c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089c8:	4606      	mov	r6, r0
 80089ca:	4688      	mov	r8, r1
 80089cc:	2700      	movs	r7, #0
 80089ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80089d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089d6:	f1b9 0901 	subs.w	r9, r9, #1
 80089da:	d505      	bpl.n	80089e8 <_fwalk_reent+0x24>
 80089dc:	6824      	ldr	r4, [r4, #0]
 80089de:	2c00      	cmp	r4, #0
 80089e0:	d1f7      	bne.n	80089d2 <_fwalk_reent+0xe>
 80089e2:	4638      	mov	r0, r7
 80089e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089e8:	89ab      	ldrh	r3, [r5, #12]
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d907      	bls.n	80089fe <_fwalk_reent+0x3a>
 80089ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089f2:	3301      	adds	r3, #1
 80089f4:	d003      	beq.n	80089fe <_fwalk_reent+0x3a>
 80089f6:	4629      	mov	r1, r5
 80089f8:	4630      	mov	r0, r6
 80089fa:	47c0      	blx	r8
 80089fc:	4307      	orrs	r7, r0
 80089fe:	3568      	adds	r5, #104	; 0x68
 8008a00:	e7e9      	b.n	80089d6 <_fwalk_reent+0x12>

08008a02 <rshift>:
 8008a02:	6903      	ldr	r3, [r0, #16]
 8008a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a08:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008a0c:	f100 0414 	add.w	r4, r0, #20
 8008a10:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008a14:	dd46      	ble.n	8008aa4 <rshift+0xa2>
 8008a16:	f011 011f 	ands.w	r1, r1, #31
 8008a1a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008a1e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008a22:	d10c      	bne.n	8008a3e <rshift+0x3c>
 8008a24:	4629      	mov	r1, r5
 8008a26:	f100 0710 	add.w	r7, r0, #16
 8008a2a:	42b1      	cmp	r1, r6
 8008a2c:	d335      	bcc.n	8008a9a <rshift+0x98>
 8008a2e:	1a9b      	subs	r3, r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	1eea      	subs	r2, r5, #3
 8008a34:	4296      	cmp	r6, r2
 8008a36:	bf38      	it	cc
 8008a38:	2300      	movcc	r3, #0
 8008a3a:	4423      	add	r3, r4
 8008a3c:	e015      	b.n	8008a6a <rshift+0x68>
 8008a3e:	46a1      	mov	r9, r4
 8008a40:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008a44:	f1c1 0820 	rsb	r8, r1, #32
 8008a48:	40cf      	lsrs	r7, r1
 8008a4a:	f105 0e04 	add.w	lr, r5, #4
 8008a4e:	4576      	cmp	r6, lr
 8008a50:	46f4      	mov	ip, lr
 8008a52:	d816      	bhi.n	8008a82 <rshift+0x80>
 8008a54:	1a9a      	subs	r2, r3, r2
 8008a56:	0092      	lsls	r2, r2, #2
 8008a58:	3a04      	subs	r2, #4
 8008a5a:	3501      	adds	r5, #1
 8008a5c:	42ae      	cmp	r6, r5
 8008a5e:	bf38      	it	cc
 8008a60:	2200      	movcc	r2, #0
 8008a62:	18a3      	adds	r3, r4, r2
 8008a64:	50a7      	str	r7, [r4, r2]
 8008a66:	b107      	cbz	r7, 8008a6a <rshift+0x68>
 8008a68:	3304      	adds	r3, #4
 8008a6a:	42a3      	cmp	r3, r4
 8008a6c:	eba3 0204 	sub.w	r2, r3, r4
 8008a70:	bf08      	it	eq
 8008a72:	2300      	moveq	r3, #0
 8008a74:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008a78:	6102      	str	r2, [r0, #16]
 8008a7a:	bf08      	it	eq
 8008a7c:	6143      	streq	r3, [r0, #20]
 8008a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a82:	f8dc c000 	ldr.w	ip, [ip]
 8008a86:	fa0c fc08 	lsl.w	ip, ip, r8
 8008a8a:	ea4c 0707 	orr.w	r7, ip, r7
 8008a8e:	f849 7b04 	str.w	r7, [r9], #4
 8008a92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008a96:	40cf      	lsrs	r7, r1
 8008a98:	e7d9      	b.n	8008a4e <rshift+0x4c>
 8008a9a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008a9e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008aa2:	e7c2      	b.n	8008a2a <rshift+0x28>
 8008aa4:	4623      	mov	r3, r4
 8008aa6:	e7e0      	b.n	8008a6a <rshift+0x68>

08008aa8 <__hexdig_fun>:
 8008aa8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008aac:	2b09      	cmp	r3, #9
 8008aae:	d802      	bhi.n	8008ab6 <__hexdig_fun+0xe>
 8008ab0:	3820      	subs	r0, #32
 8008ab2:	b2c0      	uxtb	r0, r0
 8008ab4:	4770      	bx	lr
 8008ab6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008aba:	2b05      	cmp	r3, #5
 8008abc:	d801      	bhi.n	8008ac2 <__hexdig_fun+0x1a>
 8008abe:	3847      	subs	r0, #71	; 0x47
 8008ac0:	e7f7      	b.n	8008ab2 <__hexdig_fun+0xa>
 8008ac2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008ac6:	2b05      	cmp	r3, #5
 8008ac8:	d801      	bhi.n	8008ace <__hexdig_fun+0x26>
 8008aca:	3827      	subs	r0, #39	; 0x27
 8008acc:	e7f1      	b.n	8008ab2 <__hexdig_fun+0xa>
 8008ace:	2000      	movs	r0, #0
 8008ad0:	4770      	bx	lr
	...

08008ad4 <__gethex>:
 8008ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad8:	b08b      	sub	sp, #44	; 0x2c
 8008ada:	9305      	str	r3, [sp, #20]
 8008adc:	4bb2      	ldr	r3, [pc, #712]	; (8008da8 <__gethex+0x2d4>)
 8008ade:	9002      	str	r0, [sp, #8]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	468b      	mov	fp, r1
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	4690      	mov	r8, r2
 8008ae8:	9303      	str	r3, [sp, #12]
 8008aea:	f7f7 fb3b 	bl	8000164 <strlen>
 8008aee:	4682      	mov	sl, r0
 8008af0:	9b03      	ldr	r3, [sp, #12]
 8008af2:	f8db 2000 	ldr.w	r2, [fp]
 8008af6:	4403      	add	r3, r0
 8008af8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008afc:	9306      	str	r3, [sp, #24]
 8008afe:	1c93      	adds	r3, r2, #2
 8008b00:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008b04:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008b08:	32fe      	adds	r2, #254	; 0xfe
 8008b0a:	18d1      	adds	r1, r2, r3
 8008b0c:	461f      	mov	r7, r3
 8008b0e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008b12:	9101      	str	r1, [sp, #4]
 8008b14:	2830      	cmp	r0, #48	; 0x30
 8008b16:	d0f8      	beq.n	8008b0a <__gethex+0x36>
 8008b18:	f7ff ffc6 	bl	8008aa8 <__hexdig_fun>
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d13a      	bne.n	8008b98 <__gethex+0xc4>
 8008b22:	4652      	mov	r2, sl
 8008b24:	4638      	mov	r0, r7
 8008b26:	9903      	ldr	r1, [sp, #12]
 8008b28:	f001 fc71 	bl	800a40e <strncmp>
 8008b2c:	4605      	mov	r5, r0
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	d166      	bne.n	8008c00 <__gethex+0x12c>
 8008b32:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008b36:	eb07 060a 	add.w	r6, r7, sl
 8008b3a:	f7ff ffb5 	bl	8008aa8 <__hexdig_fun>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d060      	beq.n	8008c04 <__gethex+0x130>
 8008b42:	4633      	mov	r3, r6
 8008b44:	7818      	ldrb	r0, [r3, #0]
 8008b46:	461f      	mov	r7, r3
 8008b48:	2830      	cmp	r0, #48	; 0x30
 8008b4a:	f103 0301 	add.w	r3, r3, #1
 8008b4e:	d0f9      	beq.n	8008b44 <__gethex+0x70>
 8008b50:	f7ff ffaa 	bl	8008aa8 <__hexdig_fun>
 8008b54:	2301      	movs	r3, #1
 8008b56:	fab0 f480 	clz	r4, r0
 8008b5a:	4635      	mov	r5, r6
 8008b5c:	0964      	lsrs	r4, r4, #5
 8008b5e:	9301      	str	r3, [sp, #4]
 8008b60:	463a      	mov	r2, r7
 8008b62:	4616      	mov	r6, r2
 8008b64:	7830      	ldrb	r0, [r6, #0]
 8008b66:	3201      	adds	r2, #1
 8008b68:	f7ff ff9e 	bl	8008aa8 <__hexdig_fun>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	d1f8      	bne.n	8008b62 <__gethex+0x8e>
 8008b70:	4652      	mov	r2, sl
 8008b72:	4630      	mov	r0, r6
 8008b74:	9903      	ldr	r1, [sp, #12]
 8008b76:	f001 fc4a 	bl	800a40e <strncmp>
 8008b7a:	b980      	cbnz	r0, 8008b9e <__gethex+0xca>
 8008b7c:	b94d      	cbnz	r5, 8008b92 <__gethex+0xbe>
 8008b7e:	eb06 050a 	add.w	r5, r6, sl
 8008b82:	462a      	mov	r2, r5
 8008b84:	4616      	mov	r6, r2
 8008b86:	7830      	ldrb	r0, [r6, #0]
 8008b88:	3201      	adds	r2, #1
 8008b8a:	f7ff ff8d 	bl	8008aa8 <__hexdig_fun>
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	d1f8      	bne.n	8008b84 <__gethex+0xb0>
 8008b92:	1bad      	subs	r5, r5, r6
 8008b94:	00ad      	lsls	r5, r5, #2
 8008b96:	e004      	b.n	8008ba2 <__gethex+0xce>
 8008b98:	2400      	movs	r4, #0
 8008b9a:	4625      	mov	r5, r4
 8008b9c:	e7e0      	b.n	8008b60 <__gethex+0x8c>
 8008b9e:	2d00      	cmp	r5, #0
 8008ba0:	d1f7      	bne.n	8008b92 <__gethex+0xbe>
 8008ba2:	7833      	ldrb	r3, [r6, #0]
 8008ba4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ba8:	2b50      	cmp	r3, #80	; 0x50
 8008baa:	d139      	bne.n	8008c20 <__gethex+0x14c>
 8008bac:	7873      	ldrb	r3, [r6, #1]
 8008bae:	2b2b      	cmp	r3, #43	; 0x2b
 8008bb0:	d02a      	beq.n	8008c08 <__gethex+0x134>
 8008bb2:	2b2d      	cmp	r3, #45	; 0x2d
 8008bb4:	d02c      	beq.n	8008c10 <__gethex+0x13c>
 8008bb6:	f04f 0900 	mov.w	r9, #0
 8008bba:	1c71      	adds	r1, r6, #1
 8008bbc:	7808      	ldrb	r0, [r1, #0]
 8008bbe:	f7ff ff73 	bl	8008aa8 <__hexdig_fun>
 8008bc2:	1e43      	subs	r3, r0, #1
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b18      	cmp	r3, #24
 8008bc8:	d82a      	bhi.n	8008c20 <__gethex+0x14c>
 8008bca:	f1a0 0210 	sub.w	r2, r0, #16
 8008bce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008bd2:	f7ff ff69 	bl	8008aa8 <__hexdig_fun>
 8008bd6:	1e43      	subs	r3, r0, #1
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b18      	cmp	r3, #24
 8008bdc:	d91b      	bls.n	8008c16 <__gethex+0x142>
 8008bde:	f1b9 0f00 	cmp.w	r9, #0
 8008be2:	d000      	beq.n	8008be6 <__gethex+0x112>
 8008be4:	4252      	negs	r2, r2
 8008be6:	4415      	add	r5, r2
 8008be8:	f8cb 1000 	str.w	r1, [fp]
 8008bec:	b1d4      	cbz	r4, 8008c24 <__gethex+0x150>
 8008bee:	9b01      	ldr	r3, [sp, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	bf14      	ite	ne
 8008bf4:	2700      	movne	r7, #0
 8008bf6:	2706      	moveq	r7, #6
 8008bf8:	4638      	mov	r0, r7
 8008bfa:	b00b      	add	sp, #44	; 0x2c
 8008bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c00:	463e      	mov	r6, r7
 8008c02:	4625      	mov	r5, r4
 8008c04:	2401      	movs	r4, #1
 8008c06:	e7cc      	b.n	8008ba2 <__gethex+0xce>
 8008c08:	f04f 0900 	mov.w	r9, #0
 8008c0c:	1cb1      	adds	r1, r6, #2
 8008c0e:	e7d5      	b.n	8008bbc <__gethex+0xe8>
 8008c10:	f04f 0901 	mov.w	r9, #1
 8008c14:	e7fa      	b.n	8008c0c <__gethex+0x138>
 8008c16:	230a      	movs	r3, #10
 8008c18:	fb03 0202 	mla	r2, r3, r2, r0
 8008c1c:	3a10      	subs	r2, #16
 8008c1e:	e7d6      	b.n	8008bce <__gethex+0xfa>
 8008c20:	4631      	mov	r1, r6
 8008c22:	e7e1      	b.n	8008be8 <__gethex+0x114>
 8008c24:	4621      	mov	r1, r4
 8008c26:	1bf3      	subs	r3, r6, r7
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	2b07      	cmp	r3, #7
 8008c2c:	dc0a      	bgt.n	8008c44 <__gethex+0x170>
 8008c2e:	9802      	ldr	r0, [sp, #8]
 8008c30:	f000 faf0 	bl	8009214 <_Balloc>
 8008c34:	4604      	mov	r4, r0
 8008c36:	b940      	cbnz	r0, 8008c4a <__gethex+0x176>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	21de      	movs	r1, #222	; 0xde
 8008c3c:	4b5b      	ldr	r3, [pc, #364]	; (8008dac <__gethex+0x2d8>)
 8008c3e:	485c      	ldr	r0, [pc, #368]	; (8008db0 <__gethex+0x2dc>)
 8008c40:	f001 fc18 	bl	800a474 <__assert_func>
 8008c44:	3101      	adds	r1, #1
 8008c46:	105b      	asrs	r3, r3, #1
 8008c48:	e7ef      	b.n	8008c2a <__gethex+0x156>
 8008c4a:	f04f 0b00 	mov.w	fp, #0
 8008c4e:	f100 0914 	add.w	r9, r0, #20
 8008c52:	f1ca 0301 	rsb	r3, sl, #1
 8008c56:	f8cd 9010 	str.w	r9, [sp, #16]
 8008c5a:	f8cd b004 	str.w	fp, [sp, #4]
 8008c5e:	9308      	str	r3, [sp, #32]
 8008c60:	42b7      	cmp	r7, r6
 8008c62:	d33f      	bcc.n	8008ce4 <__gethex+0x210>
 8008c64:	9f04      	ldr	r7, [sp, #16]
 8008c66:	9b01      	ldr	r3, [sp, #4]
 8008c68:	f847 3b04 	str.w	r3, [r7], #4
 8008c6c:	eba7 0709 	sub.w	r7, r7, r9
 8008c70:	10bf      	asrs	r7, r7, #2
 8008c72:	6127      	str	r7, [r4, #16]
 8008c74:	4618      	mov	r0, r3
 8008c76:	f000 fbbf 	bl	80093f8 <__hi0bits>
 8008c7a:	017f      	lsls	r7, r7, #5
 8008c7c:	f8d8 6000 	ldr.w	r6, [r8]
 8008c80:	1a3f      	subs	r7, r7, r0
 8008c82:	42b7      	cmp	r7, r6
 8008c84:	dd62      	ble.n	8008d4c <__gethex+0x278>
 8008c86:	1bbf      	subs	r7, r7, r6
 8008c88:	4639      	mov	r1, r7
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f000 ff59 	bl	8009b42 <__any_on>
 8008c90:	4682      	mov	sl, r0
 8008c92:	b1a8      	cbz	r0, 8008cc0 <__gethex+0x1ec>
 8008c94:	f04f 0a01 	mov.w	sl, #1
 8008c98:	1e7b      	subs	r3, r7, #1
 8008c9a:	1159      	asrs	r1, r3, #5
 8008c9c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008ca0:	f003 021f 	and.w	r2, r3, #31
 8008ca4:	fa0a f202 	lsl.w	r2, sl, r2
 8008ca8:	420a      	tst	r2, r1
 8008caa:	d009      	beq.n	8008cc0 <__gethex+0x1ec>
 8008cac:	4553      	cmp	r3, sl
 8008cae:	dd05      	ble.n	8008cbc <__gethex+0x1e8>
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	1eb9      	subs	r1, r7, #2
 8008cb4:	f000 ff45 	bl	8009b42 <__any_on>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d144      	bne.n	8008d46 <__gethex+0x272>
 8008cbc:	f04f 0a02 	mov.w	sl, #2
 8008cc0:	4639      	mov	r1, r7
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f7ff fe9d 	bl	8008a02 <rshift>
 8008cc8:	443d      	add	r5, r7
 8008cca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008cce:	42ab      	cmp	r3, r5
 8008cd0:	da4a      	bge.n	8008d68 <__gethex+0x294>
 8008cd2:	4621      	mov	r1, r4
 8008cd4:	9802      	ldr	r0, [sp, #8]
 8008cd6:	f000 fadd 	bl	8009294 <_Bfree>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008cde:	27a3      	movs	r7, #163	; 0xa3
 8008ce0:	6013      	str	r3, [r2, #0]
 8008ce2:	e789      	b.n	8008bf8 <__gethex+0x124>
 8008ce4:	1e73      	subs	r3, r6, #1
 8008ce6:	9a06      	ldr	r2, [sp, #24]
 8008ce8:	9307      	str	r3, [sp, #28]
 8008cea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d019      	beq.n	8008d26 <__gethex+0x252>
 8008cf2:	f1bb 0f20 	cmp.w	fp, #32
 8008cf6:	d107      	bne.n	8008d08 <__gethex+0x234>
 8008cf8:	9b04      	ldr	r3, [sp, #16]
 8008cfa:	9a01      	ldr	r2, [sp, #4]
 8008cfc:	f843 2b04 	str.w	r2, [r3], #4
 8008d00:	9304      	str	r3, [sp, #16]
 8008d02:	2300      	movs	r3, #0
 8008d04:	469b      	mov	fp, r3
 8008d06:	9301      	str	r3, [sp, #4]
 8008d08:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008d0c:	f7ff fecc 	bl	8008aa8 <__hexdig_fun>
 8008d10:	9b01      	ldr	r3, [sp, #4]
 8008d12:	f000 000f 	and.w	r0, r0, #15
 8008d16:	fa00 f00b 	lsl.w	r0, r0, fp
 8008d1a:	4303      	orrs	r3, r0
 8008d1c:	9301      	str	r3, [sp, #4]
 8008d1e:	f10b 0b04 	add.w	fp, fp, #4
 8008d22:	9b07      	ldr	r3, [sp, #28]
 8008d24:	e00d      	b.n	8008d42 <__gethex+0x26e>
 8008d26:	9a08      	ldr	r2, [sp, #32]
 8008d28:	1e73      	subs	r3, r6, #1
 8008d2a:	4413      	add	r3, r2
 8008d2c:	42bb      	cmp	r3, r7
 8008d2e:	d3e0      	bcc.n	8008cf2 <__gethex+0x21e>
 8008d30:	4618      	mov	r0, r3
 8008d32:	4652      	mov	r2, sl
 8008d34:	9903      	ldr	r1, [sp, #12]
 8008d36:	9309      	str	r3, [sp, #36]	; 0x24
 8008d38:	f001 fb69 	bl	800a40e <strncmp>
 8008d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	d1d7      	bne.n	8008cf2 <__gethex+0x21e>
 8008d42:	461e      	mov	r6, r3
 8008d44:	e78c      	b.n	8008c60 <__gethex+0x18c>
 8008d46:	f04f 0a03 	mov.w	sl, #3
 8008d4a:	e7b9      	b.n	8008cc0 <__gethex+0x1ec>
 8008d4c:	da09      	bge.n	8008d62 <__gethex+0x28e>
 8008d4e:	1bf7      	subs	r7, r6, r7
 8008d50:	4621      	mov	r1, r4
 8008d52:	463a      	mov	r2, r7
 8008d54:	9802      	ldr	r0, [sp, #8]
 8008d56:	f000 fcb5 	bl	80096c4 <__lshift>
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	1bed      	subs	r5, r5, r7
 8008d5e:	f100 0914 	add.w	r9, r0, #20
 8008d62:	f04f 0a00 	mov.w	sl, #0
 8008d66:	e7b0      	b.n	8008cca <__gethex+0x1f6>
 8008d68:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008d6c:	42a8      	cmp	r0, r5
 8008d6e:	dd72      	ble.n	8008e56 <__gethex+0x382>
 8008d70:	1b45      	subs	r5, r0, r5
 8008d72:	42ae      	cmp	r6, r5
 8008d74:	dc35      	bgt.n	8008de2 <__gethex+0x30e>
 8008d76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d029      	beq.n	8008dd2 <__gethex+0x2fe>
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d02b      	beq.n	8008dda <__gethex+0x306>
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d11c      	bne.n	8008dc0 <__gethex+0x2ec>
 8008d86:	42ae      	cmp	r6, r5
 8008d88:	d11a      	bne.n	8008dc0 <__gethex+0x2ec>
 8008d8a:	2e01      	cmp	r6, #1
 8008d8c:	d112      	bne.n	8008db4 <__gethex+0x2e0>
 8008d8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008d92:	9a05      	ldr	r2, [sp, #20]
 8008d94:	2762      	movs	r7, #98	; 0x62
 8008d96:	6013      	str	r3, [r2, #0]
 8008d98:	2301      	movs	r3, #1
 8008d9a:	6123      	str	r3, [r4, #16]
 8008d9c:	f8c9 3000 	str.w	r3, [r9]
 8008da0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008da2:	601c      	str	r4, [r3, #0]
 8008da4:	e728      	b.n	8008bf8 <__gethex+0x124>
 8008da6:	bf00      	nop
 8008da8:	0800ad2c 	.word	0x0800ad2c
 8008dac:	0800ac50 	.word	0x0800ac50
 8008db0:	0800acc4 	.word	0x0800acc4
 8008db4:	4620      	mov	r0, r4
 8008db6:	1e71      	subs	r1, r6, #1
 8008db8:	f000 fec3 	bl	8009b42 <__any_on>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	d1e6      	bne.n	8008d8e <__gethex+0x2ba>
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	9802      	ldr	r0, [sp, #8]
 8008dc4:	f000 fa66 	bl	8009294 <_Bfree>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008dcc:	2750      	movs	r7, #80	; 0x50
 8008dce:	6013      	str	r3, [r2, #0]
 8008dd0:	e712      	b.n	8008bf8 <__gethex+0x124>
 8008dd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1f3      	bne.n	8008dc0 <__gethex+0x2ec>
 8008dd8:	e7d9      	b.n	8008d8e <__gethex+0x2ba>
 8008dda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1d6      	bne.n	8008d8e <__gethex+0x2ba>
 8008de0:	e7ee      	b.n	8008dc0 <__gethex+0x2ec>
 8008de2:	1e6f      	subs	r7, r5, #1
 8008de4:	f1ba 0f00 	cmp.w	sl, #0
 8008de8:	d132      	bne.n	8008e50 <__gethex+0x37c>
 8008dea:	b127      	cbz	r7, 8008df6 <__gethex+0x322>
 8008dec:	4639      	mov	r1, r7
 8008dee:	4620      	mov	r0, r4
 8008df0:	f000 fea7 	bl	8009b42 <__any_on>
 8008df4:	4682      	mov	sl, r0
 8008df6:	2101      	movs	r1, #1
 8008df8:	117b      	asrs	r3, r7, #5
 8008dfa:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008dfe:	f007 071f 	and.w	r7, r7, #31
 8008e02:	fa01 f707 	lsl.w	r7, r1, r7
 8008e06:	421f      	tst	r7, r3
 8008e08:	f04f 0702 	mov.w	r7, #2
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	4620      	mov	r0, r4
 8008e10:	bf18      	it	ne
 8008e12:	f04a 0a02 	orrne.w	sl, sl, #2
 8008e16:	1b76      	subs	r6, r6, r5
 8008e18:	f7ff fdf3 	bl	8008a02 <rshift>
 8008e1c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008e20:	f1ba 0f00 	cmp.w	sl, #0
 8008e24:	d048      	beq.n	8008eb8 <__gethex+0x3e4>
 8008e26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d015      	beq.n	8008e5a <__gethex+0x386>
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	d017      	beq.n	8008e62 <__gethex+0x38e>
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d109      	bne.n	8008e4a <__gethex+0x376>
 8008e36:	f01a 0f02 	tst.w	sl, #2
 8008e3a:	d006      	beq.n	8008e4a <__gethex+0x376>
 8008e3c:	f8d9 0000 	ldr.w	r0, [r9]
 8008e40:	ea4a 0a00 	orr.w	sl, sl, r0
 8008e44:	f01a 0f01 	tst.w	sl, #1
 8008e48:	d10e      	bne.n	8008e68 <__gethex+0x394>
 8008e4a:	f047 0710 	orr.w	r7, r7, #16
 8008e4e:	e033      	b.n	8008eb8 <__gethex+0x3e4>
 8008e50:	f04f 0a01 	mov.w	sl, #1
 8008e54:	e7cf      	b.n	8008df6 <__gethex+0x322>
 8008e56:	2701      	movs	r7, #1
 8008e58:	e7e2      	b.n	8008e20 <__gethex+0x34c>
 8008e5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e5c:	f1c3 0301 	rsb	r3, r3, #1
 8008e60:	9315      	str	r3, [sp, #84]	; 0x54
 8008e62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d0f0      	beq.n	8008e4a <__gethex+0x376>
 8008e68:	f04f 0c00 	mov.w	ip, #0
 8008e6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008e70:	f104 0314 	add.w	r3, r4, #20
 8008e74:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008e78:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e82:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008e86:	d01c      	beq.n	8008ec2 <__gethex+0x3ee>
 8008e88:	3201      	adds	r2, #1
 8008e8a:	6002      	str	r2, [r0, #0]
 8008e8c:	2f02      	cmp	r7, #2
 8008e8e:	f104 0314 	add.w	r3, r4, #20
 8008e92:	d13d      	bne.n	8008f10 <__gethex+0x43c>
 8008e94:	f8d8 2000 	ldr.w	r2, [r8]
 8008e98:	3a01      	subs	r2, #1
 8008e9a:	42b2      	cmp	r2, r6
 8008e9c:	d10a      	bne.n	8008eb4 <__gethex+0x3e0>
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	1171      	asrs	r1, r6, #5
 8008ea2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ea6:	f006 061f 	and.w	r6, r6, #31
 8008eaa:	fa02 f606 	lsl.w	r6, r2, r6
 8008eae:	421e      	tst	r6, r3
 8008eb0:	bf18      	it	ne
 8008eb2:	4617      	movne	r7, r2
 8008eb4:	f047 0720 	orr.w	r7, r7, #32
 8008eb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008eba:	601c      	str	r4, [r3, #0]
 8008ebc:	9b05      	ldr	r3, [sp, #20]
 8008ebe:	601d      	str	r5, [r3, #0]
 8008ec0:	e69a      	b.n	8008bf8 <__gethex+0x124>
 8008ec2:	4299      	cmp	r1, r3
 8008ec4:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ec8:	d8d8      	bhi.n	8008e7c <__gethex+0x3a8>
 8008eca:	68a3      	ldr	r3, [r4, #8]
 8008ecc:	459b      	cmp	fp, r3
 8008ece:	db17      	blt.n	8008f00 <__gethex+0x42c>
 8008ed0:	6861      	ldr	r1, [r4, #4]
 8008ed2:	9802      	ldr	r0, [sp, #8]
 8008ed4:	3101      	adds	r1, #1
 8008ed6:	f000 f99d 	bl	8009214 <_Balloc>
 8008eda:	4681      	mov	r9, r0
 8008edc:	b918      	cbnz	r0, 8008ee6 <__gethex+0x412>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	2184      	movs	r1, #132	; 0x84
 8008ee2:	4b19      	ldr	r3, [pc, #100]	; (8008f48 <__gethex+0x474>)
 8008ee4:	e6ab      	b.n	8008c3e <__gethex+0x16a>
 8008ee6:	6922      	ldr	r2, [r4, #16]
 8008ee8:	f104 010c 	add.w	r1, r4, #12
 8008eec:	3202      	adds	r2, #2
 8008eee:	0092      	lsls	r2, r2, #2
 8008ef0:	300c      	adds	r0, #12
 8008ef2:	f000 f981 	bl	80091f8 <memcpy>
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	9802      	ldr	r0, [sp, #8]
 8008efa:	f000 f9cb 	bl	8009294 <_Bfree>
 8008efe:	464c      	mov	r4, r9
 8008f00:	6923      	ldr	r3, [r4, #16]
 8008f02:	1c5a      	adds	r2, r3, #1
 8008f04:	6122      	str	r2, [r4, #16]
 8008f06:	2201      	movs	r2, #1
 8008f08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f0c:	615a      	str	r2, [r3, #20]
 8008f0e:	e7bd      	b.n	8008e8c <__gethex+0x3b8>
 8008f10:	6922      	ldr	r2, [r4, #16]
 8008f12:	455a      	cmp	r2, fp
 8008f14:	dd0b      	ble.n	8008f2e <__gethex+0x45a>
 8008f16:	2101      	movs	r1, #1
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f7ff fd72 	bl	8008a02 <rshift>
 8008f1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f22:	3501      	adds	r5, #1
 8008f24:	42ab      	cmp	r3, r5
 8008f26:	f6ff aed4 	blt.w	8008cd2 <__gethex+0x1fe>
 8008f2a:	2701      	movs	r7, #1
 8008f2c:	e7c2      	b.n	8008eb4 <__gethex+0x3e0>
 8008f2e:	f016 061f 	ands.w	r6, r6, #31
 8008f32:	d0fa      	beq.n	8008f2a <__gethex+0x456>
 8008f34:	4453      	add	r3, sl
 8008f36:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008f3a:	f000 fa5d 	bl	80093f8 <__hi0bits>
 8008f3e:	f1c6 0620 	rsb	r6, r6, #32
 8008f42:	42b0      	cmp	r0, r6
 8008f44:	dbe7      	blt.n	8008f16 <__gethex+0x442>
 8008f46:	e7f0      	b.n	8008f2a <__gethex+0x456>
 8008f48:	0800ac50 	.word	0x0800ac50

08008f4c <L_shift>:
 8008f4c:	f1c2 0208 	rsb	r2, r2, #8
 8008f50:	0092      	lsls	r2, r2, #2
 8008f52:	b570      	push	{r4, r5, r6, lr}
 8008f54:	f1c2 0620 	rsb	r6, r2, #32
 8008f58:	6843      	ldr	r3, [r0, #4]
 8008f5a:	6804      	ldr	r4, [r0, #0]
 8008f5c:	fa03 f506 	lsl.w	r5, r3, r6
 8008f60:	432c      	orrs	r4, r5
 8008f62:	40d3      	lsrs	r3, r2
 8008f64:	6004      	str	r4, [r0, #0]
 8008f66:	f840 3f04 	str.w	r3, [r0, #4]!
 8008f6a:	4288      	cmp	r0, r1
 8008f6c:	d3f4      	bcc.n	8008f58 <L_shift+0xc>
 8008f6e:	bd70      	pop	{r4, r5, r6, pc}

08008f70 <__match>:
 8008f70:	b530      	push	{r4, r5, lr}
 8008f72:	6803      	ldr	r3, [r0, #0]
 8008f74:	3301      	adds	r3, #1
 8008f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f7a:	b914      	cbnz	r4, 8008f82 <__match+0x12>
 8008f7c:	6003      	str	r3, [r0, #0]
 8008f7e:	2001      	movs	r0, #1
 8008f80:	bd30      	pop	{r4, r5, pc}
 8008f82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008f8a:	2d19      	cmp	r5, #25
 8008f8c:	bf98      	it	ls
 8008f8e:	3220      	addls	r2, #32
 8008f90:	42a2      	cmp	r2, r4
 8008f92:	d0f0      	beq.n	8008f76 <__match+0x6>
 8008f94:	2000      	movs	r0, #0
 8008f96:	e7f3      	b.n	8008f80 <__match+0x10>

08008f98 <__hexnan>:
 8008f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f9c:	2500      	movs	r5, #0
 8008f9e:	680b      	ldr	r3, [r1, #0]
 8008fa0:	4682      	mov	sl, r0
 8008fa2:	115e      	asrs	r6, r3, #5
 8008fa4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008fa8:	f013 031f 	ands.w	r3, r3, #31
 8008fac:	bf18      	it	ne
 8008fae:	3604      	addne	r6, #4
 8008fb0:	1f37      	subs	r7, r6, #4
 8008fb2:	46b9      	mov	r9, r7
 8008fb4:	463c      	mov	r4, r7
 8008fb6:	46ab      	mov	fp, r5
 8008fb8:	b087      	sub	sp, #28
 8008fba:	4690      	mov	r8, r2
 8008fbc:	6802      	ldr	r2, [r0, #0]
 8008fbe:	9301      	str	r3, [sp, #4]
 8008fc0:	f846 5c04 	str.w	r5, [r6, #-4]
 8008fc4:	9502      	str	r5, [sp, #8]
 8008fc6:	7851      	ldrb	r1, [r2, #1]
 8008fc8:	1c53      	adds	r3, r2, #1
 8008fca:	9303      	str	r3, [sp, #12]
 8008fcc:	b341      	cbz	r1, 8009020 <__hexnan+0x88>
 8008fce:	4608      	mov	r0, r1
 8008fd0:	9205      	str	r2, [sp, #20]
 8008fd2:	9104      	str	r1, [sp, #16]
 8008fd4:	f7ff fd68 	bl	8008aa8 <__hexdig_fun>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d14f      	bne.n	800907c <__hexnan+0xe4>
 8008fdc:	9904      	ldr	r1, [sp, #16]
 8008fde:	9a05      	ldr	r2, [sp, #20]
 8008fe0:	2920      	cmp	r1, #32
 8008fe2:	d818      	bhi.n	8009016 <__hexnan+0x7e>
 8008fe4:	9b02      	ldr	r3, [sp, #8]
 8008fe6:	459b      	cmp	fp, r3
 8008fe8:	dd13      	ble.n	8009012 <__hexnan+0x7a>
 8008fea:	454c      	cmp	r4, r9
 8008fec:	d206      	bcs.n	8008ffc <__hexnan+0x64>
 8008fee:	2d07      	cmp	r5, #7
 8008ff0:	dc04      	bgt.n	8008ffc <__hexnan+0x64>
 8008ff2:	462a      	mov	r2, r5
 8008ff4:	4649      	mov	r1, r9
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f7ff ffa8 	bl	8008f4c <L_shift>
 8008ffc:	4544      	cmp	r4, r8
 8008ffe:	d950      	bls.n	80090a2 <__hexnan+0x10a>
 8009000:	2300      	movs	r3, #0
 8009002:	f1a4 0904 	sub.w	r9, r4, #4
 8009006:	f844 3c04 	str.w	r3, [r4, #-4]
 800900a:	461d      	mov	r5, r3
 800900c:	464c      	mov	r4, r9
 800900e:	f8cd b008 	str.w	fp, [sp, #8]
 8009012:	9a03      	ldr	r2, [sp, #12]
 8009014:	e7d7      	b.n	8008fc6 <__hexnan+0x2e>
 8009016:	2929      	cmp	r1, #41	; 0x29
 8009018:	d156      	bne.n	80090c8 <__hexnan+0x130>
 800901a:	3202      	adds	r2, #2
 800901c:	f8ca 2000 	str.w	r2, [sl]
 8009020:	f1bb 0f00 	cmp.w	fp, #0
 8009024:	d050      	beq.n	80090c8 <__hexnan+0x130>
 8009026:	454c      	cmp	r4, r9
 8009028:	d206      	bcs.n	8009038 <__hexnan+0xa0>
 800902a:	2d07      	cmp	r5, #7
 800902c:	dc04      	bgt.n	8009038 <__hexnan+0xa0>
 800902e:	462a      	mov	r2, r5
 8009030:	4649      	mov	r1, r9
 8009032:	4620      	mov	r0, r4
 8009034:	f7ff ff8a 	bl	8008f4c <L_shift>
 8009038:	4544      	cmp	r4, r8
 800903a:	d934      	bls.n	80090a6 <__hexnan+0x10e>
 800903c:	4623      	mov	r3, r4
 800903e:	f1a8 0204 	sub.w	r2, r8, #4
 8009042:	f853 1b04 	ldr.w	r1, [r3], #4
 8009046:	429f      	cmp	r7, r3
 8009048:	f842 1f04 	str.w	r1, [r2, #4]!
 800904c:	d2f9      	bcs.n	8009042 <__hexnan+0xaa>
 800904e:	1b3b      	subs	r3, r7, r4
 8009050:	f023 0303 	bic.w	r3, r3, #3
 8009054:	3304      	adds	r3, #4
 8009056:	3401      	adds	r4, #1
 8009058:	3e03      	subs	r6, #3
 800905a:	42b4      	cmp	r4, r6
 800905c:	bf88      	it	hi
 800905e:	2304      	movhi	r3, #4
 8009060:	2200      	movs	r2, #0
 8009062:	4443      	add	r3, r8
 8009064:	f843 2b04 	str.w	r2, [r3], #4
 8009068:	429f      	cmp	r7, r3
 800906a:	d2fb      	bcs.n	8009064 <__hexnan+0xcc>
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	b91b      	cbnz	r3, 8009078 <__hexnan+0xe0>
 8009070:	4547      	cmp	r7, r8
 8009072:	d127      	bne.n	80090c4 <__hexnan+0x12c>
 8009074:	2301      	movs	r3, #1
 8009076:	603b      	str	r3, [r7, #0]
 8009078:	2005      	movs	r0, #5
 800907a:	e026      	b.n	80090ca <__hexnan+0x132>
 800907c:	3501      	adds	r5, #1
 800907e:	2d08      	cmp	r5, #8
 8009080:	f10b 0b01 	add.w	fp, fp, #1
 8009084:	dd06      	ble.n	8009094 <__hexnan+0xfc>
 8009086:	4544      	cmp	r4, r8
 8009088:	d9c3      	bls.n	8009012 <__hexnan+0x7a>
 800908a:	2300      	movs	r3, #0
 800908c:	2501      	movs	r5, #1
 800908e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009092:	3c04      	subs	r4, #4
 8009094:	6822      	ldr	r2, [r4, #0]
 8009096:	f000 000f 	and.w	r0, r0, #15
 800909a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800909e:	6022      	str	r2, [r4, #0]
 80090a0:	e7b7      	b.n	8009012 <__hexnan+0x7a>
 80090a2:	2508      	movs	r5, #8
 80090a4:	e7b5      	b.n	8009012 <__hexnan+0x7a>
 80090a6:	9b01      	ldr	r3, [sp, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d0df      	beq.n	800906c <__hexnan+0xd4>
 80090ac:	f04f 32ff 	mov.w	r2, #4294967295
 80090b0:	f1c3 0320 	rsb	r3, r3, #32
 80090b4:	fa22 f303 	lsr.w	r3, r2, r3
 80090b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80090bc:	401a      	ands	r2, r3
 80090be:	f846 2c04 	str.w	r2, [r6, #-4]
 80090c2:	e7d3      	b.n	800906c <__hexnan+0xd4>
 80090c4:	3f04      	subs	r7, #4
 80090c6:	e7d1      	b.n	800906c <__hexnan+0xd4>
 80090c8:	2004      	movs	r0, #4
 80090ca:	b007      	add	sp, #28
 80090cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090d0 <_localeconv_r>:
 80090d0:	4800      	ldr	r0, [pc, #0]	; (80090d4 <_localeconv_r+0x4>)
 80090d2:	4770      	bx	lr
 80090d4:	20000178 	.word	0x20000178

080090d8 <__retarget_lock_init_recursive>:
 80090d8:	4770      	bx	lr

080090da <__retarget_lock_acquire_recursive>:
 80090da:	4770      	bx	lr

080090dc <__retarget_lock_release_recursive>:
 80090dc:	4770      	bx	lr

080090de <__swhatbuf_r>:
 80090de:	b570      	push	{r4, r5, r6, lr}
 80090e0:	460e      	mov	r6, r1
 80090e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090e6:	4614      	mov	r4, r2
 80090e8:	2900      	cmp	r1, #0
 80090ea:	461d      	mov	r5, r3
 80090ec:	b096      	sub	sp, #88	; 0x58
 80090ee:	da08      	bge.n	8009102 <__swhatbuf_r+0x24>
 80090f0:	2200      	movs	r2, #0
 80090f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80090f6:	602a      	str	r2, [r5, #0]
 80090f8:	061a      	lsls	r2, r3, #24
 80090fa:	d410      	bmi.n	800911e <__swhatbuf_r+0x40>
 80090fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009100:	e00e      	b.n	8009120 <__swhatbuf_r+0x42>
 8009102:	466a      	mov	r2, sp
 8009104:	f001 f9f6 	bl	800a4f4 <_fstat_r>
 8009108:	2800      	cmp	r0, #0
 800910a:	dbf1      	blt.n	80090f0 <__swhatbuf_r+0x12>
 800910c:	9a01      	ldr	r2, [sp, #4]
 800910e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009112:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009116:	425a      	negs	r2, r3
 8009118:	415a      	adcs	r2, r3
 800911a:	602a      	str	r2, [r5, #0]
 800911c:	e7ee      	b.n	80090fc <__swhatbuf_r+0x1e>
 800911e:	2340      	movs	r3, #64	; 0x40
 8009120:	2000      	movs	r0, #0
 8009122:	6023      	str	r3, [r4, #0]
 8009124:	b016      	add	sp, #88	; 0x58
 8009126:	bd70      	pop	{r4, r5, r6, pc}

08009128 <__smakebuf_r>:
 8009128:	898b      	ldrh	r3, [r1, #12]
 800912a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800912c:	079d      	lsls	r5, r3, #30
 800912e:	4606      	mov	r6, r0
 8009130:	460c      	mov	r4, r1
 8009132:	d507      	bpl.n	8009144 <__smakebuf_r+0x1c>
 8009134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	6123      	str	r3, [r4, #16]
 800913c:	2301      	movs	r3, #1
 800913e:	6163      	str	r3, [r4, #20]
 8009140:	b002      	add	sp, #8
 8009142:	bd70      	pop	{r4, r5, r6, pc}
 8009144:	466a      	mov	r2, sp
 8009146:	ab01      	add	r3, sp, #4
 8009148:	f7ff ffc9 	bl	80090de <__swhatbuf_r>
 800914c:	9900      	ldr	r1, [sp, #0]
 800914e:	4605      	mov	r5, r0
 8009150:	4630      	mov	r0, r6
 8009152:	f000 fd93 	bl	8009c7c <_malloc_r>
 8009156:	b948      	cbnz	r0, 800916c <__smakebuf_r+0x44>
 8009158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800915c:	059a      	lsls	r2, r3, #22
 800915e:	d4ef      	bmi.n	8009140 <__smakebuf_r+0x18>
 8009160:	f023 0303 	bic.w	r3, r3, #3
 8009164:	f043 0302 	orr.w	r3, r3, #2
 8009168:	81a3      	strh	r3, [r4, #12]
 800916a:	e7e3      	b.n	8009134 <__smakebuf_r+0xc>
 800916c:	4b0d      	ldr	r3, [pc, #52]	; (80091a4 <__smakebuf_r+0x7c>)
 800916e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	6020      	str	r0, [r4, #0]
 8009174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009178:	81a3      	strh	r3, [r4, #12]
 800917a:	9b00      	ldr	r3, [sp, #0]
 800917c:	6120      	str	r0, [r4, #16]
 800917e:	6163      	str	r3, [r4, #20]
 8009180:	9b01      	ldr	r3, [sp, #4]
 8009182:	b15b      	cbz	r3, 800919c <__smakebuf_r+0x74>
 8009184:	4630      	mov	r0, r6
 8009186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800918a:	f001 f9c5 	bl	800a518 <_isatty_r>
 800918e:	b128      	cbz	r0, 800919c <__smakebuf_r+0x74>
 8009190:	89a3      	ldrh	r3, [r4, #12]
 8009192:	f023 0303 	bic.w	r3, r3, #3
 8009196:	f043 0301 	orr.w	r3, r3, #1
 800919a:	81a3      	strh	r3, [r4, #12]
 800919c:	89a0      	ldrh	r0, [r4, #12]
 800919e:	4305      	orrs	r5, r0
 80091a0:	81a5      	strh	r5, [r4, #12]
 80091a2:	e7cd      	b.n	8009140 <__smakebuf_r+0x18>
 80091a4:	08008861 	.word	0x08008861

080091a8 <malloc>:
 80091a8:	4b02      	ldr	r3, [pc, #8]	; (80091b4 <malloc+0xc>)
 80091aa:	4601      	mov	r1, r0
 80091ac:	6818      	ldr	r0, [r3, #0]
 80091ae:	f000 bd65 	b.w	8009c7c <_malloc_r>
 80091b2:	bf00      	nop
 80091b4:	20000020 	.word	0x20000020

080091b8 <__ascii_mbtowc>:
 80091b8:	b082      	sub	sp, #8
 80091ba:	b901      	cbnz	r1, 80091be <__ascii_mbtowc+0x6>
 80091bc:	a901      	add	r1, sp, #4
 80091be:	b142      	cbz	r2, 80091d2 <__ascii_mbtowc+0x1a>
 80091c0:	b14b      	cbz	r3, 80091d6 <__ascii_mbtowc+0x1e>
 80091c2:	7813      	ldrb	r3, [r2, #0]
 80091c4:	600b      	str	r3, [r1, #0]
 80091c6:	7812      	ldrb	r2, [r2, #0]
 80091c8:	1e10      	subs	r0, r2, #0
 80091ca:	bf18      	it	ne
 80091cc:	2001      	movne	r0, #1
 80091ce:	b002      	add	sp, #8
 80091d0:	4770      	bx	lr
 80091d2:	4610      	mov	r0, r2
 80091d4:	e7fb      	b.n	80091ce <__ascii_mbtowc+0x16>
 80091d6:	f06f 0001 	mvn.w	r0, #1
 80091da:	e7f8      	b.n	80091ce <__ascii_mbtowc+0x16>

080091dc <memchr>:
 80091dc:	4603      	mov	r3, r0
 80091de:	b510      	push	{r4, lr}
 80091e0:	b2c9      	uxtb	r1, r1
 80091e2:	4402      	add	r2, r0
 80091e4:	4293      	cmp	r3, r2
 80091e6:	4618      	mov	r0, r3
 80091e8:	d101      	bne.n	80091ee <memchr+0x12>
 80091ea:	2000      	movs	r0, #0
 80091ec:	e003      	b.n	80091f6 <memchr+0x1a>
 80091ee:	7804      	ldrb	r4, [r0, #0]
 80091f0:	3301      	adds	r3, #1
 80091f2:	428c      	cmp	r4, r1
 80091f4:	d1f6      	bne.n	80091e4 <memchr+0x8>
 80091f6:	bd10      	pop	{r4, pc}

080091f8 <memcpy>:
 80091f8:	440a      	add	r2, r1
 80091fa:	4291      	cmp	r1, r2
 80091fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009200:	d100      	bne.n	8009204 <memcpy+0xc>
 8009202:	4770      	bx	lr
 8009204:	b510      	push	{r4, lr}
 8009206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800920a:	4291      	cmp	r1, r2
 800920c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009210:	d1f9      	bne.n	8009206 <memcpy+0xe>
 8009212:	bd10      	pop	{r4, pc}

08009214 <_Balloc>:
 8009214:	b570      	push	{r4, r5, r6, lr}
 8009216:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009218:	4604      	mov	r4, r0
 800921a:	460d      	mov	r5, r1
 800921c:	b976      	cbnz	r6, 800923c <_Balloc+0x28>
 800921e:	2010      	movs	r0, #16
 8009220:	f7ff ffc2 	bl	80091a8 <malloc>
 8009224:	4602      	mov	r2, r0
 8009226:	6260      	str	r0, [r4, #36]	; 0x24
 8009228:	b920      	cbnz	r0, 8009234 <_Balloc+0x20>
 800922a:	2166      	movs	r1, #102	; 0x66
 800922c:	4b17      	ldr	r3, [pc, #92]	; (800928c <_Balloc+0x78>)
 800922e:	4818      	ldr	r0, [pc, #96]	; (8009290 <_Balloc+0x7c>)
 8009230:	f001 f920 	bl	800a474 <__assert_func>
 8009234:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009238:	6006      	str	r6, [r0, #0]
 800923a:	60c6      	str	r6, [r0, #12]
 800923c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800923e:	68f3      	ldr	r3, [r6, #12]
 8009240:	b183      	cbz	r3, 8009264 <_Balloc+0x50>
 8009242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800924a:	b9b8      	cbnz	r0, 800927c <_Balloc+0x68>
 800924c:	2101      	movs	r1, #1
 800924e:	fa01 f605 	lsl.w	r6, r1, r5
 8009252:	1d72      	adds	r2, r6, #5
 8009254:	4620      	mov	r0, r4
 8009256:	0092      	lsls	r2, r2, #2
 8009258:	f000 fc94 	bl	8009b84 <_calloc_r>
 800925c:	b160      	cbz	r0, 8009278 <_Balloc+0x64>
 800925e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009262:	e00e      	b.n	8009282 <_Balloc+0x6e>
 8009264:	2221      	movs	r2, #33	; 0x21
 8009266:	2104      	movs	r1, #4
 8009268:	4620      	mov	r0, r4
 800926a:	f000 fc8b 	bl	8009b84 <_calloc_r>
 800926e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009270:	60f0      	str	r0, [r6, #12]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1e4      	bne.n	8009242 <_Balloc+0x2e>
 8009278:	2000      	movs	r0, #0
 800927a:	bd70      	pop	{r4, r5, r6, pc}
 800927c:	6802      	ldr	r2, [r0, #0]
 800927e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009282:	2300      	movs	r3, #0
 8009284:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009288:	e7f7      	b.n	800927a <_Balloc+0x66>
 800928a:	bf00      	nop
 800928c:	0800abde 	.word	0x0800abde
 8009290:	0800ad40 	.word	0x0800ad40

08009294 <_Bfree>:
 8009294:	b570      	push	{r4, r5, r6, lr}
 8009296:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009298:	4605      	mov	r5, r0
 800929a:	460c      	mov	r4, r1
 800929c:	b976      	cbnz	r6, 80092bc <_Bfree+0x28>
 800929e:	2010      	movs	r0, #16
 80092a0:	f7ff ff82 	bl	80091a8 <malloc>
 80092a4:	4602      	mov	r2, r0
 80092a6:	6268      	str	r0, [r5, #36]	; 0x24
 80092a8:	b920      	cbnz	r0, 80092b4 <_Bfree+0x20>
 80092aa:	218a      	movs	r1, #138	; 0x8a
 80092ac:	4b08      	ldr	r3, [pc, #32]	; (80092d0 <_Bfree+0x3c>)
 80092ae:	4809      	ldr	r0, [pc, #36]	; (80092d4 <_Bfree+0x40>)
 80092b0:	f001 f8e0 	bl	800a474 <__assert_func>
 80092b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092b8:	6006      	str	r6, [r0, #0]
 80092ba:	60c6      	str	r6, [r0, #12]
 80092bc:	b13c      	cbz	r4, 80092ce <_Bfree+0x3a>
 80092be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80092c0:	6862      	ldr	r2, [r4, #4]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092c8:	6021      	str	r1, [r4, #0]
 80092ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80092ce:	bd70      	pop	{r4, r5, r6, pc}
 80092d0:	0800abde 	.word	0x0800abde
 80092d4:	0800ad40 	.word	0x0800ad40

080092d8 <__multadd>:
 80092d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092dc:	4607      	mov	r7, r0
 80092de:	460c      	mov	r4, r1
 80092e0:	461e      	mov	r6, r3
 80092e2:	2000      	movs	r0, #0
 80092e4:	690d      	ldr	r5, [r1, #16]
 80092e6:	f101 0c14 	add.w	ip, r1, #20
 80092ea:	f8dc 3000 	ldr.w	r3, [ip]
 80092ee:	3001      	adds	r0, #1
 80092f0:	b299      	uxth	r1, r3
 80092f2:	fb02 6101 	mla	r1, r2, r1, r6
 80092f6:	0c1e      	lsrs	r6, r3, #16
 80092f8:	0c0b      	lsrs	r3, r1, #16
 80092fa:	fb02 3306 	mla	r3, r2, r6, r3
 80092fe:	b289      	uxth	r1, r1
 8009300:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009304:	4285      	cmp	r5, r0
 8009306:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800930a:	f84c 1b04 	str.w	r1, [ip], #4
 800930e:	dcec      	bgt.n	80092ea <__multadd+0x12>
 8009310:	b30e      	cbz	r6, 8009356 <__multadd+0x7e>
 8009312:	68a3      	ldr	r3, [r4, #8]
 8009314:	42ab      	cmp	r3, r5
 8009316:	dc19      	bgt.n	800934c <__multadd+0x74>
 8009318:	6861      	ldr	r1, [r4, #4]
 800931a:	4638      	mov	r0, r7
 800931c:	3101      	adds	r1, #1
 800931e:	f7ff ff79 	bl	8009214 <_Balloc>
 8009322:	4680      	mov	r8, r0
 8009324:	b928      	cbnz	r0, 8009332 <__multadd+0x5a>
 8009326:	4602      	mov	r2, r0
 8009328:	21b5      	movs	r1, #181	; 0xb5
 800932a:	4b0c      	ldr	r3, [pc, #48]	; (800935c <__multadd+0x84>)
 800932c:	480c      	ldr	r0, [pc, #48]	; (8009360 <__multadd+0x88>)
 800932e:	f001 f8a1 	bl	800a474 <__assert_func>
 8009332:	6922      	ldr	r2, [r4, #16]
 8009334:	f104 010c 	add.w	r1, r4, #12
 8009338:	3202      	adds	r2, #2
 800933a:	0092      	lsls	r2, r2, #2
 800933c:	300c      	adds	r0, #12
 800933e:	f7ff ff5b 	bl	80091f8 <memcpy>
 8009342:	4621      	mov	r1, r4
 8009344:	4638      	mov	r0, r7
 8009346:	f7ff ffa5 	bl	8009294 <_Bfree>
 800934a:	4644      	mov	r4, r8
 800934c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009350:	3501      	adds	r5, #1
 8009352:	615e      	str	r6, [r3, #20]
 8009354:	6125      	str	r5, [r4, #16]
 8009356:	4620      	mov	r0, r4
 8009358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800935c:	0800ac50 	.word	0x0800ac50
 8009360:	0800ad40 	.word	0x0800ad40

08009364 <__s2b>:
 8009364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009368:	4615      	mov	r5, r2
 800936a:	2209      	movs	r2, #9
 800936c:	461f      	mov	r7, r3
 800936e:	3308      	adds	r3, #8
 8009370:	460c      	mov	r4, r1
 8009372:	fb93 f3f2 	sdiv	r3, r3, r2
 8009376:	4606      	mov	r6, r0
 8009378:	2201      	movs	r2, #1
 800937a:	2100      	movs	r1, #0
 800937c:	429a      	cmp	r2, r3
 800937e:	db09      	blt.n	8009394 <__s2b+0x30>
 8009380:	4630      	mov	r0, r6
 8009382:	f7ff ff47 	bl	8009214 <_Balloc>
 8009386:	b940      	cbnz	r0, 800939a <__s2b+0x36>
 8009388:	4602      	mov	r2, r0
 800938a:	21ce      	movs	r1, #206	; 0xce
 800938c:	4b18      	ldr	r3, [pc, #96]	; (80093f0 <__s2b+0x8c>)
 800938e:	4819      	ldr	r0, [pc, #100]	; (80093f4 <__s2b+0x90>)
 8009390:	f001 f870 	bl	800a474 <__assert_func>
 8009394:	0052      	lsls	r2, r2, #1
 8009396:	3101      	adds	r1, #1
 8009398:	e7f0      	b.n	800937c <__s2b+0x18>
 800939a:	9b08      	ldr	r3, [sp, #32]
 800939c:	2d09      	cmp	r5, #9
 800939e:	6143      	str	r3, [r0, #20]
 80093a0:	f04f 0301 	mov.w	r3, #1
 80093a4:	6103      	str	r3, [r0, #16]
 80093a6:	dd16      	ble.n	80093d6 <__s2b+0x72>
 80093a8:	f104 0909 	add.w	r9, r4, #9
 80093ac:	46c8      	mov	r8, r9
 80093ae:	442c      	add	r4, r5
 80093b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80093b4:	4601      	mov	r1, r0
 80093b6:	220a      	movs	r2, #10
 80093b8:	4630      	mov	r0, r6
 80093ba:	3b30      	subs	r3, #48	; 0x30
 80093bc:	f7ff ff8c 	bl	80092d8 <__multadd>
 80093c0:	45a0      	cmp	r8, r4
 80093c2:	d1f5      	bne.n	80093b0 <__s2b+0x4c>
 80093c4:	f1a5 0408 	sub.w	r4, r5, #8
 80093c8:	444c      	add	r4, r9
 80093ca:	1b2d      	subs	r5, r5, r4
 80093cc:	1963      	adds	r3, r4, r5
 80093ce:	42bb      	cmp	r3, r7
 80093d0:	db04      	blt.n	80093dc <__s2b+0x78>
 80093d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093d6:	2509      	movs	r5, #9
 80093d8:	340a      	adds	r4, #10
 80093da:	e7f6      	b.n	80093ca <__s2b+0x66>
 80093dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80093e0:	4601      	mov	r1, r0
 80093e2:	220a      	movs	r2, #10
 80093e4:	4630      	mov	r0, r6
 80093e6:	3b30      	subs	r3, #48	; 0x30
 80093e8:	f7ff ff76 	bl	80092d8 <__multadd>
 80093ec:	e7ee      	b.n	80093cc <__s2b+0x68>
 80093ee:	bf00      	nop
 80093f0:	0800ac50 	.word	0x0800ac50
 80093f4:	0800ad40 	.word	0x0800ad40

080093f8 <__hi0bits>:
 80093f8:	0c02      	lsrs	r2, r0, #16
 80093fa:	0412      	lsls	r2, r2, #16
 80093fc:	4603      	mov	r3, r0
 80093fe:	b9ca      	cbnz	r2, 8009434 <__hi0bits+0x3c>
 8009400:	0403      	lsls	r3, r0, #16
 8009402:	2010      	movs	r0, #16
 8009404:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009408:	bf04      	itt	eq
 800940a:	021b      	lsleq	r3, r3, #8
 800940c:	3008      	addeq	r0, #8
 800940e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009412:	bf04      	itt	eq
 8009414:	011b      	lsleq	r3, r3, #4
 8009416:	3004      	addeq	r0, #4
 8009418:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800941c:	bf04      	itt	eq
 800941e:	009b      	lsleq	r3, r3, #2
 8009420:	3002      	addeq	r0, #2
 8009422:	2b00      	cmp	r3, #0
 8009424:	db05      	blt.n	8009432 <__hi0bits+0x3a>
 8009426:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800942a:	f100 0001 	add.w	r0, r0, #1
 800942e:	bf08      	it	eq
 8009430:	2020      	moveq	r0, #32
 8009432:	4770      	bx	lr
 8009434:	2000      	movs	r0, #0
 8009436:	e7e5      	b.n	8009404 <__hi0bits+0xc>

08009438 <__lo0bits>:
 8009438:	6803      	ldr	r3, [r0, #0]
 800943a:	4602      	mov	r2, r0
 800943c:	f013 0007 	ands.w	r0, r3, #7
 8009440:	d00b      	beq.n	800945a <__lo0bits+0x22>
 8009442:	07d9      	lsls	r1, r3, #31
 8009444:	d421      	bmi.n	800948a <__lo0bits+0x52>
 8009446:	0798      	lsls	r0, r3, #30
 8009448:	bf49      	itett	mi
 800944a:	085b      	lsrmi	r3, r3, #1
 800944c:	089b      	lsrpl	r3, r3, #2
 800944e:	2001      	movmi	r0, #1
 8009450:	6013      	strmi	r3, [r2, #0]
 8009452:	bf5c      	itt	pl
 8009454:	2002      	movpl	r0, #2
 8009456:	6013      	strpl	r3, [r2, #0]
 8009458:	4770      	bx	lr
 800945a:	b299      	uxth	r1, r3
 800945c:	b909      	cbnz	r1, 8009462 <__lo0bits+0x2a>
 800945e:	2010      	movs	r0, #16
 8009460:	0c1b      	lsrs	r3, r3, #16
 8009462:	b2d9      	uxtb	r1, r3
 8009464:	b909      	cbnz	r1, 800946a <__lo0bits+0x32>
 8009466:	3008      	adds	r0, #8
 8009468:	0a1b      	lsrs	r3, r3, #8
 800946a:	0719      	lsls	r1, r3, #28
 800946c:	bf04      	itt	eq
 800946e:	091b      	lsreq	r3, r3, #4
 8009470:	3004      	addeq	r0, #4
 8009472:	0799      	lsls	r1, r3, #30
 8009474:	bf04      	itt	eq
 8009476:	089b      	lsreq	r3, r3, #2
 8009478:	3002      	addeq	r0, #2
 800947a:	07d9      	lsls	r1, r3, #31
 800947c:	d403      	bmi.n	8009486 <__lo0bits+0x4e>
 800947e:	085b      	lsrs	r3, r3, #1
 8009480:	f100 0001 	add.w	r0, r0, #1
 8009484:	d003      	beq.n	800948e <__lo0bits+0x56>
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	4770      	bx	lr
 800948a:	2000      	movs	r0, #0
 800948c:	4770      	bx	lr
 800948e:	2020      	movs	r0, #32
 8009490:	4770      	bx	lr
	...

08009494 <__i2b>:
 8009494:	b510      	push	{r4, lr}
 8009496:	460c      	mov	r4, r1
 8009498:	2101      	movs	r1, #1
 800949a:	f7ff febb 	bl	8009214 <_Balloc>
 800949e:	4602      	mov	r2, r0
 80094a0:	b928      	cbnz	r0, 80094ae <__i2b+0x1a>
 80094a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80094a6:	4b04      	ldr	r3, [pc, #16]	; (80094b8 <__i2b+0x24>)
 80094a8:	4804      	ldr	r0, [pc, #16]	; (80094bc <__i2b+0x28>)
 80094aa:	f000 ffe3 	bl	800a474 <__assert_func>
 80094ae:	2301      	movs	r3, #1
 80094b0:	6144      	str	r4, [r0, #20]
 80094b2:	6103      	str	r3, [r0, #16]
 80094b4:	bd10      	pop	{r4, pc}
 80094b6:	bf00      	nop
 80094b8:	0800ac50 	.word	0x0800ac50
 80094bc:	0800ad40 	.word	0x0800ad40

080094c0 <__multiply>:
 80094c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c4:	4691      	mov	r9, r2
 80094c6:	690a      	ldr	r2, [r1, #16]
 80094c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80094cc:	460c      	mov	r4, r1
 80094ce:	429a      	cmp	r2, r3
 80094d0:	bfbe      	ittt	lt
 80094d2:	460b      	movlt	r3, r1
 80094d4:	464c      	movlt	r4, r9
 80094d6:	4699      	movlt	r9, r3
 80094d8:	6927      	ldr	r7, [r4, #16]
 80094da:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80094de:	68a3      	ldr	r3, [r4, #8]
 80094e0:	6861      	ldr	r1, [r4, #4]
 80094e2:	eb07 060a 	add.w	r6, r7, sl
 80094e6:	42b3      	cmp	r3, r6
 80094e8:	b085      	sub	sp, #20
 80094ea:	bfb8      	it	lt
 80094ec:	3101      	addlt	r1, #1
 80094ee:	f7ff fe91 	bl	8009214 <_Balloc>
 80094f2:	b930      	cbnz	r0, 8009502 <__multiply+0x42>
 80094f4:	4602      	mov	r2, r0
 80094f6:	f240 115d 	movw	r1, #349	; 0x15d
 80094fa:	4b43      	ldr	r3, [pc, #268]	; (8009608 <__multiply+0x148>)
 80094fc:	4843      	ldr	r0, [pc, #268]	; (800960c <__multiply+0x14c>)
 80094fe:	f000 ffb9 	bl	800a474 <__assert_func>
 8009502:	f100 0514 	add.w	r5, r0, #20
 8009506:	462b      	mov	r3, r5
 8009508:	2200      	movs	r2, #0
 800950a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800950e:	4543      	cmp	r3, r8
 8009510:	d321      	bcc.n	8009556 <__multiply+0x96>
 8009512:	f104 0314 	add.w	r3, r4, #20
 8009516:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800951a:	f109 0314 	add.w	r3, r9, #20
 800951e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009522:	9202      	str	r2, [sp, #8]
 8009524:	1b3a      	subs	r2, r7, r4
 8009526:	3a15      	subs	r2, #21
 8009528:	f022 0203 	bic.w	r2, r2, #3
 800952c:	3204      	adds	r2, #4
 800952e:	f104 0115 	add.w	r1, r4, #21
 8009532:	428f      	cmp	r7, r1
 8009534:	bf38      	it	cc
 8009536:	2204      	movcc	r2, #4
 8009538:	9201      	str	r2, [sp, #4]
 800953a:	9a02      	ldr	r2, [sp, #8]
 800953c:	9303      	str	r3, [sp, #12]
 800953e:	429a      	cmp	r2, r3
 8009540:	d80c      	bhi.n	800955c <__multiply+0x9c>
 8009542:	2e00      	cmp	r6, #0
 8009544:	dd03      	ble.n	800954e <__multiply+0x8e>
 8009546:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800954a:	2b00      	cmp	r3, #0
 800954c:	d059      	beq.n	8009602 <__multiply+0x142>
 800954e:	6106      	str	r6, [r0, #16]
 8009550:	b005      	add	sp, #20
 8009552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009556:	f843 2b04 	str.w	r2, [r3], #4
 800955a:	e7d8      	b.n	800950e <__multiply+0x4e>
 800955c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009560:	f1ba 0f00 	cmp.w	sl, #0
 8009564:	d023      	beq.n	80095ae <__multiply+0xee>
 8009566:	46a9      	mov	r9, r5
 8009568:	f04f 0c00 	mov.w	ip, #0
 800956c:	f104 0e14 	add.w	lr, r4, #20
 8009570:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009574:	f8d9 1000 	ldr.w	r1, [r9]
 8009578:	fa1f fb82 	uxth.w	fp, r2
 800957c:	b289      	uxth	r1, r1
 800957e:	fb0a 110b 	mla	r1, sl, fp, r1
 8009582:	4461      	add	r1, ip
 8009584:	f8d9 c000 	ldr.w	ip, [r9]
 8009588:	0c12      	lsrs	r2, r2, #16
 800958a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800958e:	fb0a c202 	mla	r2, sl, r2, ip
 8009592:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009596:	b289      	uxth	r1, r1
 8009598:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800959c:	4577      	cmp	r7, lr
 800959e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095a2:	f849 1b04 	str.w	r1, [r9], #4
 80095a6:	d8e3      	bhi.n	8009570 <__multiply+0xb0>
 80095a8:	9a01      	ldr	r2, [sp, #4]
 80095aa:	f845 c002 	str.w	ip, [r5, r2]
 80095ae:	9a03      	ldr	r2, [sp, #12]
 80095b0:	3304      	adds	r3, #4
 80095b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80095b6:	f1b9 0f00 	cmp.w	r9, #0
 80095ba:	d020      	beq.n	80095fe <__multiply+0x13e>
 80095bc:	46ae      	mov	lr, r5
 80095be:	f04f 0a00 	mov.w	sl, #0
 80095c2:	6829      	ldr	r1, [r5, #0]
 80095c4:	f104 0c14 	add.w	ip, r4, #20
 80095c8:	f8bc b000 	ldrh.w	fp, [ip]
 80095cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80095d0:	b289      	uxth	r1, r1
 80095d2:	fb09 220b 	mla	r2, r9, fp, r2
 80095d6:	4492      	add	sl, r2
 80095d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80095dc:	f84e 1b04 	str.w	r1, [lr], #4
 80095e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80095e4:	f8be 1000 	ldrh.w	r1, [lr]
 80095e8:	0c12      	lsrs	r2, r2, #16
 80095ea:	fb09 1102 	mla	r1, r9, r2, r1
 80095ee:	4567      	cmp	r7, ip
 80095f0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80095f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80095f8:	d8e6      	bhi.n	80095c8 <__multiply+0x108>
 80095fa:	9a01      	ldr	r2, [sp, #4]
 80095fc:	50a9      	str	r1, [r5, r2]
 80095fe:	3504      	adds	r5, #4
 8009600:	e79b      	b.n	800953a <__multiply+0x7a>
 8009602:	3e01      	subs	r6, #1
 8009604:	e79d      	b.n	8009542 <__multiply+0x82>
 8009606:	bf00      	nop
 8009608:	0800ac50 	.word	0x0800ac50
 800960c:	0800ad40 	.word	0x0800ad40

08009610 <__pow5mult>:
 8009610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009614:	4615      	mov	r5, r2
 8009616:	f012 0203 	ands.w	r2, r2, #3
 800961a:	4606      	mov	r6, r0
 800961c:	460f      	mov	r7, r1
 800961e:	d007      	beq.n	8009630 <__pow5mult+0x20>
 8009620:	4c25      	ldr	r4, [pc, #148]	; (80096b8 <__pow5mult+0xa8>)
 8009622:	3a01      	subs	r2, #1
 8009624:	2300      	movs	r3, #0
 8009626:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800962a:	f7ff fe55 	bl	80092d8 <__multadd>
 800962e:	4607      	mov	r7, r0
 8009630:	10ad      	asrs	r5, r5, #2
 8009632:	d03d      	beq.n	80096b0 <__pow5mult+0xa0>
 8009634:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009636:	b97c      	cbnz	r4, 8009658 <__pow5mult+0x48>
 8009638:	2010      	movs	r0, #16
 800963a:	f7ff fdb5 	bl	80091a8 <malloc>
 800963e:	4602      	mov	r2, r0
 8009640:	6270      	str	r0, [r6, #36]	; 0x24
 8009642:	b928      	cbnz	r0, 8009650 <__pow5mult+0x40>
 8009644:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009648:	4b1c      	ldr	r3, [pc, #112]	; (80096bc <__pow5mult+0xac>)
 800964a:	481d      	ldr	r0, [pc, #116]	; (80096c0 <__pow5mult+0xb0>)
 800964c:	f000 ff12 	bl	800a474 <__assert_func>
 8009650:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009654:	6004      	str	r4, [r0, #0]
 8009656:	60c4      	str	r4, [r0, #12]
 8009658:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800965c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009660:	b94c      	cbnz	r4, 8009676 <__pow5mult+0x66>
 8009662:	f240 2171 	movw	r1, #625	; 0x271
 8009666:	4630      	mov	r0, r6
 8009668:	f7ff ff14 	bl	8009494 <__i2b>
 800966c:	2300      	movs	r3, #0
 800966e:	4604      	mov	r4, r0
 8009670:	f8c8 0008 	str.w	r0, [r8, #8]
 8009674:	6003      	str	r3, [r0, #0]
 8009676:	f04f 0900 	mov.w	r9, #0
 800967a:	07eb      	lsls	r3, r5, #31
 800967c:	d50a      	bpl.n	8009694 <__pow5mult+0x84>
 800967e:	4639      	mov	r1, r7
 8009680:	4622      	mov	r2, r4
 8009682:	4630      	mov	r0, r6
 8009684:	f7ff ff1c 	bl	80094c0 <__multiply>
 8009688:	4680      	mov	r8, r0
 800968a:	4639      	mov	r1, r7
 800968c:	4630      	mov	r0, r6
 800968e:	f7ff fe01 	bl	8009294 <_Bfree>
 8009692:	4647      	mov	r7, r8
 8009694:	106d      	asrs	r5, r5, #1
 8009696:	d00b      	beq.n	80096b0 <__pow5mult+0xa0>
 8009698:	6820      	ldr	r0, [r4, #0]
 800969a:	b938      	cbnz	r0, 80096ac <__pow5mult+0x9c>
 800969c:	4622      	mov	r2, r4
 800969e:	4621      	mov	r1, r4
 80096a0:	4630      	mov	r0, r6
 80096a2:	f7ff ff0d 	bl	80094c0 <__multiply>
 80096a6:	6020      	str	r0, [r4, #0]
 80096a8:	f8c0 9000 	str.w	r9, [r0]
 80096ac:	4604      	mov	r4, r0
 80096ae:	e7e4      	b.n	800967a <__pow5mult+0x6a>
 80096b0:	4638      	mov	r0, r7
 80096b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096b6:	bf00      	nop
 80096b8:	0800ae90 	.word	0x0800ae90
 80096bc:	0800abde 	.word	0x0800abde
 80096c0:	0800ad40 	.word	0x0800ad40

080096c4 <__lshift>:
 80096c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096c8:	460c      	mov	r4, r1
 80096ca:	4607      	mov	r7, r0
 80096cc:	4691      	mov	r9, r2
 80096ce:	6923      	ldr	r3, [r4, #16]
 80096d0:	6849      	ldr	r1, [r1, #4]
 80096d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096d6:	68a3      	ldr	r3, [r4, #8]
 80096d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096dc:	f108 0601 	add.w	r6, r8, #1
 80096e0:	42b3      	cmp	r3, r6
 80096e2:	db0b      	blt.n	80096fc <__lshift+0x38>
 80096e4:	4638      	mov	r0, r7
 80096e6:	f7ff fd95 	bl	8009214 <_Balloc>
 80096ea:	4605      	mov	r5, r0
 80096ec:	b948      	cbnz	r0, 8009702 <__lshift+0x3e>
 80096ee:	4602      	mov	r2, r0
 80096f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80096f4:	4b29      	ldr	r3, [pc, #164]	; (800979c <__lshift+0xd8>)
 80096f6:	482a      	ldr	r0, [pc, #168]	; (80097a0 <__lshift+0xdc>)
 80096f8:	f000 febc 	bl	800a474 <__assert_func>
 80096fc:	3101      	adds	r1, #1
 80096fe:	005b      	lsls	r3, r3, #1
 8009700:	e7ee      	b.n	80096e0 <__lshift+0x1c>
 8009702:	2300      	movs	r3, #0
 8009704:	f100 0114 	add.w	r1, r0, #20
 8009708:	f100 0210 	add.w	r2, r0, #16
 800970c:	4618      	mov	r0, r3
 800970e:	4553      	cmp	r3, sl
 8009710:	db37      	blt.n	8009782 <__lshift+0xbe>
 8009712:	6920      	ldr	r0, [r4, #16]
 8009714:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009718:	f104 0314 	add.w	r3, r4, #20
 800971c:	f019 091f 	ands.w	r9, r9, #31
 8009720:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009724:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009728:	d02f      	beq.n	800978a <__lshift+0xc6>
 800972a:	468a      	mov	sl, r1
 800972c:	f04f 0c00 	mov.w	ip, #0
 8009730:	f1c9 0e20 	rsb	lr, r9, #32
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	fa02 f209 	lsl.w	r2, r2, r9
 800973a:	ea42 020c 	orr.w	r2, r2, ip
 800973e:	f84a 2b04 	str.w	r2, [sl], #4
 8009742:	f853 2b04 	ldr.w	r2, [r3], #4
 8009746:	4298      	cmp	r0, r3
 8009748:	fa22 fc0e 	lsr.w	ip, r2, lr
 800974c:	d8f2      	bhi.n	8009734 <__lshift+0x70>
 800974e:	1b03      	subs	r3, r0, r4
 8009750:	3b15      	subs	r3, #21
 8009752:	f023 0303 	bic.w	r3, r3, #3
 8009756:	3304      	adds	r3, #4
 8009758:	f104 0215 	add.w	r2, r4, #21
 800975c:	4290      	cmp	r0, r2
 800975e:	bf38      	it	cc
 8009760:	2304      	movcc	r3, #4
 8009762:	f841 c003 	str.w	ip, [r1, r3]
 8009766:	f1bc 0f00 	cmp.w	ip, #0
 800976a:	d001      	beq.n	8009770 <__lshift+0xac>
 800976c:	f108 0602 	add.w	r6, r8, #2
 8009770:	3e01      	subs	r6, #1
 8009772:	4638      	mov	r0, r7
 8009774:	4621      	mov	r1, r4
 8009776:	612e      	str	r6, [r5, #16]
 8009778:	f7ff fd8c 	bl	8009294 <_Bfree>
 800977c:	4628      	mov	r0, r5
 800977e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009782:	f842 0f04 	str.w	r0, [r2, #4]!
 8009786:	3301      	adds	r3, #1
 8009788:	e7c1      	b.n	800970e <__lshift+0x4a>
 800978a:	3904      	subs	r1, #4
 800978c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009790:	4298      	cmp	r0, r3
 8009792:	f841 2f04 	str.w	r2, [r1, #4]!
 8009796:	d8f9      	bhi.n	800978c <__lshift+0xc8>
 8009798:	e7ea      	b.n	8009770 <__lshift+0xac>
 800979a:	bf00      	nop
 800979c:	0800ac50 	.word	0x0800ac50
 80097a0:	0800ad40 	.word	0x0800ad40

080097a4 <__mcmp>:
 80097a4:	4603      	mov	r3, r0
 80097a6:	690a      	ldr	r2, [r1, #16]
 80097a8:	6900      	ldr	r0, [r0, #16]
 80097aa:	b530      	push	{r4, r5, lr}
 80097ac:	1a80      	subs	r0, r0, r2
 80097ae:	d10d      	bne.n	80097cc <__mcmp+0x28>
 80097b0:	3314      	adds	r3, #20
 80097b2:	3114      	adds	r1, #20
 80097b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80097b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80097bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80097c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80097c4:	4295      	cmp	r5, r2
 80097c6:	d002      	beq.n	80097ce <__mcmp+0x2a>
 80097c8:	d304      	bcc.n	80097d4 <__mcmp+0x30>
 80097ca:	2001      	movs	r0, #1
 80097cc:	bd30      	pop	{r4, r5, pc}
 80097ce:	42a3      	cmp	r3, r4
 80097d0:	d3f4      	bcc.n	80097bc <__mcmp+0x18>
 80097d2:	e7fb      	b.n	80097cc <__mcmp+0x28>
 80097d4:	f04f 30ff 	mov.w	r0, #4294967295
 80097d8:	e7f8      	b.n	80097cc <__mcmp+0x28>
	...

080097dc <__mdiff>:
 80097dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e0:	460d      	mov	r5, r1
 80097e2:	4607      	mov	r7, r0
 80097e4:	4611      	mov	r1, r2
 80097e6:	4628      	mov	r0, r5
 80097e8:	4614      	mov	r4, r2
 80097ea:	f7ff ffdb 	bl	80097a4 <__mcmp>
 80097ee:	1e06      	subs	r6, r0, #0
 80097f0:	d111      	bne.n	8009816 <__mdiff+0x3a>
 80097f2:	4631      	mov	r1, r6
 80097f4:	4638      	mov	r0, r7
 80097f6:	f7ff fd0d 	bl	8009214 <_Balloc>
 80097fa:	4602      	mov	r2, r0
 80097fc:	b928      	cbnz	r0, 800980a <__mdiff+0x2e>
 80097fe:	f240 2132 	movw	r1, #562	; 0x232
 8009802:	4b3a      	ldr	r3, [pc, #232]	; (80098ec <__mdiff+0x110>)
 8009804:	483a      	ldr	r0, [pc, #232]	; (80098f0 <__mdiff+0x114>)
 8009806:	f000 fe35 	bl	800a474 <__assert_func>
 800980a:	2301      	movs	r3, #1
 800980c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009810:	4610      	mov	r0, r2
 8009812:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009816:	bfa4      	itt	ge
 8009818:	4623      	movge	r3, r4
 800981a:	462c      	movge	r4, r5
 800981c:	4638      	mov	r0, r7
 800981e:	6861      	ldr	r1, [r4, #4]
 8009820:	bfa6      	itte	ge
 8009822:	461d      	movge	r5, r3
 8009824:	2600      	movge	r6, #0
 8009826:	2601      	movlt	r6, #1
 8009828:	f7ff fcf4 	bl	8009214 <_Balloc>
 800982c:	4602      	mov	r2, r0
 800982e:	b918      	cbnz	r0, 8009838 <__mdiff+0x5c>
 8009830:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009834:	4b2d      	ldr	r3, [pc, #180]	; (80098ec <__mdiff+0x110>)
 8009836:	e7e5      	b.n	8009804 <__mdiff+0x28>
 8009838:	f102 0814 	add.w	r8, r2, #20
 800983c:	46c2      	mov	sl, r8
 800983e:	f04f 0c00 	mov.w	ip, #0
 8009842:	6927      	ldr	r7, [r4, #16]
 8009844:	60c6      	str	r6, [r0, #12]
 8009846:	692e      	ldr	r6, [r5, #16]
 8009848:	f104 0014 	add.w	r0, r4, #20
 800984c:	f105 0914 	add.w	r9, r5, #20
 8009850:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009854:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009858:	3410      	adds	r4, #16
 800985a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800985e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009862:	fa1f f18b 	uxth.w	r1, fp
 8009866:	448c      	add	ip, r1
 8009868:	b299      	uxth	r1, r3
 800986a:	0c1b      	lsrs	r3, r3, #16
 800986c:	ebac 0101 	sub.w	r1, ip, r1
 8009870:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009874:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009878:	b289      	uxth	r1, r1
 800987a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800987e:	454e      	cmp	r6, r9
 8009880:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009884:	f84a 3b04 	str.w	r3, [sl], #4
 8009888:	d8e7      	bhi.n	800985a <__mdiff+0x7e>
 800988a:	1b73      	subs	r3, r6, r5
 800988c:	3b15      	subs	r3, #21
 800988e:	f023 0303 	bic.w	r3, r3, #3
 8009892:	3515      	adds	r5, #21
 8009894:	3304      	adds	r3, #4
 8009896:	42ae      	cmp	r6, r5
 8009898:	bf38      	it	cc
 800989a:	2304      	movcc	r3, #4
 800989c:	4418      	add	r0, r3
 800989e:	4443      	add	r3, r8
 80098a0:	461e      	mov	r6, r3
 80098a2:	4605      	mov	r5, r0
 80098a4:	4575      	cmp	r5, lr
 80098a6:	d30e      	bcc.n	80098c6 <__mdiff+0xea>
 80098a8:	f10e 0103 	add.w	r1, lr, #3
 80098ac:	1a09      	subs	r1, r1, r0
 80098ae:	f021 0103 	bic.w	r1, r1, #3
 80098b2:	3803      	subs	r0, #3
 80098b4:	4586      	cmp	lr, r0
 80098b6:	bf38      	it	cc
 80098b8:	2100      	movcc	r1, #0
 80098ba:	4419      	add	r1, r3
 80098bc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80098c0:	b18b      	cbz	r3, 80098e6 <__mdiff+0x10a>
 80098c2:	6117      	str	r7, [r2, #16]
 80098c4:	e7a4      	b.n	8009810 <__mdiff+0x34>
 80098c6:	f855 8b04 	ldr.w	r8, [r5], #4
 80098ca:	fa1f f188 	uxth.w	r1, r8
 80098ce:	4461      	add	r1, ip
 80098d0:	140c      	asrs	r4, r1, #16
 80098d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80098d6:	b289      	uxth	r1, r1
 80098d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80098dc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80098e0:	f846 1b04 	str.w	r1, [r6], #4
 80098e4:	e7de      	b.n	80098a4 <__mdiff+0xc8>
 80098e6:	3f01      	subs	r7, #1
 80098e8:	e7e8      	b.n	80098bc <__mdiff+0xe0>
 80098ea:	bf00      	nop
 80098ec:	0800ac50 	.word	0x0800ac50
 80098f0:	0800ad40 	.word	0x0800ad40

080098f4 <__ulp>:
 80098f4:	4b11      	ldr	r3, [pc, #68]	; (800993c <__ulp+0x48>)
 80098f6:	400b      	ands	r3, r1
 80098f8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	dd02      	ble.n	8009906 <__ulp+0x12>
 8009900:	2000      	movs	r0, #0
 8009902:	4619      	mov	r1, r3
 8009904:	4770      	bx	lr
 8009906:	425b      	negs	r3, r3
 8009908:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800990c:	f04f 0000 	mov.w	r0, #0
 8009910:	f04f 0100 	mov.w	r1, #0
 8009914:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009918:	da04      	bge.n	8009924 <__ulp+0x30>
 800991a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800991e:	fa43 f102 	asr.w	r1, r3, r2
 8009922:	4770      	bx	lr
 8009924:	f1a2 0314 	sub.w	r3, r2, #20
 8009928:	2b1e      	cmp	r3, #30
 800992a:	bfd6      	itet	le
 800992c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009930:	2301      	movgt	r3, #1
 8009932:	fa22 f303 	lsrle.w	r3, r2, r3
 8009936:	4618      	mov	r0, r3
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	7ff00000 	.word	0x7ff00000

08009940 <__b2d>:
 8009940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009944:	6907      	ldr	r7, [r0, #16]
 8009946:	f100 0914 	add.w	r9, r0, #20
 800994a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800994e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009952:	f1a7 0804 	sub.w	r8, r7, #4
 8009956:	4630      	mov	r0, r6
 8009958:	f7ff fd4e 	bl	80093f8 <__hi0bits>
 800995c:	f1c0 0320 	rsb	r3, r0, #32
 8009960:	280a      	cmp	r0, #10
 8009962:	600b      	str	r3, [r1, #0]
 8009964:	491f      	ldr	r1, [pc, #124]	; (80099e4 <__b2d+0xa4>)
 8009966:	dc17      	bgt.n	8009998 <__b2d+0x58>
 8009968:	45c1      	cmp	r9, r8
 800996a:	bf28      	it	cs
 800996c:	2200      	movcs	r2, #0
 800996e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009972:	fa26 f30c 	lsr.w	r3, r6, ip
 8009976:	bf38      	it	cc
 8009978:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800997c:	ea43 0501 	orr.w	r5, r3, r1
 8009980:	f100 0315 	add.w	r3, r0, #21
 8009984:	fa06 f303 	lsl.w	r3, r6, r3
 8009988:	fa22 f20c 	lsr.w	r2, r2, ip
 800998c:	ea43 0402 	orr.w	r4, r3, r2
 8009990:	4620      	mov	r0, r4
 8009992:	4629      	mov	r1, r5
 8009994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009998:	45c1      	cmp	r9, r8
 800999a:	bf2e      	itee	cs
 800999c:	2200      	movcs	r2, #0
 800999e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80099a2:	f1a7 0808 	subcc.w	r8, r7, #8
 80099a6:	f1b0 030b 	subs.w	r3, r0, #11
 80099aa:	d016      	beq.n	80099da <__b2d+0x9a>
 80099ac:	f1c3 0720 	rsb	r7, r3, #32
 80099b0:	fa22 f107 	lsr.w	r1, r2, r7
 80099b4:	45c8      	cmp	r8, r9
 80099b6:	fa06 f603 	lsl.w	r6, r6, r3
 80099ba:	ea46 0601 	orr.w	r6, r6, r1
 80099be:	bf94      	ite	ls
 80099c0:	2100      	movls	r1, #0
 80099c2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80099c6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80099ca:	fa02 f003 	lsl.w	r0, r2, r3
 80099ce:	40f9      	lsrs	r1, r7
 80099d0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80099d4:	ea40 0401 	orr.w	r4, r0, r1
 80099d8:	e7da      	b.n	8009990 <__b2d+0x50>
 80099da:	4614      	mov	r4, r2
 80099dc:	ea46 0501 	orr.w	r5, r6, r1
 80099e0:	e7d6      	b.n	8009990 <__b2d+0x50>
 80099e2:	bf00      	nop
 80099e4:	3ff00000 	.word	0x3ff00000

080099e8 <__d2b>:
 80099e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80099ec:	2101      	movs	r1, #1
 80099ee:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80099f2:	4690      	mov	r8, r2
 80099f4:	461d      	mov	r5, r3
 80099f6:	f7ff fc0d 	bl	8009214 <_Balloc>
 80099fa:	4604      	mov	r4, r0
 80099fc:	b930      	cbnz	r0, 8009a0c <__d2b+0x24>
 80099fe:	4602      	mov	r2, r0
 8009a00:	f240 310a 	movw	r1, #778	; 0x30a
 8009a04:	4b24      	ldr	r3, [pc, #144]	; (8009a98 <__d2b+0xb0>)
 8009a06:	4825      	ldr	r0, [pc, #148]	; (8009a9c <__d2b+0xb4>)
 8009a08:	f000 fd34 	bl	800a474 <__assert_func>
 8009a0c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009a10:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009a14:	bb2d      	cbnz	r5, 8009a62 <__d2b+0x7a>
 8009a16:	9301      	str	r3, [sp, #4]
 8009a18:	f1b8 0300 	subs.w	r3, r8, #0
 8009a1c:	d026      	beq.n	8009a6c <__d2b+0x84>
 8009a1e:	4668      	mov	r0, sp
 8009a20:	9300      	str	r3, [sp, #0]
 8009a22:	f7ff fd09 	bl	8009438 <__lo0bits>
 8009a26:	9900      	ldr	r1, [sp, #0]
 8009a28:	b1f0      	cbz	r0, 8009a68 <__d2b+0x80>
 8009a2a:	9a01      	ldr	r2, [sp, #4]
 8009a2c:	f1c0 0320 	rsb	r3, r0, #32
 8009a30:	fa02 f303 	lsl.w	r3, r2, r3
 8009a34:	430b      	orrs	r3, r1
 8009a36:	40c2      	lsrs	r2, r0
 8009a38:	6163      	str	r3, [r4, #20]
 8009a3a:	9201      	str	r2, [sp, #4]
 8009a3c:	9b01      	ldr	r3, [sp, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	bf14      	ite	ne
 8009a42:	2102      	movne	r1, #2
 8009a44:	2101      	moveq	r1, #1
 8009a46:	61a3      	str	r3, [r4, #24]
 8009a48:	6121      	str	r1, [r4, #16]
 8009a4a:	b1c5      	cbz	r5, 8009a7e <__d2b+0x96>
 8009a4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a50:	4405      	add	r5, r0
 8009a52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a56:	603d      	str	r5, [r7, #0]
 8009a58:	6030      	str	r0, [r6, #0]
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	b002      	add	sp, #8
 8009a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a66:	e7d6      	b.n	8009a16 <__d2b+0x2e>
 8009a68:	6161      	str	r1, [r4, #20]
 8009a6a:	e7e7      	b.n	8009a3c <__d2b+0x54>
 8009a6c:	a801      	add	r0, sp, #4
 8009a6e:	f7ff fce3 	bl	8009438 <__lo0bits>
 8009a72:	2101      	movs	r1, #1
 8009a74:	9b01      	ldr	r3, [sp, #4]
 8009a76:	6121      	str	r1, [r4, #16]
 8009a78:	6163      	str	r3, [r4, #20]
 8009a7a:	3020      	adds	r0, #32
 8009a7c:	e7e5      	b.n	8009a4a <__d2b+0x62>
 8009a7e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009a82:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a86:	6038      	str	r0, [r7, #0]
 8009a88:	6918      	ldr	r0, [r3, #16]
 8009a8a:	f7ff fcb5 	bl	80093f8 <__hi0bits>
 8009a8e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009a92:	6031      	str	r1, [r6, #0]
 8009a94:	e7e1      	b.n	8009a5a <__d2b+0x72>
 8009a96:	bf00      	nop
 8009a98:	0800ac50 	.word	0x0800ac50
 8009a9c:	0800ad40 	.word	0x0800ad40

08009aa0 <__ratio>:
 8009aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa4:	4688      	mov	r8, r1
 8009aa6:	4669      	mov	r1, sp
 8009aa8:	4681      	mov	r9, r0
 8009aaa:	f7ff ff49 	bl	8009940 <__b2d>
 8009aae:	460f      	mov	r7, r1
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	460d      	mov	r5, r1
 8009ab4:	4640      	mov	r0, r8
 8009ab6:	a901      	add	r1, sp, #4
 8009ab8:	f7ff ff42 	bl	8009940 <__b2d>
 8009abc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ac0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009ac4:	468b      	mov	fp, r1
 8009ac6:	eba3 0c02 	sub.w	ip, r3, r2
 8009aca:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009ace:	1a9b      	subs	r3, r3, r2
 8009ad0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	bfd5      	itete	le
 8009ad8:	460a      	movle	r2, r1
 8009ada:	462a      	movgt	r2, r5
 8009adc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009ae0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ae4:	bfd8      	it	le
 8009ae6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009aea:	465b      	mov	r3, fp
 8009aec:	4602      	mov	r2, r0
 8009aee:	4639      	mov	r1, r7
 8009af0:	4620      	mov	r0, r4
 8009af2:	f7f6 fe25 	bl	8000740 <__aeabi_ddiv>
 8009af6:	b003      	add	sp, #12
 8009af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009afc <__copybits>:
 8009afc:	3901      	subs	r1, #1
 8009afe:	b570      	push	{r4, r5, r6, lr}
 8009b00:	1149      	asrs	r1, r1, #5
 8009b02:	6914      	ldr	r4, [r2, #16]
 8009b04:	3101      	adds	r1, #1
 8009b06:	f102 0314 	add.w	r3, r2, #20
 8009b0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b12:	1f05      	subs	r5, r0, #4
 8009b14:	42a3      	cmp	r3, r4
 8009b16:	d30c      	bcc.n	8009b32 <__copybits+0x36>
 8009b18:	1aa3      	subs	r3, r4, r2
 8009b1a:	3b11      	subs	r3, #17
 8009b1c:	f023 0303 	bic.w	r3, r3, #3
 8009b20:	3211      	adds	r2, #17
 8009b22:	42a2      	cmp	r2, r4
 8009b24:	bf88      	it	hi
 8009b26:	2300      	movhi	r3, #0
 8009b28:	4418      	add	r0, r3
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	4288      	cmp	r0, r1
 8009b2e:	d305      	bcc.n	8009b3c <__copybits+0x40>
 8009b30:	bd70      	pop	{r4, r5, r6, pc}
 8009b32:	f853 6b04 	ldr.w	r6, [r3], #4
 8009b36:	f845 6f04 	str.w	r6, [r5, #4]!
 8009b3a:	e7eb      	b.n	8009b14 <__copybits+0x18>
 8009b3c:	f840 3b04 	str.w	r3, [r0], #4
 8009b40:	e7f4      	b.n	8009b2c <__copybits+0x30>

08009b42 <__any_on>:
 8009b42:	f100 0214 	add.w	r2, r0, #20
 8009b46:	6900      	ldr	r0, [r0, #16]
 8009b48:	114b      	asrs	r3, r1, #5
 8009b4a:	4298      	cmp	r0, r3
 8009b4c:	b510      	push	{r4, lr}
 8009b4e:	db11      	blt.n	8009b74 <__any_on+0x32>
 8009b50:	dd0a      	ble.n	8009b68 <__any_on+0x26>
 8009b52:	f011 011f 	ands.w	r1, r1, #31
 8009b56:	d007      	beq.n	8009b68 <__any_on+0x26>
 8009b58:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009b5c:	fa24 f001 	lsr.w	r0, r4, r1
 8009b60:	fa00 f101 	lsl.w	r1, r0, r1
 8009b64:	428c      	cmp	r4, r1
 8009b66:	d10b      	bne.n	8009b80 <__any_on+0x3e>
 8009b68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d803      	bhi.n	8009b78 <__any_on+0x36>
 8009b70:	2000      	movs	r0, #0
 8009b72:	bd10      	pop	{r4, pc}
 8009b74:	4603      	mov	r3, r0
 8009b76:	e7f7      	b.n	8009b68 <__any_on+0x26>
 8009b78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b7c:	2900      	cmp	r1, #0
 8009b7e:	d0f5      	beq.n	8009b6c <__any_on+0x2a>
 8009b80:	2001      	movs	r0, #1
 8009b82:	e7f6      	b.n	8009b72 <__any_on+0x30>

08009b84 <_calloc_r>:
 8009b84:	b570      	push	{r4, r5, r6, lr}
 8009b86:	fba1 5402 	umull	r5, r4, r1, r2
 8009b8a:	b934      	cbnz	r4, 8009b9a <_calloc_r+0x16>
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	f000 f875 	bl	8009c7c <_malloc_r>
 8009b92:	4606      	mov	r6, r0
 8009b94:	b928      	cbnz	r0, 8009ba2 <_calloc_r+0x1e>
 8009b96:	4630      	mov	r0, r6
 8009b98:	bd70      	pop	{r4, r5, r6, pc}
 8009b9a:	220c      	movs	r2, #12
 8009b9c:	2600      	movs	r6, #0
 8009b9e:	6002      	str	r2, [r0, #0]
 8009ba0:	e7f9      	b.n	8009b96 <_calloc_r+0x12>
 8009ba2:	462a      	mov	r2, r5
 8009ba4:	4621      	mov	r1, r4
 8009ba6:	f7fc f855 	bl	8005c54 <memset>
 8009baa:	e7f4      	b.n	8009b96 <_calloc_r+0x12>

08009bac <_free_r>:
 8009bac:	b538      	push	{r3, r4, r5, lr}
 8009bae:	4605      	mov	r5, r0
 8009bb0:	2900      	cmp	r1, #0
 8009bb2:	d040      	beq.n	8009c36 <_free_r+0x8a>
 8009bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bb8:	1f0c      	subs	r4, r1, #4
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	bfb8      	it	lt
 8009bbe:	18e4      	addlt	r4, r4, r3
 8009bc0:	f000 fce6 	bl	800a590 <__malloc_lock>
 8009bc4:	4a1c      	ldr	r2, [pc, #112]	; (8009c38 <_free_r+0x8c>)
 8009bc6:	6813      	ldr	r3, [r2, #0]
 8009bc8:	b933      	cbnz	r3, 8009bd8 <_free_r+0x2c>
 8009bca:	6063      	str	r3, [r4, #4]
 8009bcc:	6014      	str	r4, [r2, #0]
 8009bce:	4628      	mov	r0, r5
 8009bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bd4:	f000 bce2 	b.w	800a59c <__malloc_unlock>
 8009bd8:	42a3      	cmp	r3, r4
 8009bda:	d908      	bls.n	8009bee <_free_r+0x42>
 8009bdc:	6820      	ldr	r0, [r4, #0]
 8009bde:	1821      	adds	r1, r4, r0
 8009be0:	428b      	cmp	r3, r1
 8009be2:	bf01      	itttt	eq
 8009be4:	6819      	ldreq	r1, [r3, #0]
 8009be6:	685b      	ldreq	r3, [r3, #4]
 8009be8:	1809      	addeq	r1, r1, r0
 8009bea:	6021      	streq	r1, [r4, #0]
 8009bec:	e7ed      	b.n	8009bca <_free_r+0x1e>
 8009bee:	461a      	mov	r2, r3
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	b10b      	cbz	r3, 8009bf8 <_free_r+0x4c>
 8009bf4:	42a3      	cmp	r3, r4
 8009bf6:	d9fa      	bls.n	8009bee <_free_r+0x42>
 8009bf8:	6811      	ldr	r1, [r2, #0]
 8009bfa:	1850      	adds	r0, r2, r1
 8009bfc:	42a0      	cmp	r0, r4
 8009bfe:	d10b      	bne.n	8009c18 <_free_r+0x6c>
 8009c00:	6820      	ldr	r0, [r4, #0]
 8009c02:	4401      	add	r1, r0
 8009c04:	1850      	adds	r0, r2, r1
 8009c06:	4283      	cmp	r3, r0
 8009c08:	6011      	str	r1, [r2, #0]
 8009c0a:	d1e0      	bne.n	8009bce <_free_r+0x22>
 8009c0c:	6818      	ldr	r0, [r3, #0]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	4401      	add	r1, r0
 8009c12:	6011      	str	r1, [r2, #0]
 8009c14:	6053      	str	r3, [r2, #4]
 8009c16:	e7da      	b.n	8009bce <_free_r+0x22>
 8009c18:	d902      	bls.n	8009c20 <_free_r+0x74>
 8009c1a:	230c      	movs	r3, #12
 8009c1c:	602b      	str	r3, [r5, #0]
 8009c1e:	e7d6      	b.n	8009bce <_free_r+0x22>
 8009c20:	6820      	ldr	r0, [r4, #0]
 8009c22:	1821      	adds	r1, r4, r0
 8009c24:	428b      	cmp	r3, r1
 8009c26:	bf01      	itttt	eq
 8009c28:	6819      	ldreq	r1, [r3, #0]
 8009c2a:	685b      	ldreq	r3, [r3, #4]
 8009c2c:	1809      	addeq	r1, r1, r0
 8009c2e:	6021      	streq	r1, [r4, #0]
 8009c30:	6063      	str	r3, [r4, #4]
 8009c32:	6054      	str	r4, [r2, #4]
 8009c34:	e7cb      	b.n	8009bce <_free_r+0x22>
 8009c36:	bd38      	pop	{r3, r4, r5, pc}
 8009c38:	200003e4 	.word	0x200003e4

08009c3c <sbrk_aligned>:
 8009c3c:	b570      	push	{r4, r5, r6, lr}
 8009c3e:	4e0e      	ldr	r6, [pc, #56]	; (8009c78 <sbrk_aligned+0x3c>)
 8009c40:	460c      	mov	r4, r1
 8009c42:	6831      	ldr	r1, [r6, #0]
 8009c44:	4605      	mov	r5, r0
 8009c46:	b911      	cbnz	r1, 8009c4e <sbrk_aligned+0x12>
 8009c48:	f000 fb8e 	bl	800a368 <_sbrk_r>
 8009c4c:	6030      	str	r0, [r6, #0]
 8009c4e:	4621      	mov	r1, r4
 8009c50:	4628      	mov	r0, r5
 8009c52:	f000 fb89 	bl	800a368 <_sbrk_r>
 8009c56:	1c43      	adds	r3, r0, #1
 8009c58:	d00a      	beq.n	8009c70 <sbrk_aligned+0x34>
 8009c5a:	1cc4      	adds	r4, r0, #3
 8009c5c:	f024 0403 	bic.w	r4, r4, #3
 8009c60:	42a0      	cmp	r0, r4
 8009c62:	d007      	beq.n	8009c74 <sbrk_aligned+0x38>
 8009c64:	1a21      	subs	r1, r4, r0
 8009c66:	4628      	mov	r0, r5
 8009c68:	f000 fb7e 	bl	800a368 <_sbrk_r>
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	d101      	bne.n	8009c74 <sbrk_aligned+0x38>
 8009c70:	f04f 34ff 	mov.w	r4, #4294967295
 8009c74:	4620      	mov	r0, r4
 8009c76:	bd70      	pop	{r4, r5, r6, pc}
 8009c78:	200003e8 	.word	0x200003e8

08009c7c <_malloc_r>:
 8009c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c80:	1ccd      	adds	r5, r1, #3
 8009c82:	f025 0503 	bic.w	r5, r5, #3
 8009c86:	3508      	adds	r5, #8
 8009c88:	2d0c      	cmp	r5, #12
 8009c8a:	bf38      	it	cc
 8009c8c:	250c      	movcc	r5, #12
 8009c8e:	2d00      	cmp	r5, #0
 8009c90:	4607      	mov	r7, r0
 8009c92:	db01      	blt.n	8009c98 <_malloc_r+0x1c>
 8009c94:	42a9      	cmp	r1, r5
 8009c96:	d905      	bls.n	8009ca4 <_malloc_r+0x28>
 8009c98:	230c      	movs	r3, #12
 8009c9a:	2600      	movs	r6, #0
 8009c9c:	603b      	str	r3, [r7, #0]
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca4:	4e2e      	ldr	r6, [pc, #184]	; (8009d60 <_malloc_r+0xe4>)
 8009ca6:	f000 fc73 	bl	800a590 <__malloc_lock>
 8009caa:	6833      	ldr	r3, [r6, #0]
 8009cac:	461c      	mov	r4, r3
 8009cae:	bb34      	cbnz	r4, 8009cfe <_malloc_r+0x82>
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	4638      	mov	r0, r7
 8009cb4:	f7ff ffc2 	bl	8009c3c <sbrk_aligned>
 8009cb8:	1c43      	adds	r3, r0, #1
 8009cba:	4604      	mov	r4, r0
 8009cbc:	d14d      	bne.n	8009d5a <_malloc_r+0xde>
 8009cbe:	6834      	ldr	r4, [r6, #0]
 8009cc0:	4626      	mov	r6, r4
 8009cc2:	2e00      	cmp	r6, #0
 8009cc4:	d140      	bne.n	8009d48 <_malloc_r+0xcc>
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	4631      	mov	r1, r6
 8009cca:	4638      	mov	r0, r7
 8009ccc:	eb04 0803 	add.w	r8, r4, r3
 8009cd0:	f000 fb4a 	bl	800a368 <_sbrk_r>
 8009cd4:	4580      	cmp	r8, r0
 8009cd6:	d13a      	bne.n	8009d4e <_malloc_r+0xd2>
 8009cd8:	6821      	ldr	r1, [r4, #0]
 8009cda:	3503      	adds	r5, #3
 8009cdc:	1a6d      	subs	r5, r5, r1
 8009cde:	f025 0503 	bic.w	r5, r5, #3
 8009ce2:	3508      	adds	r5, #8
 8009ce4:	2d0c      	cmp	r5, #12
 8009ce6:	bf38      	it	cc
 8009ce8:	250c      	movcc	r5, #12
 8009cea:	4638      	mov	r0, r7
 8009cec:	4629      	mov	r1, r5
 8009cee:	f7ff ffa5 	bl	8009c3c <sbrk_aligned>
 8009cf2:	3001      	adds	r0, #1
 8009cf4:	d02b      	beq.n	8009d4e <_malloc_r+0xd2>
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	442b      	add	r3, r5
 8009cfa:	6023      	str	r3, [r4, #0]
 8009cfc:	e00e      	b.n	8009d1c <_malloc_r+0xa0>
 8009cfe:	6822      	ldr	r2, [r4, #0]
 8009d00:	1b52      	subs	r2, r2, r5
 8009d02:	d41e      	bmi.n	8009d42 <_malloc_r+0xc6>
 8009d04:	2a0b      	cmp	r2, #11
 8009d06:	d916      	bls.n	8009d36 <_malloc_r+0xba>
 8009d08:	1961      	adds	r1, r4, r5
 8009d0a:	42a3      	cmp	r3, r4
 8009d0c:	6025      	str	r5, [r4, #0]
 8009d0e:	bf18      	it	ne
 8009d10:	6059      	strne	r1, [r3, #4]
 8009d12:	6863      	ldr	r3, [r4, #4]
 8009d14:	bf08      	it	eq
 8009d16:	6031      	streq	r1, [r6, #0]
 8009d18:	5162      	str	r2, [r4, r5]
 8009d1a:	604b      	str	r3, [r1, #4]
 8009d1c:	4638      	mov	r0, r7
 8009d1e:	f104 060b 	add.w	r6, r4, #11
 8009d22:	f000 fc3b 	bl	800a59c <__malloc_unlock>
 8009d26:	f026 0607 	bic.w	r6, r6, #7
 8009d2a:	1d23      	adds	r3, r4, #4
 8009d2c:	1af2      	subs	r2, r6, r3
 8009d2e:	d0b6      	beq.n	8009c9e <_malloc_r+0x22>
 8009d30:	1b9b      	subs	r3, r3, r6
 8009d32:	50a3      	str	r3, [r4, r2]
 8009d34:	e7b3      	b.n	8009c9e <_malloc_r+0x22>
 8009d36:	6862      	ldr	r2, [r4, #4]
 8009d38:	42a3      	cmp	r3, r4
 8009d3a:	bf0c      	ite	eq
 8009d3c:	6032      	streq	r2, [r6, #0]
 8009d3e:	605a      	strne	r2, [r3, #4]
 8009d40:	e7ec      	b.n	8009d1c <_malloc_r+0xa0>
 8009d42:	4623      	mov	r3, r4
 8009d44:	6864      	ldr	r4, [r4, #4]
 8009d46:	e7b2      	b.n	8009cae <_malloc_r+0x32>
 8009d48:	4634      	mov	r4, r6
 8009d4a:	6876      	ldr	r6, [r6, #4]
 8009d4c:	e7b9      	b.n	8009cc2 <_malloc_r+0x46>
 8009d4e:	230c      	movs	r3, #12
 8009d50:	4638      	mov	r0, r7
 8009d52:	603b      	str	r3, [r7, #0]
 8009d54:	f000 fc22 	bl	800a59c <__malloc_unlock>
 8009d58:	e7a1      	b.n	8009c9e <_malloc_r+0x22>
 8009d5a:	6025      	str	r5, [r4, #0]
 8009d5c:	e7de      	b.n	8009d1c <_malloc_r+0xa0>
 8009d5e:	bf00      	nop
 8009d60:	200003e4 	.word	0x200003e4

08009d64 <__ssputs_r>:
 8009d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d68:	688e      	ldr	r6, [r1, #8]
 8009d6a:	4682      	mov	sl, r0
 8009d6c:	429e      	cmp	r6, r3
 8009d6e:	460c      	mov	r4, r1
 8009d70:	4690      	mov	r8, r2
 8009d72:	461f      	mov	r7, r3
 8009d74:	d838      	bhi.n	8009de8 <__ssputs_r+0x84>
 8009d76:	898a      	ldrh	r2, [r1, #12]
 8009d78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d7c:	d032      	beq.n	8009de4 <__ssputs_r+0x80>
 8009d7e:	6825      	ldr	r5, [r4, #0]
 8009d80:	6909      	ldr	r1, [r1, #16]
 8009d82:	3301      	adds	r3, #1
 8009d84:	eba5 0901 	sub.w	r9, r5, r1
 8009d88:	6965      	ldr	r5, [r4, #20]
 8009d8a:	444b      	add	r3, r9
 8009d8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d94:	106d      	asrs	r5, r5, #1
 8009d96:	429d      	cmp	r5, r3
 8009d98:	bf38      	it	cc
 8009d9a:	461d      	movcc	r5, r3
 8009d9c:	0553      	lsls	r3, r2, #21
 8009d9e:	d531      	bpl.n	8009e04 <__ssputs_r+0xa0>
 8009da0:	4629      	mov	r1, r5
 8009da2:	f7ff ff6b 	bl	8009c7c <_malloc_r>
 8009da6:	4606      	mov	r6, r0
 8009da8:	b950      	cbnz	r0, 8009dc0 <__ssputs_r+0x5c>
 8009daa:	230c      	movs	r3, #12
 8009dac:	f04f 30ff 	mov.w	r0, #4294967295
 8009db0:	f8ca 3000 	str.w	r3, [sl]
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dba:	81a3      	strh	r3, [r4, #12]
 8009dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc0:	464a      	mov	r2, r9
 8009dc2:	6921      	ldr	r1, [r4, #16]
 8009dc4:	f7ff fa18 	bl	80091f8 <memcpy>
 8009dc8:	89a3      	ldrh	r3, [r4, #12]
 8009dca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dd2:	81a3      	strh	r3, [r4, #12]
 8009dd4:	6126      	str	r6, [r4, #16]
 8009dd6:	444e      	add	r6, r9
 8009dd8:	6026      	str	r6, [r4, #0]
 8009dda:	463e      	mov	r6, r7
 8009ddc:	6165      	str	r5, [r4, #20]
 8009dde:	eba5 0509 	sub.w	r5, r5, r9
 8009de2:	60a5      	str	r5, [r4, #8]
 8009de4:	42be      	cmp	r6, r7
 8009de6:	d900      	bls.n	8009dea <__ssputs_r+0x86>
 8009de8:	463e      	mov	r6, r7
 8009dea:	4632      	mov	r2, r6
 8009dec:	4641      	mov	r1, r8
 8009dee:	6820      	ldr	r0, [r4, #0]
 8009df0:	f000 fbb4 	bl	800a55c <memmove>
 8009df4:	68a3      	ldr	r3, [r4, #8]
 8009df6:	2000      	movs	r0, #0
 8009df8:	1b9b      	subs	r3, r3, r6
 8009dfa:	60a3      	str	r3, [r4, #8]
 8009dfc:	6823      	ldr	r3, [r4, #0]
 8009dfe:	4433      	add	r3, r6
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	e7db      	b.n	8009dbc <__ssputs_r+0x58>
 8009e04:	462a      	mov	r2, r5
 8009e06:	f000 fbcf 	bl	800a5a8 <_realloc_r>
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d1e1      	bne.n	8009dd4 <__ssputs_r+0x70>
 8009e10:	4650      	mov	r0, sl
 8009e12:	6921      	ldr	r1, [r4, #16]
 8009e14:	f7ff feca 	bl	8009bac <_free_r>
 8009e18:	e7c7      	b.n	8009daa <__ssputs_r+0x46>
	...

08009e1c <_svfiprintf_r>:
 8009e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e20:	4698      	mov	r8, r3
 8009e22:	898b      	ldrh	r3, [r1, #12]
 8009e24:	4607      	mov	r7, r0
 8009e26:	061b      	lsls	r3, r3, #24
 8009e28:	460d      	mov	r5, r1
 8009e2a:	4614      	mov	r4, r2
 8009e2c:	b09d      	sub	sp, #116	; 0x74
 8009e2e:	d50e      	bpl.n	8009e4e <_svfiprintf_r+0x32>
 8009e30:	690b      	ldr	r3, [r1, #16]
 8009e32:	b963      	cbnz	r3, 8009e4e <_svfiprintf_r+0x32>
 8009e34:	2140      	movs	r1, #64	; 0x40
 8009e36:	f7ff ff21 	bl	8009c7c <_malloc_r>
 8009e3a:	6028      	str	r0, [r5, #0]
 8009e3c:	6128      	str	r0, [r5, #16]
 8009e3e:	b920      	cbnz	r0, 8009e4a <_svfiprintf_r+0x2e>
 8009e40:	230c      	movs	r3, #12
 8009e42:	603b      	str	r3, [r7, #0]
 8009e44:	f04f 30ff 	mov.w	r0, #4294967295
 8009e48:	e0d1      	b.n	8009fee <_svfiprintf_r+0x1d2>
 8009e4a:	2340      	movs	r3, #64	; 0x40
 8009e4c:	616b      	str	r3, [r5, #20]
 8009e4e:	2300      	movs	r3, #0
 8009e50:	9309      	str	r3, [sp, #36]	; 0x24
 8009e52:	2320      	movs	r3, #32
 8009e54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e58:	2330      	movs	r3, #48	; 0x30
 8009e5a:	f04f 0901 	mov.w	r9, #1
 8009e5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a008 <_svfiprintf_r+0x1ec>
 8009e66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e6a:	4623      	mov	r3, r4
 8009e6c:	469a      	mov	sl, r3
 8009e6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e72:	b10a      	cbz	r2, 8009e78 <_svfiprintf_r+0x5c>
 8009e74:	2a25      	cmp	r2, #37	; 0x25
 8009e76:	d1f9      	bne.n	8009e6c <_svfiprintf_r+0x50>
 8009e78:	ebba 0b04 	subs.w	fp, sl, r4
 8009e7c:	d00b      	beq.n	8009e96 <_svfiprintf_r+0x7a>
 8009e7e:	465b      	mov	r3, fp
 8009e80:	4622      	mov	r2, r4
 8009e82:	4629      	mov	r1, r5
 8009e84:	4638      	mov	r0, r7
 8009e86:	f7ff ff6d 	bl	8009d64 <__ssputs_r>
 8009e8a:	3001      	adds	r0, #1
 8009e8c:	f000 80aa 	beq.w	8009fe4 <_svfiprintf_r+0x1c8>
 8009e90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e92:	445a      	add	r2, fp
 8009e94:	9209      	str	r2, [sp, #36]	; 0x24
 8009e96:	f89a 3000 	ldrb.w	r3, [sl]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f000 80a2 	beq.w	8009fe4 <_svfiprintf_r+0x1c8>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009eaa:	f10a 0a01 	add.w	sl, sl, #1
 8009eae:	9304      	str	r3, [sp, #16]
 8009eb0:	9307      	str	r3, [sp, #28]
 8009eb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009eb6:	931a      	str	r3, [sp, #104]	; 0x68
 8009eb8:	4654      	mov	r4, sl
 8009eba:	2205      	movs	r2, #5
 8009ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ec0:	4851      	ldr	r0, [pc, #324]	; (800a008 <_svfiprintf_r+0x1ec>)
 8009ec2:	f7ff f98b 	bl	80091dc <memchr>
 8009ec6:	9a04      	ldr	r2, [sp, #16]
 8009ec8:	b9d8      	cbnz	r0, 8009f02 <_svfiprintf_r+0xe6>
 8009eca:	06d0      	lsls	r0, r2, #27
 8009ecc:	bf44      	itt	mi
 8009ece:	2320      	movmi	r3, #32
 8009ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ed4:	0711      	lsls	r1, r2, #28
 8009ed6:	bf44      	itt	mi
 8009ed8:	232b      	movmi	r3, #43	; 0x2b
 8009eda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ede:	f89a 3000 	ldrb.w	r3, [sl]
 8009ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ee4:	d015      	beq.n	8009f12 <_svfiprintf_r+0xf6>
 8009ee6:	4654      	mov	r4, sl
 8009ee8:	2000      	movs	r0, #0
 8009eea:	f04f 0c0a 	mov.w	ip, #10
 8009eee:	9a07      	ldr	r2, [sp, #28]
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ef6:	3b30      	subs	r3, #48	; 0x30
 8009ef8:	2b09      	cmp	r3, #9
 8009efa:	d94e      	bls.n	8009f9a <_svfiprintf_r+0x17e>
 8009efc:	b1b0      	cbz	r0, 8009f2c <_svfiprintf_r+0x110>
 8009efe:	9207      	str	r2, [sp, #28]
 8009f00:	e014      	b.n	8009f2c <_svfiprintf_r+0x110>
 8009f02:	eba0 0308 	sub.w	r3, r0, r8
 8009f06:	fa09 f303 	lsl.w	r3, r9, r3
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	46a2      	mov	sl, r4
 8009f0e:	9304      	str	r3, [sp, #16]
 8009f10:	e7d2      	b.n	8009eb8 <_svfiprintf_r+0x9c>
 8009f12:	9b03      	ldr	r3, [sp, #12]
 8009f14:	1d19      	adds	r1, r3, #4
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	9103      	str	r1, [sp, #12]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	bfbb      	ittet	lt
 8009f1e:	425b      	neglt	r3, r3
 8009f20:	f042 0202 	orrlt.w	r2, r2, #2
 8009f24:	9307      	strge	r3, [sp, #28]
 8009f26:	9307      	strlt	r3, [sp, #28]
 8009f28:	bfb8      	it	lt
 8009f2a:	9204      	strlt	r2, [sp, #16]
 8009f2c:	7823      	ldrb	r3, [r4, #0]
 8009f2e:	2b2e      	cmp	r3, #46	; 0x2e
 8009f30:	d10c      	bne.n	8009f4c <_svfiprintf_r+0x130>
 8009f32:	7863      	ldrb	r3, [r4, #1]
 8009f34:	2b2a      	cmp	r3, #42	; 0x2a
 8009f36:	d135      	bne.n	8009fa4 <_svfiprintf_r+0x188>
 8009f38:	9b03      	ldr	r3, [sp, #12]
 8009f3a:	3402      	adds	r4, #2
 8009f3c:	1d1a      	adds	r2, r3, #4
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	9203      	str	r2, [sp, #12]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	bfb8      	it	lt
 8009f46:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f4a:	9305      	str	r3, [sp, #20]
 8009f4c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a00c <_svfiprintf_r+0x1f0>
 8009f50:	2203      	movs	r2, #3
 8009f52:	4650      	mov	r0, sl
 8009f54:	7821      	ldrb	r1, [r4, #0]
 8009f56:	f7ff f941 	bl	80091dc <memchr>
 8009f5a:	b140      	cbz	r0, 8009f6e <_svfiprintf_r+0x152>
 8009f5c:	2340      	movs	r3, #64	; 0x40
 8009f5e:	eba0 000a 	sub.w	r0, r0, sl
 8009f62:	fa03 f000 	lsl.w	r0, r3, r0
 8009f66:	9b04      	ldr	r3, [sp, #16]
 8009f68:	3401      	adds	r4, #1
 8009f6a:	4303      	orrs	r3, r0
 8009f6c:	9304      	str	r3, [sp, #16]
 8009f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f72:	2206      	movs	r2, #6
 8009f74:	4826      	ldr	r0, [pc, #152]	; (800a010 <_svfiprintf_r+0x1f4>)
 8009f76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f7a:	f7ff f92f 	bl	80091dc <memchr>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d038      	beq.n	8009ff4 <_svfiprintf_r+0x1d8>
 8009f82:	4b24      	ldr	r3, [pc, #144]	; (800a014 <_svfiprintf_r+0x1f8>)
 8009f84:	bb1b      	cbnz	r3, 8009fce <_svfiprintf_r+0x1b2>
 8009f86:	9b03      	ldr	r3, [sp, #12]
 8009f88:	3307      	adds	r3, #7
 8009f8a:	f023 0307 	bic.w	r3, r3, #7
 8009f8e:	3308      	adds	r3, #8
 8009f90:	9303      	str	r3, [sp, #12]
 8009f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f94:	4433      	add	r3, r6
 8009f96:	9309      	str	r3, [sp, #36]	; 0x24
 8009f98:	e767      	b.n	8009e6a <_svfiprintf_r+0x4e>
 8009f9a:	460c      	mov	r4, r1
 8009f9c:	2001      	movs	r0, #1
 8009f9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fa2:	e7a5      	b.n	8009ef0 <_svfiprintf_r+0xd4>
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	f04f 0c0a 	mov.w	ip, #10
 8009faa:	4619      	mov	r1, r3
 8009fac:	3401      	adds	r4, #1
 8009fae:	9305      	str	r3, [sp, #20]
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fb6:	3a30      	subs	r2, #48	; 0x30
 8009fb8:	2a09      	cmp	r2, #9
 8009fba:	d903      	bls.n	8009fc4 <_svfiprintf_r+0x1a8>
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d0c5      	beq.n	8009f4c <_svfiprintf_r+0x130>
 8009fc0:	9105      	str	r1, [sp, #20]
 8009fc2:	e7c3      	b.n	8009f4c <_svfiprintf_r+0x130>
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fcc:	e7f0      	b.n	8009fb0 <_svfiprintf_r+0x194>
 8009fce:	ab03      	add	r3, sp, #12
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	462a      	mov	r2, r5
 8009fd4:	4638      	mov	r0, r7
 8009fd6:	4b10      	ldr	r3, [pc, #64]	; (800a018 <_svfiprintf_r+0x1fc>)
 8009fd8:	a904      	add	r1, sp, #16
 8009fda:	f7fb fee1 	bl	8005da0 <_printf_float>
 8009fde:	1c42      	adds	r2, r0, #1
 8009fe0:	4606      	mov	r6, r0
 8009fe2:	d1d6      	bne.n	8009f92 <_svfiprintf_r+0x176>
 8009fe4:	89ab      	ldrh	r3, [r5, #12]
 8009fe6:	065b      	lsls	r3, r3, #25
 8009fe8:	f53f af2c 	bmi.w	8009e44 <_svfiprintf_r+0x28>
 8009fec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fee:	b01d      	add	sp, #116	; 0x74
 8009ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff4:	ab03      	add	r3, sp, #12
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	462a      	mov	r2, r5
 8009ffa:	4638      	mov	r0, r7
 8009ffc:	4b06      	ldr	r3, [pc, #24]	; (800a018 <_svfiprintf_r+0x1fc>)
 8009ffe:	a904      	add	r1, sp, #16
 800a000:	f7fc f96a 	bl	80062d8 <_printf_i>
 800a004:	e7eb      	b.n	8009fde <_svfiprintf_r+0x1c2>
 800a006:	bf00      	nop
 800a008:	0800ae9c 	.word	0x0800ae9c
 800a00c:	0800aea2 	.word	0x0800aea2
 800a010:	0800aea6 	.word	0x0800aea6
 800a014:	08005da1 	.word	0x08005da1
 800a018:	08009d65 	.word	0x08009d65

0800a01c <__sfputc_r>:
 800a01c:	6893      	ldr	r3, [r2, #8]
 800a01e:	b410      	push	{r4}
 800a020:	3b01      	subs	r3, #1
 800a022:	2b00      	cmp	r3, #0
 800a024:	6093      	str	r3, [r2, #8]
 800a026:	da07      	bge.n	800a038 <__sfputc_r+0x1c>
 800a028:	6994      	ldr	r4, [r2, #24]
 800a02a:	42a3      	cmp	r3, r4
 800a02c:	db01      	blt.n	800a032 <__sfputc_r+0x16>
 800a02e:	290a      	cmp	r1, #10
 800a030:	d102      	bne.n	800a038 <__sfputc_r+0x1c>
 800a032:	bc10      	pop	{r4}
 800a034:	f7fd bbf6 	b.w	8007824 <__swbuf_r>
 800a038:	6813      	ldr	r3, [r2, #0]
 800a03a:	1c58      	adds	r0, r3, #1
 800a03c:	6010      	str	r0, [r2, #0]
 800a03e:	7019      	strb	r1, [r3, #0]
 800a040:	4608      	mov	r0, r1
 800a042:	bc10      	pop	{r4}
 800a044:	4770      	bx	lr

0800a046 <__sfputs_r>:
 800a046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a048:	4606      	mov	r6, r0
 800a04a:	460f      	mov	r7, r1
 800a04c:	4614      	mov	r4, r2
 800a04e:	18d5      	adds	r5, r2, r3
 800a050:	42ac      	cmp	r4, r5
 800a052:	d101      	bne.n	800a058 <__sfputs_r+0x12>
 800a054:	2000      	movs	r0, #0
 800a056:	e007      	b.n	800a068 <__sfputs_r+0x22>
 800a058:	463a      	mov	r2, r7
 800a05a:	4630      	mov	r0, r6
 800a05c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a060:	f7ff ffdc 	bl	800a01c <__sfputc_r>
 800a064:	1c43      	adds	r3, r0, #1
 800a066:	d1f3      	bne.n	800a050 <__sfputs_r+0xa>
 800a068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a06c <_vfiprintf_r>:
 800a06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a070:	460d      	mov	r5, r1
 800a072:	4614      	mov	r4, r2
 800a074:	4698      	mov	r8, r3
 800a076:	4606      	mov	r6, r0
 800a078:	b09d      	sub	sp, #116	; 0x74
 800a07a:	b118      	cbz	r0, 800a084 <_vfiprintf_r+0x18>
 800a07c:	6983      	ldr	r3, [r0, #24]
 800a07e:	b90b      	cbnz	r3, 800a084 <_vfiprintf_r+0x18>
 800a080:	f7fe fc22 	bl	80088c8 <__sinit>
 800a084:	4b89      	ldr	r3, [pc, #548]	; (800a2ac <_vfiprintf_r+0x240>)
 800a086:	429d      	cmp	r5, r3
 800a088:	d11b      	bne.n	800a0c2 <_vfiprintf_r+0x56>
 800a08a:	6875      	ldr	r5, [r6, #4]
 800a08c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a08e:	07d9      	lsls	r1, r3, #31
 800a090:	d405      	bmi.n	800a09e <_vfiprintf_r+0x32>
 800a092:	89ab      	ldrh	r3, [r5, #12]
 800a094:	059a      	lsls	r2, r3, #22
 800a096:	d402      	bmi.n	800a09e <_vfiprintf_r+0x32>
 800a098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a09a:	f7ff f81e 	bl	80090da <__retarget_lock_acquire_recursive>
 800a09e:	89ab      	ldrh	r3, [r5, #12]
 800a0a0:	071b      	lsls	r3, r3, #28
 800a0a2:	d501      	bpl.n	800a0a8 <_vfiprintf_r+0x3c>
 800a0a4:	692b      	ldr	r3, [r5, #16]
 800a0a6:	b9eb      	cbnz	r3, 800a0e4 <_vfiprintf_r+0x78>
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	f7fd fc0c 	bl	80078c8 <__swsetup_r>
 800a0b0:	b1c0      	cbz	r0, 800a0e4 <_vfiprintf_r+0x78>
 800a0b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0b4:	07dc      	lsls	r4, r3, #31
 800a0b6:	d50e      	bpl.n	800a0d6 <_vfiprintf_r+0x6a>
 800a0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0bc:	b01d      	add	sp, #116	; 0x74
 800a0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c2:	4b7b      	ldr	r3, [pc, #492]	; (800a2b0 <_vfiprintf_r+0x244>)
 800a0c4:	429d      	cmp	r5, r3
 800a0c6:	d101      	bne.n	800a0cc <_vfiprintf_r+0x60>
 800a0c8:	68b5      	ldr	r5, [r6, #8]
 800a0ca:	e7df      	b.n	800a08c <_vfiprintf_r+0x20>
 800a0cc:	4b79      	ldr	r3, [pc, #484]	; (800a2b4 <_vfiprintf_r+0x248>)
 800a0ce:	429d      	cmp	r5, r3
 800a0d0:	bf08      	it	eq
 800a0d2:	68f5      	ldreq	r5, [r6, #12]
 800a0d4:	e7da      	b.n	800a08c <_vfiprintf_r+0x20>
 800a0d6:	89ab      	ldrh	r3, [r5, #12]
 800a0d8:	0598      	lsls	r0, r3, #22
 800a0da:	d4ed      	bmi.n	800a0b8 <_vfiprintf_r+0x4c>
 800a0dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0de:	f7fe fffd 	bl	80090dc <__retarget_lock_release_recursive>
 800a0e2:	e7e9      	b.n	800a0b8 <_vfiprintf_r+0x4c>
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e8:	2320      	movs	r3, #32
 800a0ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0ee:	2330      	movs	r3, #48	; 0x30
 800a0f0:	f04f 0901 	mov.w	r9, #1
 800a0f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0f8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a2b8 <_vfiprintf_r+0x24c>
 800a0fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a100:	4623      	mov	r3, r4
 800a102:	469a      	mov	sl, r3
 800a104:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a108:	b10a      	cbz	r2, 800a10e <_vfiprintf_r+0xa2>
 800a10a:	2a25      	cmp	r2, #37	; 0x25
 800a10c:	d1f9      	bne.n	800a102 <_vfiprintf_r+0x96>
 800a10e:	ebba 0b04 	subs.w	fp, sl, r4
 800a112:	d00b      	beq.n	800a12c <_vfiprintf_r+0xc0>
 800a114:	465b      	mov	r3, fp
 800a116:	4622      	mov	r2, r4
 800a118:	4629      	mov	r1, r5
 800a11a:	4630      	mov	r0, r6
 800a11c:	f7ff ff93 	bl	800a046 <__sfputs_r>
 800a120:	3001      	adds	r0, #1
 800a122:	f000 80aa 	beq.w	800a27a <_vfiprintf_r+0x20e>
 800a126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a128:	445a      	add	r2, fp
 800a12a:	9209      	str	r2, [sp, #36]	; 0x24
 800a12c:	f89a 3000 	ldrb.w	r3, [sl]
 800a130:	2b00      	cmp	r3, #0
 800a132:	f000 80a2 	beq.w	800a27a <_vfiprintf_r+0x20e>
 800a136:	2300      	movs	r3, #0
 800a138:	f04f 32ff 	mov.w	r2, #4294967295
 800a13c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a140:	f10a 0a01 	add.w	sl, sl, #1
 800a144:	9304      	str	r3, [sp, #16]
 800a146:	9307      	str	r3, [sp, #28]
 800a148:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a14c:	931a      	str	r3, [sp, #104]	; 0x68
 800a14e:	4654      	mov	r4, sl
 800a150:	2205      	movs	r2, #5
 800a152:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a156:	4858      	ldr	r0, [pc, #352]	; (800a2b8 <_vfiprintf_r+0x24c>)
 800a158:	f7ff f840 	bl	80091dc <memchr>
 800a15c:	9a04      	ldr	r2, [sp, #16]
 800a15e:	b9d8      	cbnz	r0, 800a198 <_vfiprintf_r+0x12c>
 800a160:	06d1      	lsls	r1, r2, #27
 800a162:	bf44      	itt	mi
 800a164:	2320      	movmi	r3, #32
 800a166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a16a:	0713      	lsls	r3, r2, #28
 800a16c:	bf44      	itt	mi
 800a16e:	232b      	movmi	r3, #43	; 0x2b
 800a170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a174:	f89a 3000 	ldrb.w	r3, [sl]
 800a178:	2b2a      	cmp	r3, #42	; 0x2a
 800a17a:	d015      	beq.n	800a1a8 <_vfiprintf_r+0x13c>
 800a17c:	4654      	mov	r4, sl
 800a17e:	2000      	movs	r0, #0
 800a180:	f04f 0c0a 	mov.w	ip, #10
 800a184:	9a07      	ldr	r2, [sp, #28]
 800a186:	4621      	mov	r1, r4
 800a188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a18c:	3b30      	subs	r3, #48	; 0x30
 800a18e:	2b09      	cmp	r3, #9
 800a190:	d94e      	bls.n	800a230 <_vfiprintf_r+0x1c4>
 800a192:	b1b0      	cbz	r0, 800a1c2 <_vfiprintf_r+0x156>
 800a194:	9207      	str	r2, [sp, #28]
 800a196:	e014      	b.n	800a1c2 <_vfiprintf_r+0x156>
 800a198:	eba0 0308 	sub.w	r3, r0, r8
 800a19c:	fa09 f303 	lsl.w	r3, r9, r3
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	46a2      	mov	sl, r4
 800a1a4:	9304      	str	r3, [sp, #16]
 800a1a6:	e7d2      	b.n	800a14e <_vfiprintf_r+0xe2>
 800a1a8:	9b03      	ldr	r3, [sp, #12]
 800a1aa:	1d19      	adds	r1, r3, #4
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	9103      	str	r1, [sp, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	bfbb      	ittet	lt
 800a1b4:	425b      	neglt	r3, r3
 800a1b6:	f042 0202 	orrlt.w	r2, r2, #2
 800a1ba:	9307      	strge	r3, [sp, #28]
 800a1bc:	9307      	strlt	r3, [sp, #28]
 800a1be:	bfb8      	it	lt
 800a1c0:	9204      	strlt	r2, [sp, #16]
 800a1c2:	7823      	ldrb	r3, [r4, #0]
 800a1c4:	2b2e      	cmp	r3, #46	; 0x2e
 800a1c6:	d10c      	bne.n	800a1e2 <_vfiprintf_r+0x176>
 800a1c8:	7863      	ldrb	r3, [r4, #1]
 800a1ca:	2b2a      	cmp	r3, #42	; 0x2a
 800a1cc:	d135      	bne.n	800a23a <_vfiprintf_r+0x1ce>
 800a1ce:	9b03      	ldr	r3, [sp, #12]
 800a1d0:	3402      	adds	r4, #2
 800a1d2:	1d1a      	adds	r2, r3, #4
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	9203      	str	r2, [sp, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	bfb8      	it	lt
 800a1dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1e0:	9305      	str	r3, [sp, #20]
 800a1e2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a2bc <_vfiprintf_r+0x250>
 800a1e6:	2203      	movs	r2, #3
 800a1e8:	4650      	mov	r0, sl
 800a1ea:	7821      	ldrb	r1, [r4, #0]
 800a1ec:	f7fe fff6 	bl	80091dc <memchr>
 800a1f0:	b140      	cbz	r0, 800a204 <_vfiprintf_r+0x198>
 800a1f2:	2340      	movs	r3, #64	; 0x40
 800a1f4:	eba0 000a 	sub.w	r0, r0, sl
 800a1f8:	fa03 f000 	lsl.w	r0, r3, r0
 800a1fc:	9b04      	ldr	r3, [sp, #16]
 800a1fe:	3401      	adds	r4, #1
 800a200:	4303      	orrs	r3, r0
 800a202:	9304      	str	r3, [sp, #16]
 800a204:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a208:	2206      	movs	r2, #6
 800a20a:	482d      	ldr	r0, [pc, #180]	; (800a2c0 <_vfiprintf_r+0x254>)
 800a20c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a210:	f7fe ffe4 	bl	80091dc <memchr>
 800a214:	2800      	cmp	r0, #0
 800a216:	d03f      	beq.n	800a298 <_vfiprintf_r+0x22c>
 800a218:	4b2a      	ldr	r3, [pc, #168]	; (800a2c4 <_vfiprintf_r+0x258>)
 800a21a:	bb1b      	cbnz	r3, 800a264 <_vfiprintf_r+0x1f8>
 800a21c:	9b03      	ldr	r3, [sp, #12]
 800a21e:	3307      	adds	r3, #7
 800a220:	f023 0307 	bic.w	r3, r3, #7
 800a224:	3308      	adds	r3, #8
 800a226:	9303      	str	r3, [sp, #12]
 800a228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a22a:	443b      	add	r3, r7
 800a22c:	9309      	str	r3, [sp, #36]	; 0x24
 800a22e:	e767      	b.n	800a100 <_vfiprintf_r+0x94>
 800a230:	460c      	mov	r4, r1
 800a232:	2001      	movs	r0, #1
 800a234:	fb0c 3202 	mla	r2, ip, r2, r3
 800a238:	e7a5      	b.n	800a186 <_vfiprintf_r+0x11a>
 800a23a:	2300      	movs	r3, #0
 800a23c:	f04f 0c0a 	mov.w	ip, #10
 800a240:	4619      	mov	r1, r3
 800a242:	3401      	adds	r4, #1
 800a244:	9305      	str	r3, [sp, #20]
 800a246:	4620      	mov	r0, r4
 800a248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a24c:	3a30      	subs	r2, #48	; 0x30
 800a24e:	2a09      	cmp	r2, #9
 800a250:	d903      	bls.n	800a25a <_vfiprintf_r+0x1ee>
 800a252:	2b00      	cmp	r3, #0
 800a254:	d0c5      	beq.n	800a1e2 <_vfiprintf_r+0x176>
 800a256:	9105      	str	r1, [sp, #20]
 800a258:	e7c3      	b.n	800a1e2 <_vfiprintf_r+0x176>
 800a25a:	4604      	mov	r4, r0
 800a25c:	2301      	movs	r3, #1
 800a25e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a262:	e7f0      	b.n	800a246 <_vfiprintf_r+0x1da>
 800a264:	ab03      	add	r3, sp, #12
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	462a      	mov	r2, r5
 800a26a:	4630      	mov	r0, r6
 800a26c:	4b16      	ldr	r3, [pc, #88]	; (800a2c8 <_vfiprintf_r+0x25c>)
 800a26e:	a904      	add	r1, sp, #16
 800a270:	f7fb fd96 	bl	8005da0 <_printf_float>
 800a274:	4607      	mov	r7, r0
 800a276:	1c78      	adds	r0, r7, #1
 800a278:	d1d6      	bne.n	800a228 <_vfiprintf_r+0x1bc>
 800a27a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a27c:	07d9      	lsls	r1, r3, #31
 800a27e:	d405      	bmi.n	800a28c <_vfiprintf_r+0x220>
 800a280:	89ab      	ldrh	r3, [r5, #12]
 800a282:	059a      	lsls	r2, r3, #22
 800a284:	d402      	bmi.n	800a28c <_vfiprintf_r+0x220>
 800a286:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a288:	f7fe ff28 	bl	80090dc <__retarget_lock_release_recursive>
 800a28c:	89ab      	ldrh	r3, [r5, #12]
 800a28e:	065b      	lsls	r3, r3, #25
 800a290:	f53f af12 	bmi.w	800a0b8 <_vfiprintf_r+0x4c>
 800a294:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a296:	e711      	b.n	800a0bc <_vfiprintf_r+0x50>
 800a298:	ab03      	add	r3, sp, #12
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	462a      	mov	r2, r5
 800a29e:	4630      	mov	r0, r6
 800a2a0:	4b09      	ldr	r3, [pc, #36]	; (800a2c8 <_vfiprintf_r+0x25c>)
 800a2a2:	a904      	add	r1, sp, #16
 800a2a4:	f7fc f818 	bl	80062d8 <_printf_i>
 800a2a8:	e7e4      	b.n	800a274 <_vfiprintf_r+0x208>
 800a2aa:	bf00      	nop
 800a2ac:	0800ac84 	.word	0x0800ac84
 800a2b0:	0800aca4 	.word	0x0800aca4
 800a2b4:	0800ac64 	.word	0x0800ac64
 800a2b8:	0800ae9c 	.word	0x0800ae9c
 800a2bc:	0800aea2 	.word	0x0800aea2
 800a2c0:	0800aea6 	.word	0x0800aea6
 800a2c4:	08005da1 	.word	0x08005da1
 800a2c8:	0800a047 	.word	0x0800a047

0800a2cc <_putc_r>:
 800a2cc:	b570      	push	{r4, r5, r6, lr}
 800a2ce:	460d      	mov	r5, r1
 800a2d0:	4614      	mov	r4, r2
 800a2d2:	4606      	mov	r6, r0
 800a2d4:	b118      	cbz	r0, 800a2de <_putc_r+0x12>
 800a2d6:	6983      	ldr	r3, [r0, #24]
 800a2d8:	b90b      	cbnz	r3, 800a2de <_putc_r+0x12>
 800a2da:	f7fe faf5 	bl	80088c8 <__sinit>
 800a2de:	4b1c      	ldr	r3, [pc, #112]	; (800a350 <_putc_r+0x84>)
 800a2e0:	429c      	cmp	r4, r3
 800a2e2:	d124      	bne.n	800a32e <_putc_r+0x62>
 800a2e4:	6874      	ldr	r4, [r6, #4]
 800a2e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2e8:	07d8      	lsls	r0, r3, #31
 800a2ea:	d405      	bmi.n	800a2f8 <_putc_r+0x2c>
 800a2ec:	89a3      	ldrh	r3, [r4, #12]
 800a2ee:	0599      	lsls	r1, r3, #22
 800a2f0:	d402      	bmi.n	800a2f8 <_putc_r+0x2c>
 800a2f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2f4:	f7fe fef1 	bl	80090da <__retarget_lock_acquire_recursive>
 800a2f8:	68a3      	ldr	r3, [r4, #8]
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	60a3      	str	r3, [r4, #8]
 800a300:	da05      	bge.n	800a30e <_putc_r+0x42>
 800a302:	69a2      	ldr	r2, [r4, #24]
 800a304:	4293      	cmp	r3, r2
 800a306:	db1c      	blt.n	800a342 <_putc_r+0x76>
 800a308:	b2eb      	uxtb	r3, r5
 800a30a:	2b0a      	cmp	r3, #10
 800a30c:	d019      	beq.n	800a342 <_putc_r+0x76>
 800a30e:	6823      	ldr	r3, [r4, #0]
 800a310:	1c5a      	adds	r2, r3, #1
 800a312:	6022      	str	r2, [r4, #0]
 800a314:	701d      	strb	r5, [r3, #0]
 800a316:	b2ed      	uxtb	r5, r5
 800a318:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a31a:	07da      	lsls	r2, r3, #31
 800a31c:	d405      	bmi.n	800a32a <_putc_r+0x5e>
 800a31e:	89a3      	ldrh	r3, [r4, #12]
 800a320:	059b      	lsls	r3, r3, #22
 800a322:	d402      	bmi.n	800a32a <_putc_r+0x5e>
 800a324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a326:	f7fe fed9 	bl	80090dc <__retarget_lock_release_recursive>
 800a32a:	4628      	mov	r0, r5
 800a32c:	bd70      	pop	{r4, r5, r6, pc}
 800a32e:	4b09      	ldr	r3, [pc, #36]	; (800a354 <_putc_r+0x88>)
 800a330:	429c      	cmp	r4, r3
 800a332:	d101      	bne.n	800a338 <_putc_r+0x6c>
 800a334:	68b4      	ldr	r4, [r6, #8]
 800a336:	e7d6      	b.n	800a2e6 <_putc_r+0x1a>
 800a338:	4b07      	ldr	r3, [pc, #28]	; (800a358 <_putc_r+0x8c>)
 800a33a:	429c      	cmp	r4, r3
 800a33c:	bf08      	it	eq
 800a33e:	68f4      	ldreq	r4, [r6, #12]
 800a340:	e7d1      	b.n	800a2e6 <_putc_r+0x1a>
 800a342:	4629      	mov	r1, r5
 800a344:	4622      	mov	r2, r4
 800a346:	4630      	mov	r0, r6
 800a348:	f7fd fa6c 	bl	8007824 <__swbuf_r>
 800a34c:	4605      	mov	r5, r0
 800a34e:	e7e3      	b.n	800a318 <_putc_r+0x4c>
 800a350:	0800ac84 	.word	0x0800ac84
 800a354:	0800aca4 	.word	0x0800aca4
 800a358:	0800ac64 	.word	0x0800ac64

0800a35c <nan>:
 800a35c:	2000      	movs	r0, #0
 800a35e:	4901      	ldr	r1, [pc, #4]	; (800a364 <nan+0x8>)
 800a360:	4770      	bx	lr
 800a362:	bf00      	nop
 800a364:	7ff80000 	.word	0x7ff80000

0800a368 <_sbrk_r>:
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	2300      	movs	r3, #0
 800a36c:	4d05      	ldr	r5, [pc, #20]	; (800a384 <_sbrk_r+0x1c>)
 800a36e:	4604      	mov	r4, r0
 800a370:	4608      	mov	r0, r1
 800a372:	602b      	str	r3, [r5, #0]
 800a374:	f7f8 f95a 	bl	800262c <_sbrk>
 800a378:	1c43      	adds	r3, r0, #1
 800a37a:	d102      	bne.n	800a382 <_sbrk_r+0x1a>
 800a37c:	682b      	ldr	r3, [r5, #0]
 800a37e:	b103      	cbz	r3, 800a382 <_sbrk_r+0x1a>
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	bd38      	pop	{r3, r4, r5, pc}
 800a384:	200003ec 	.word	0x200003ec

0800a388 <__sread>:
 800a388:	b510      	push	{r4, lr}
 800a38a:	460c      	mov	r4, r1
 800a38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a390:	f000 f93a 	bl	800a608 <_read_r>
 800a394:	2800      	cmp	r0, #0
 800a396:	bfab      	itete	ge
 800a398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a39a:	89a3      	ldrhlt	r3, [r4, #12]
 800a39c:	181b      	addge	r3, r3, r0
 800a39e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3a2:	bfac      	ite	ge
 800a3a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3a6:	81a3      	strhlt	r3, [r4, #12]
 800a3a8:	bd10      	pop	{r4, pc}

0800a3aa <__swrite>:
 800a3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ae:	461f      	mov	r7, r3
 800a3b0:	898b      	ldrh	r3, [r1, #12]
 800a3b2:	4605      	mov	r5, r0
 800a3b4:	05db      	lsls	r3, r3, #23
 800a3b6:	460c      	mov	r4, r1
 800a3b8:	4616      	mov	r6, r2
 800a3ba:	d505      	bpl.n	800a3c8 <__swrite+0x1e>
 800a3bc:	2302      	movs	r3, #2
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c4:	f000 f8b8 	bl	800a538 <_lseek_r>
 800a3c8:	89a3      	ldrh	r3, [r4, #12]
 800a3ca:	4632      	mov	r2, r6
 800a3cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3d0:	81a3      	strh	r3, [r4, #12]
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	463b      	mov	r3, r7
 800a3d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3de:	f000 b837 	b.w	800a450 <_write_r>

0800a3e2 <__sseek>:
 800a3e2:	b510      	push	{r4, lr}
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ea:	f000 f8a5 	bl	800a538 <_lseek_r>
 800a3ee:	1c43      	adds	r3, r0, #1
 800a3f0:	89a3      	ldrh	r3, [r4, #12]
 800a3f2:	bf15      	itete	ne
 800a3f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3fe:	81a3      	strheq	r3, [r4, #12]
 800a400:	bf18      	it	ne
 800a402:	81a3      	strhne	r3, [r4, #12]
 800a404:	bd10      	pop	{r4, pc}

0800a406 <__sclose>:
 800a406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a40a:	f000 b851 	b.w	800a4b0 <_close_r>

0800a40e <strncmp>:
 800a40e:	4603      	mov	r3, r0
 800a410:	b510      	push	{r4, lr}
 800a412:	b172      	cbz	r2, 800a432 <strncmp+0x24>
 800a414:	3901      	subs	r1, #1
 800a416:	1884      	adds	r4, r0, r2
 800a418:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a41c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a420:	4290      	cmp	r0, r2
 800a422:	d101      	bne.n	800a428 <strncmp+0x1a>
 800a424:	42a3      	cmp	r3, r4
 800a426:	d101      	bne.n	800a42c <strncmp+0x1e>
 800a428:	1a80      	subs	r0, r0, r2
 800a42a:	bd10      	pop	{r4, pc}
 800a42c:	2800      	cmp	r0, #0
 800a42e:	d1f3      	bne.n	800a418 <strncmp+0xa>
 800a430:	e7fa      	b.n	800a428 <strncmp+0x1a>
 800a432:	4610      	mov	r0, r2
 800a434:	e7f9      	b.n	800a42a <strncmp+0x1c>

0800a436 <__ascii_wctomb>:
 800a436:	4603      	mov	r3, r0
 800a438:	4608      	mov	r0, r1
 800a43a:	b141      	cbz	r1, 800a44e <__ascii_wctomb+0x18>
 800a43c:	2aff      	cmp	r2, #255	; 0xff
 800a43e:	d904      	bls.n	800a44a <__ascii_wctomb+0x14>
 800a440:	228a      	movs	r2, #138	; 0x8a
 800a442:	f04f 30ff 	mov.w	r0, #4294967295
 800a446:	601a      	str	r2, [r3, #0]
 800a448:	4770      	bx	lr
 800a44a:	2001      	movs	r0, #1
 800a44c:	700a      	strb	r2, [r1, #0]
 800a44e:	4770      	bx	lr

0800a450 <_write_r>:
 800a450:	b538      	push	{r3, r4, r5, lr}
 800a452:	4604      	mov	r4, r0
 800a454:	4608      	mov	r0, r1
 800a456:	4611      	mov	r1, r2
 800a458:	2200      	movs	r2, #0
 800a45a:	4d05      	ldr	r5, [pc, #20]	; (800a470 <_write_r+0x20>)
 800a45c:	602a      	str	r2, [r5, #0]
 800a45e:	461a      	mov	r2, r3
 800a460:	f7f8 f898 	bl	8002594 <_write>
 800a464:	1c43      	adds	r3, r0, #1
 800a466:	d102      	bne.n	800a46e <_write_r+0x1e>
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	b103      	cbz	r3, 800a46e <_write_r+0x1e>
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	bd38      	pop	{r3, r4, r5, pc}
 800a470:	200003ec 	.word	0x200003ec

0800a474 <__assert_func>:
 800a474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a476:	4614      	mov	r4, r2
 800a478:	461a      	mov	r2, r3
 800a47a:	4b09      	ldr	r3, [pc, #36]	; (800a4a0 <__assert_func+0x2c>)
 800a47c:	4605      	mov	r5, r0
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68d8      	ldr	r0, [r3, #12]
 800a482:	b14c      	cbz	r4, 800a498 <__assert_func+0x24>
 800a484:	4b07      	ldr	r3, [pc, #28]	; (800a4a4 <__assert_func+0x30>)
 800a486:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a48a:	9100      	str	r1, [sp, #0]
 800a48c:	462b      	mov	r3, r5
 800a48e:	4906      	ldr	r1, [pc, #24]	; (800a4a8 <__assert_func+0x34>)
 800a490:	f000 f81e 	bl	800a4d0 <fiprintf>
 800a494:	f000 f8ca 	bl	800a62c <abort>
 800a498:	4b04      	ldr	r3, [pc, #16]	; (800a4ac <__assert_func+0x38>)
 800a49a:	461c      	mov	r4, r3
 800a49c:	e7f3      	b.n	800a486 <__assert_func+0x12>
 800a49e:	bf00      	nop
 800a4a0:	20000020 	.word	0x20000020
 800a4a4:	0800aead 	.word	0x0800aead
 800a4a8:	0800aeba 	.word	0x0800aeba
 800a4ac:	0800aee8 	.word	0x0800aee8

0800a4b0 <_close_r>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	4d05      	ldr	r5, [pc, #20]	; (800a4cc <_close_r+0x1c>)
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	4608      	mov	r0, r1
 800a4ba:	602b      	str	r3, [r5, #0]
 800a4bc:	f7f8 f886 	bl	80025cc <_close>
 800a4c0:	1c43      	adds	r3, r0, #1
 800a4c2:	d102      	bne.n	800a4ca <_close_r+0x1a>
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	b103      	cbz	r3, 800a4ca <_close_r+0x1a>
 800a4c8:	6023      	str	r3, [r4, #0]
 800a4ca:	bd38      	pop	{r3, r4, r5, pc}
 800a4cc:	200003ec 	.word	0x200003ec

0800a4d0 <fiprintf>:
 800a4d0:	b40e      	push	{r1, r2, r3}
 800a4d2:	b503      	push	{r0, r1, lr}
 800a4d4:	4601      	mov	r1, r0
 800a4d6:	ab03      	add	r3, sp, #12
 800a4d8:	4805      	ldr	r0, [pc, #20]	; (800a4f0 <fiprintf+0x20>)
 800a4da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4de:	6800      	ldr	r0, [r0, #0]
 800a4e0:	9301      	str	r3, [sp, #4]
 800a4e2:	f7ff fdc3 	bl	800a06c <_vfiprintf_r>
 800a4e6:	b002      	add	sp, #8
 800a4e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4ec:	b003      	add	sp, #12
 800a4ee:	4770      	bx	lr
 800a4f0:	20000020 	.word	0x20000020

0800a4f4 <_fstat_r>:
 800a4f4:	b538      	push	{r3, r4, r5, lr}
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	4d06      	ldr	r5, [pc, #24]	; (800a514 <_fstat_r+0x20>)
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	4608      	mov	r0, r1
 800a4fe:	4611      	mov	r1, r2
 800a500:	602b      	str	r3, [r5, #0]
 800a502:	f7f8 f86e 	bl	80025e2 <_fstat>
 800a506:	1c43      	adds	r3, r0, #1
 800a508:	d102      	bne.n	800a510 <_fstat_r+0x1c>
 800a50a:	682b      	ldr	r3, [r5, #0]
 800a50c:	b103      	cbz	r3, 800a510 <_fstat_r+0x1c>
 800a50e:	6023      	str	r3, [r4, #0]
 800a510:	bd38      	pop	{r3, r4, r5, pc}
 800a512:	bf00      	nop
 800a514:	200003ec 	.word	0x200003ec

0800a518 <_isatty_r>:
 800a518:	b538      	push	{r3, r4, r5, lr}
 800a51a:	2300      	movs	r3, #0
 800a51c:	4d05      	ldr	r5, [pc, #20]	; (800a534 <_isatty_r+0x1c>)
 800a51e:	4604      	mov	r4, r0
 800a520:	4608      	mov	r0, r1
 800a522:	602b      	str	r3, [r5, #0]
 800a524:	f7f8 f86c 	bl	8002600 <_isatty>
 800a528:	1c43      	adds	r3, r0, #1
 800a52a:	d102      	bne.n	800a532 <_isatty_r+0x1a>
 800a52c:	682b      	ldr	r3, [r5, #0]
 800a52e:	b103      	cbz	r3, 800a532 <_isatty_r+0x1a>
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	bd38      	pop	{r3, r4, r5, pc}
 800a534:	200003ec 	.word	0x200003ec

0800a538 <_lseek_r>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	4604      	mov	r4, r0
 800a53c:	4608      	mov	r0, r1
 800a53e:	4611      	mov	r1, r2
 800a540:	2200      	movs	r2, #0
 800a542:	4d05      	ldr	r5, [pc, #20]	; (800a558 <_lseek_r+0x20>)
 800a544:	602a      	str	r2, [r5, #0]
 800a546:	461a      	mov	r2, r3
 800a548:	f7f8 f864 	bl	8002614 <_lseek>
 800a54c:	1c43      	adds	r3, r0, #1
 800a54e:	d102      	bne.n	800a556 <_lseek_r+0x1e>
 800a550:	682b      	ldr	r3, [r5, #0]
 800a552:	b103      	cbz	r3, 800a556 <_lseek_r+0x1e>
 800a554:	6023      	str	r3, [r4, #0]
 800a556:	bd38      	pop	{r3, r4, r5, pc}
 800a558:	200003ec 	.word	0x200003ec

0800a55c <memmove>:
 800a55c:	4288      	cmp	r0, r1
 800a55e:	b510      	push	{r4, lr}
 800a560:	eb01 0402 	add.w	r4, r1, r2
 800a564:	d902      	bls.n	800a56c <memmove+0x10>
 800a566:	4284      	cmp	r4, r0
 800a568:	4623      	mov	r3, r4
 800a56a:	d807      	bhi.n	800a57c <memmove+0x20>
 800a56c:	1e43      	subs	r3, r0, #1
 800a56e:	42a1      	cmp	r1, r4
 800a570:	d008      	beq.n	800a584 <memmove+0x28>
 800a572:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a57a:	e7f8      	b.n	800a56e <memmove+0x12>
 800a57c:	4601      	mov	r1, r0
 800a57e:	4402      	add	r2, r0
 800a580:	428a      	cmp	r2, r1
 800a582:	d100      	bne.n	800a586 <memmove+0x2a>
 800a584:	bd10      	pop	{r4, pc}
 800a586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a58a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a58e:	e7f7      	b.n	800a580 <memmove+0x24>

0800a590 <__malloc_lock>:
 800a590:	4801      	ldr	r0, [pc, #4]	; (800a598 <__malloc_lock+0x8>)
 800a592:	f7fe bda2 	b.w	80090da <__retarget_lock_acquire_recursive>
 800a596:	bf00      	nop
 800a598:	200003e0 	.word	0x200003e0

0800a59c <__malloc_unlock>:
 800a59c:	4801      	ldr	r0, [pc, #4]	; (800a5a4 <__malloc_unlock+0x8>)
 800a59e:	f7fe bd9d 	b.w	80090dc <__retarget_lock_release_recursive>
 800a5a2:	bf00      	nop
 800a5a4:	200003e0 	.word	0x200003e0

0800a5a8 <_realloc_r>:
 800a5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ac:	4680      	mov	r8, r0
 800a5ae:	4614      	mov	r4, r2
 800a5b0:	460e      	mov	r6, r1
 800a5b2:	b921      	cbnz	r1, 800a5be <_realloc_r+0x16>
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ba:	f7ff bb5f 	b.w	8009c7c <_malloc_r>
 800a5be:	b92a      	cbnz	r2, 800a5cc <_realloc_r+0x24>
 800a5c0:	f7ff faf4 	bl	8009bac <_free_r>
 800a5c4:	4625      	mov	r5, r4
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5cc:	f000 f835 	bl	800a63a <_malloc_usable_size_r>
 800a5d0:	4284      	cmp	r4, r0
 800a5d2:	4607      	mov	r7, r0
 800a5d4:	d802      	bhi.n	800a5dc <_realloc_r+0x34>
 800a5d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5da:	d812      	bhi.n	800a602 <_realloc_r+0x5a>
 800a5dc:	4621      	mov	r1, r4
 800a5de:	4640      	mov	r0, r8
 800a5e0:	f7ff fb4c 	bl	8009c7c <_malloc_r>
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d0ed      	beq.n	800a5c6 <_realloc_r+0x1e>
 800a5ea:	42bc      	cmp	r4, r7
 800a5ec:	4622      	mov	r2, r4
 800a5ee:	4631      	mov	r1, r6
 800a5f0:	bf28      	it	cs
 800a5f2:	463a      	movcs	r2, r7
 800a5f4:	f7fe fe00 	bl	80091f8 <memcpy>
 800a5f8:	4631      	mov	r1, r6
 800a5fa:	4640      	mov	r0, r8
 800a5fc:	f7ff fad6 	bl	8009bac <_free_r>
 800a600:	e7e1      	b.n	800a5c6 <_realloc_r+0x1e>
 800a602:	4635      	mov	r5, r6
 800a604:	e7df      	b.n	800a5c6 <_realloc_r+0x1e>
	...

0800a608 <_read_r>:
 800a608:	b538      	push	{r3, r4, r5, lr}
 800a60a:	4604      	mov	r4, r0
 800a60c:	4608      	mov	r0, r1
 800a60e:	4611      	mov	r1, r2
 800a610:	2200      	movs	r2, #0
 800a612:	4d05      	ldr	r5, [pc, #20]	; (800a628 <_read_r+0x20>)
 800a614:	602a      	str	r2, [r5, #0]
 800a616:	461a      	mov	r2, r3
 800a618:	f7f7 ff9f 	bl	800255a <_read>
 800a61c:	1c43      	adds	r3, r0, #1
 800a61e:	d102      	bne.n	800a626 <_read_r+0x1e>
 800a620:	682b      	ldr	r3, [r5, #0]
 800a622:	b103      	cbz	r3, 800a626 <_read_r+0x1e>
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	bd38      	pop	{r3, r4, r5, pc}
 800a628:	200003ec 	.word	0x200003ec

0800a62c <abort>:
 800a62c:	2006      	movs	r0, #6
 800a62e:	b508      	push	{r3, lr}
 800a630:	f000 f834 	bl	800a69c <raise>
 800a634:	2001      	movs	r0, #1
 800a636:	f7f7 ff86 	bl	8002546 <_exit>

0800a63a <_malloc_usable_size_r>:
 800a63a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a63e:	1f18      	subs	r0, r3, #4
 800a640:	2b00      	cmp	r3, #0
 800a642:	bfbc      	itt	lt
 800a644:	580b      	ldrlt	r3, [r1, r0]
 800a646:	18c0      	addlt	r0, r0, r3
 800a648:	4770      	bx	lr

0800a64a <_raise_r>:
 800a64a:	291f      	cmp	r1, #31
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	4604      	mov	r4, r0
 800a650:	460d      	mov	r5, r1
 800a652:	d904      	bls.n	800a65e <_raise_r+0x14>
 800a654:	2316      	movs	r3, #22
 800a656:	6003      	str	r3, [r0, #0]
 800a658:	f04f 30ff 	mov.w	r0, #4294967295
 800a65c:	bd38      	pop	{r3, r4, r5, pc}
 800a65e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a660:	b112      	cbz	r2, 800a668 <_raise_r+0x1e>
 800a662:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a666:	b94b      	cbnz	r3, 800a67c <_raise_r+0x32>
 800a668:	4620      	mov	r0, r4
 800a66a:	f000 f831 	bl	800a6d0 <_getpid_r>
 800a66e:	462a      	mov	r2, r5
 800a670:	4601      	mov	r1, r0
 800a672:	4620      	mov	r0, r4
 800a674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a678:	f000 b818 	b.w	800a6ac <_kill_r>
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d00a      	beq.n	800a696 <_raise_r+0x4c>
 800a680:	1c59      	adds	r1, r3, #1
 800a682:	d103      	bne.n	800a68c <_raise_r+0x42>
 800a684:	2316      	movs	r3, #22
 800a686:	6003      	str	r3, [r0, #0]
 800a688:	2001      	movs	r0, #1
 800a68a:	e7e7      	b.n	800a65c <_raise_r+0x12>
 800a68c:	2400      	movs	r4, #0
 800a68e:	4628      	mov	r0, r5
 800a690:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a694:	4798      	blx	r3
 800a696:	2000      	movs	r0, #0
 800a698:	e7e0      	b.n	800a65c <_raise_r+0x12>
	...

0800a69c <raise>:
 800a69c:	4b02      	ldr	r3, [pc, #8]	; (800a6a8 <raise+0xc>)
 800a69e:	4601      	mov	r1, r0
 800a6a0:	6818      	ldr	r0, [r3, #0]
 800a6a2:	f7ff bfd2 	b.w	800a64a <_raise_r>
 800a6a6:	bf00      	nop
 800a6a8:	20000020 	.word	0x20000020

0800a6ac <_kill_r>:
 800a6ac:	b538      	push	{r3, r4, r5, lr}
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	4d06      	ldr	r5, [pc, #24]	; (800a6cc <_kill_r+0x20>)
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	4608      	mov	r0, r1
 800a6b6:	4611      	mov	r1, r2
 800a6b8:	602b      	str	r3, [r5, #0]
 800a6ba:	f7f7 ff34 	bl	8002526 <_kill>
 800a6be:	1c43      	adds	r3, r0, #1
 800a6c0:	d102      	bne.n	800a6c8 <_kill_r+0x1c>
 800a6c2:	682b      	ldr	r3, [r5, #0]
 800a6c4:	b103      	cbz	r3, 800a6c8 <_kill_r+0x1c>
 800a6c6:	6023      	str	r3, [r4, #0]
 800a6c8:	bd38      	pop	{r3, r4, r5, pc}
 800a6ca:	bf00      	nop
 800a6cc:	200003ec 	.word	0x200003ec

0800a6d0 <_getpid_r>:
 800a6d0:	f7f7 bf22 	b.w	8002518 <_getpid>

0800a6d4 <_init>:
 800a6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d6:	bf00      	nop
 800a6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6da:	bc08      	pop	{r3}
 800a6dc:	469e      	mov	lr, r3
 800a6de:	4770      	bx	lr

0800a6e0 <_fini>:
 800a6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e2:	bf00      	nop
 800a6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e6:	bc08      	pop	{r3}
 800a6e8:	469e      	mov	lr, r3
 800a6ea:	4770      	bx	lr
